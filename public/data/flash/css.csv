Question,Answer
fundamentals,fundamentals
What is a declaration?,"A ***declaration*** is made up of a property and a value. For example: 

```
color: black;
```

A group of declarations inside curly braces is called a ***declaration block***.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What is a selector?,"A declaration block is preceded by a ***selector*** (in this case, body):

```
body {
 color: black;
 font-family: Helvetica;
}
```

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What is a css rule or css ruleset?,"Together, the *selector* and *declaration block* are called a **ruleset**. A ruleset is also called a rule.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What are **at-rules**?,"**at-rules** are language constructs beginning with an “at” symbol, such as *@import* rules or *@media* queries.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
"When declarations conflict, What does the cascade consider to resolve the conflict?","1. - ***Stylesheet origin*** - Where the styles come from. Your styles are applied in conjunction with the browser’s default styles.
2. - ***Selector specificity*** - Which selectors take precedence over which.
3. - ***Source order*** - Order in which styles are declared in the stylesheet.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What are the possible origins a stylesheet can have?,"* ***author styles*** - The stylesheets you add to your web page. Highest priority.
* ***user stylesheet*** - Some browsers let users define a user stylesheet. This is considered a third origin, with a priority between user agent and author style.
* ***user agent styles*** - Styles added by the browser. Lowest priority

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What are `!important` declarations?,"A declaration can be marked important by adding `!important` to the end of the declaration, before the semicolon:

```
color: red !important;
```

Important declarations are treated as a higher-priority origin. The overall order of preference, in decreasing order, is this:

1. Author important
2. Author
3. User agent

Adding `!important` gives the declaration a specificity above inline-style.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What is CSS specificity?,"According to [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity), Specificity is the means by which browsers decide which CSS property values are the most relevant to an element and, therefore, will be applied. Simply put, if two CSS selectors apply to the same element, the one with higher specificity is used."
What are *inline-styles*?,"Styles added to an element using its `style` attribute, the declarations are applied only to that element. These are, in effect, “scoped” declarations, which override any declarations applied from your stylesheet or a tag.

The style attribute accepts a list of declarations separated by semicolons (`;`).

To override inline declarations in your stylesheet, you’ll need to add `!important` to the declaration.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
How does the browser evaluate the ***specificity*** of a css rule?,"The browser evaluates specificity in two parts:

1. ***inline-stiles*** - By default have higher specificity than any other styles.
2. ***selector specificity*** - Determined by the selectors (elaborated in another card)

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
How does the browser evaluate the *specificity* of a selector?,"1. - If a selector has more IDs, it wins. - ***ID selectors***
2. - If that results in a tie, the selector with the most classes wins. - ***Class selectors***
3. - If that results in a tie, the selector with the most tag names wins. - ***Tag selectors*** (also known as type selectors)
4. - If the origin and the specificity are the same, then the **declaration that appears later in the stylesheet**—or appears in a stylesheet included later on the page—takes precedence.

***NOTE***: *Pseudo-class selectors* (for example, `:hover`) and attribute selectors (for example, `[type=""input""]`) each have the same specificity as a class selector.

The universal selector (`*`) and combinators (`>`, `+`, `~`) have no effect on specificity.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
Which order do we need to apply to overwrite all the styles of a link?,"This listing shows styles for links on a page in the “correct” order.

```
 a:link {
  color: blue;
  text-decoration: none;
 }

 a:visited {
  color: purple;
 }

 a:hover {
  text-decoration: underline;
 }

 a:active {
  color: red;
 }
```

The cascade is the reason this order matters: given the same specificity, later styles override earlier styles.

A helpful mnemonic to remember this order is ***LoVe/HAte—link, visited, hover, active***.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What is a *cascaded value* aka *computed value*?,"The browser follows these three steps — *origin*, *specificity*, and *source* order to resolve every property for every element on the page. A declaration that “wins” the cascade is called a *cascaded value*.

There’s at most one *cascaded value* per property per element.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What are inheritance values?,"When an element has no cascaded value for a given property, it may inherit one from an ancestor element.

Not all properties are inherited (We wouldn’t want a passing its border down to every descendant element.), however. By default, only certain ones are. 

In general, these are the properties you’ll want to be inherited. They are primarily properties pertaining to text: `color, font, font-family, font-size, font-weight, font-variant, font-style, line-height, letter-spacing, text-align, text-indent, text-transform, white-space, and word-spacing`.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What does the special keyword `inherit` do to a property value?,"Will cause the element to inherit that value from its parent.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What does the special keyword `initial` do to a property value?,"If you assign the value *initial* to a property, then it effectively resets to its default value. It’s like a hard-reset of that value. 

**WARNING** The initial keyword isn’t supported in any version of Internet Explorer or Opera Mini. It works in all other major browsers, including Edge, Microsoft's successor to IE11.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What are shorthand properties?,"Shorthand properties are properties that let you set the values of several other properties at one time. For example, *font* is a shorthand property that lets you set several font properties. This declaration specifies `font-style`, `font-weight`, `font-size`, `line-height`, and `font-family`:

```
font: italic bold 18px/1.2 ""Helvetica"", ""Arial"", sans-serif;
```

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What is the problem with shorthand properties?,"Most shorthand properties let you omit certain values and only specify the bits you’re concerned with. It’s important to know, however, that doing this still sets the omitted values; they’ll be set implicitly to their initial value. This can silently override styles you specify elsewhere. If, for example, you were to use the shorthand `font` property for the page title without specifying a `font-weight`, a font weight of normal would still be set.

Of all the shorthand properties, `font` is the most egregious for causing problems, because it sets such a wide array of properties.

```
 .title {
  font: 32px Helvetica, Arial, sans-serif;
 }
```

is equivalent to

```
 .title {
  font-style: normal;
  font-variant: normal;
  font-weight: normal;
  font-stretch: normal;
  line-height: normal;
  font-size: 32px;
  font-family: Helvetica, Arial, sans-serif;
 }
```

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
"What is the TOP, RIGHT, BOTTOM, LEFT pattern of `margin` and `padding` shorthand properties?","For properties like `margin` and `padding`, or some of the border properties that specify values for each of the four sides of an element. For these properties, the values are in clockwise order, beginning at the top.

Properties whose values follow this pattern also support truncated notations. If the declaration ends before one of the four sides is given a value, that side takes its value from the opposite side. Specify three values, and the left and right side will both use the second one. Specify two values, and the top and bottom will use the first one. If you specify only one value, it will apply to all four sides.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What is the `:root` node selector?,"The root node is the ancestor of all other elements in the document. It has a special pseudo-class selector (`:root`) that you can use to target it. This is equivalent to using the type selector `html` with the specificity of a `class` rather than a `tag`.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What is a media query?,"media query—An `@media` rule used to specify styles that will be applied only to certain screen sizes or media types (for example, `print` or `screen`). This is a key component of responsive design.

```
@media (min-width: 800px) {
  :root {
    font-size: 0.875em;
   }
 }

@media (min-width: 1200px) {
  :root {
     font-size: 1em;
   }
 }
```

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
Why can it be confusing working with ***em*** units?,"One thing to keep in mind when using `em` is that when you set the `font-size` in it, it’s based on the nearest parent element with a declared font-size.

```
.parent { 
   font-size: 20px;
}

 .child { 
  /* This is based on 20px, so it's 30px */
    font-size: 1.5em;
 }
```

But when we size other things in `em`, it’s now based on the newly-adjusted `font-size` of the current element. For example:

```
.parent {
   font-size: 20px;
}
  
.child {
   /* This is based on 20px, so it's 30px */
     font-size: 1.5em;

    /* This is based on 1.5em (not 20px), so it's also 30px */
    border: 1em solid black;
}
```

It just can be weird to see two different em values in the same element evaluating to the same end value.

This is in addition to the fact that the cascading effect of `em`s is sometimes challenging in itself. If you size things inside components in ems and those components can be nested, that can cause cascading of sizes that may be undesirable.

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/building-resizeable-components-relative-css-units/#aa-challenges-with-em)"

Question,Answer
selectors,selectors
Types of selectors,"**Simple selector**
A simple selector is a selector with a single component, such as a single type selector, attribute selector, or pseudo-class, that's not used in combination with or contains any other selector component or combinator. 

```
#myId {
}

[pattern*=""\d""] {
}
```

**Compound selector**
A compound selector is a sequence of simple selectors that are not separated by a combinator. A compound selector represents a set of simultaneous conditions on a single element. 

```
a#selected {
}

[type=""checkbox""]:checked:focus {
}
```

In a compound selector, the type selector or universal selector must come first in the sequence of selectors. Only one type selector or universal selector is allowed in the sequence. As whitespace represents the descendant combinator, no whitespace is allowed between the simple selectors that make up a compound selector.

**Complex selector**
A complex selector is a sequence of one or more *simple* and/or *compound* selectors that are separated by combinators, including the white space descendant combinator.

A complex selector represents a set of simultaneous conditions on a set of elements.

```
a#selected > .icon {
}

.box h2 + p {
}
```

Selectors can be read from right to left. For example, `a#selected > .icon` matches all elements with a class of `icon` that are the direct children of the `<a>` element with the id `selected`. The selector `.box h2 + p` matches the first `<p>`s to come immediately after any `<h2>` elements that are descendants of any element with the class of `box`.

**Relative selector**
A relative selector is a selector representing an element relative to one or more anchor elements preceded by a combinator. Relative selectors that don't begin with an explicit combinator have an implied descendant combinator.

```
+ div#topic > #reference {
}

> .icon {
}

dt:has(+ img) ~ dd {
}
```

**Selector list**
A selector list is a comma-separated list of simple, compound, and/or complex selectors. A given element is said to match a selector list when the element matches any (at least one) of the selectors in that selector list.

```
#main,
article.heading {
}
```

If any selector in a *non-forgiving selector list* is invalid, the entire selector list is invalidated.

```
#main,
:bad-pseudoclass,
.validClass {
  /* `:bad-pseudoclass` is invalid, invalidating this style block */
}
```

The [`:is()`](https://developer.mozilla.org/en-US/docs/Web/CSS/:is) and [`:where()`](https://developer.mozilla.org/en-US/docs/Web/CSS/:where) pseudo-classes can be used to construct *forgiving selector lists*.

## Footnote

[""Relative selector"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_selectors/Selector_structure#relative_selector) Retrieved February 14, 2024."
What are *CSS atribute selectors*,"The CSS attribute selector matches elements based on the element having a given attribute explicitly set, with options for defining an attribute value or substring value match.

The case sensitivity of attribute names and values depends on the document language. In HTML, attribute names are case-insensitive.

If the attribute value is case-sensitive, like `class`, `id`, and `data-*` attributes, the attribute selector value match is case-sensitive. Attributes defined outside of the HTML specification, like `role` and `aria-*` attributes, are also case-sensitive. Normally case-sensitive attribute selectors can be made case-insensitive with the inclusion of the case-insensitive modifier (`i`).

```
/* <a> elements with a title attribute */
a[title] {
  color: purple;
}

/* <a> elements with an href matching ""https://example.org"" */
a[href=""https://example.org""]
{
  color: green;
}

/* <a> elements with an href containing ""example"" */
a[href*=""example""] {
  font-size: 2em;
}

/* <a> elements with an href ending "".org"", case-insensitive */
a[href$="".org"" i] {
  font-style: italic;
}

/* <a> elements whose class attribute contains the word ""logo"" */
a[class~=""logo""] {
  padding: 2px;
}
```

## Footnote

[""Attribute selectors - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors) Retrieved February 8, 2024."
*CSS attribute selector* syntax,"**Syntax**

* `[attr]` - Represents elements with an attribute name of `attr`.
* `[attr=value]` - Represents elements with an attribute name of `attr` whose value is exactly `value`.
* `[attr~=value]` - Represents elements with an attribute name of `attr` whose value is a whitespace-separated list of words, one of which is exactly `value`.
* `[attr|=value]` - Represents elements with an attribute name of `attr` whose value can be exactly value or can begin with value immediately followed by a hyphen, `-` (`U+002D`). It is often used for language subcode matches.
* `[attr^=value]` - Represents elements with an attribute name of `attr` whose value is prefixed (preceded) by value.
* `[attr$=value]` - Represents elements with an attribute name of `attr` whose value is suffixed (followed) by value.
* `[attr*=value]` - Represents elements with an attribute name of `attr` whose value contains at least one occurrence of value within the string.
* `[attr operator value i]` - Adding an `i` (or `I`) before the closing bracket causes the value to be compared case-insensitively (for characters within the ASCII range).
* `[attr operator value s]` Experimental - Adding an `s` (or `S`) before the closing bracket causes the value to be compared case-sensitively (for characters within the ASCII range).

Examples:

```
a {
  color: blue;
}

/* Internal links, beginning with ""#"" */
a[href^=""#""] {
  background-color: gold;
}

/* Links with ""example"" anywhere in the URL */
a[href*=""example""] {
  background-color: silver;
}

/* Links with ""insensitive"" anywhere in the URL,
   regardless of capitalization */
a[href*=""insensitive"" i] {
  color: cyan;
}

/* Links with ""cAsE"" anywhere in the URL,
with matching capitalization */
a[href*=""cAsE"" s] {
  color: pink;
}

/* Links that end in "".org"" */
a[href$="".org""] {
  color: red;
}

/* Links that start with ""https://"" and end in "".org"" */
a[href^=""https://""][href$="".org""]
{
  color: green;
}
```

## Footnote

[""Attribute selectors - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors) Retrieved February 8, 2024."
What is the specificity of an `attribute selector`?,"It has the same specificity than a [class selector](https://developer.mozilla.org/en-US/docs/Web/CSS/Class_selectors)

## Footnote

[""CLASS column"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity#class_column) Retrieved February 8, 2024."
What are *CSS class selectors*?,"The *CSS class selector* matches elements based on the contents of their [`class`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#class) attribute.

```
/* All elements with class=""spacious"" */
.spacious {
  margin: 2em;
}

/* All <li> elements with class=""spacious"" */
li.spacious {
  margin: 2em;
}

/* All <li> elements with a class list that includes both ""spacious"" and ""elegant"" */
/* For example, class=""elegant retro spacious"" */
li.spacious.elegant {
  margin: 2em;
}
```

## Footnote

[""Class selectors - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/Class_selectors) Retrieved February 8, 2024."
Syntax of *CSS class selectors*,"**Syntax**

```
.class_name { style properties }
```

Note that this is equivalent to the following attribute selector:

```
[class~=class_name] { style properties }
```

Examples

```
.red {
  color: #f33;
}

.yellow-bg {
  background: #ffa;
}

.fancy {
  font-weight: bold;
  text-shadow: 4px 4px 3px #77f;
}
```

## Footnote

[""Class selectors - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/Class_selectors) Retrieved February 8, 2024."
What are *CSS ID selectors*?,"The *CSS ID selector* matches an element based on the value of the element's `id` attribute. In order for the element to be selected, its id attribute must match exactly the value given in the selector.

```
/* The element with id=""demo"" */
#demo {
  border: red 2px solid;
}
```

## Footnote

[""ID selectors - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/ID_selectors) Retrieved February 9, 2024."
*CSS ID selectors* syntax,"**Syntax**

```
#id_value { style properties }
```
Note that syntactically (but not specificity-wise), this is equivalent to the following attribute selector:

```
[id=id_value] { style properties }
```

Examples:

```
#identified {
  background-color: skyblue;
}
```

## Footnote

[""ID selectors - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/ID_selectors) Retrieved February 9, 2024."
What is the *CSS `&` nesting selector*?,"The *CSS `&` nesting selector* explicitly states the relationship between parent and child rules when using [CSS nesting](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_nesting). It makes the nested child rule selectors *relative to the parent element*. Without the `&` nesting selector, the child rule selector selects child elements. The child rule selectors have the same [specificity](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_nesting/Nesting_and_specificity) weight as if they were within [`:is()`](https://developer.mozilla.org/en-US/docs/Web/CSS/:is).

**Note**: *Child rule* does not mean *child element selector*. A child rule can target parent element or child elements depending on use of the `&` nesting selector.

If not used in nested style rule, the `&` nesting selector represents the [scoping root](https://developer.mozilla.org/en-US/docs/Web/CSS/:scope).

## Footnote

[""& nesting selector - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/Nesting_selector) Retrieved February 9, 2024."
*CSS `&` nesting selector* syntax,"**Syntax**

```
parentRule {
  /* parent rule style properties */
  & childRule {
    /* child rule style properties */
  }
}
```

With the `&` nesting selector added with no whitespace, the elements matched by the parent rule will be styled when hovered.

```
.parent-rule {
  /* parent rule properties */
  &:hover {
    /* child rule properties */
  }
}

/* the browser parses the above nested rules as shown below */
.parent-rule {
  /* parent rule properties */
}

.parent-rule:hover {
  /* child rule properties */
}
```

The `&` nesting selector can also be appended to reverse the context of the rules.

```
.card {
  /* .card styles */
  .featured & {
    /* .featured .card styles */
  }
}

/* the browser parses above nested rules as */

.card {
  /* .card styles */
}

.featured .card {
  /* .featured .card styles */
}
```

The `&` nesting selector can be placed multiple times:

```
.card {
  /* .card styles */
  .featured & & & {
    /* .featured .card .card .card styles */
  }
}

/* the browser parses above nested rules as */

.card {
  /* .card styles */
}

.featured .card .card .card {
  /* .featured .card .card .card styles */
}
```

## Footnote

[""& nesting selector - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/Nesting_selector) Retrieved February 12, 2024."
What is a *CSS type selector*?,"The *CSS type selector* matches elements by node name. In other words, it selects all elements of the given type within a document.

```
/* All <a> elements. */
a {
  color: red;
}
```

Type selectors can be namespaced when using [`@namespace`](https://developer.mozilla.org/en-US/docs/Web/CSS/@namespace). This is useful when dealing with documents containing multiple namespaces such as HTML with inline SVG or MathML, or XML that mixes multiple vocabularies.

* `ns|h1` - matches `<h1>` elements in namespace `ns`
* `*|h1` - matches all `<h1>` elements
* `|h1` - matches all `<h1>` elements without any declared namespace

**Syntax**

```
element { style properties }
```

Examples

```
span {
  background-color: skyblue;
}
```

## Footnote

[""Type selectors - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors) Retrieved February 12, 2024."
What are *universal selectors*?,"The *CSS universal selector* (`*`) matches elements of any type.

```
/* Selects all elements */
* {
  color: green;
}
```

The universal selector is a special type selector and can therefore be namespaced when using [@namespace](https://developer.mozilla.org/en-US/docs/Web/CSS/@namespace). This is useful when dealing with documents containing multiple namespaces such as HTML with inline SVG or MathML, or XML that mixes multiple vocabularies.

* `ns|*` - matches all elements in namespace `ns`
* `*|*` - matches all elements
* `|*` - matches all elements without any declared namespace

**Syntax**

```
* { style properties }
```

The asterisk is optional with simple selectors. For instance, `*.warning` and `.warning` are equivalent.

Examples:

```
* [lang^=""en""] {
  color: green;
}

*.warning {
  color: red;
}

*#maincontent {
  border: 1px solid blue;
}

.floating {
  float: left;
}

/* automatically clear the next sibling after a floating element */
.floating + * {
  clear: left;
}
```

## Footnote

[""Universal selectors - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/Universal_selectors) Retrieved February 12, 2024."

Question,Answer
combinators,combinators
*CSS Child combinator* (`>`),"The *child combinator* (`>`) is placed between two CSS selectors. It matches only those elements matched by the second selector that are the direct children of elements matched by the first.

```
/* List items that are children of the ""my-things"" list */
ul.my-things > li {
  margin: 2em;
}
```

Elements matched by the second selector must be the immediate children of the elements matched by the first selector. This is stricter than the [*descendant combinator*](https://developer.mozilla.org/en-US/docs/Web/CSS/Descendant_combinator), which matches all elements matched by the second selector for which there exists an ancestor element matched by the first selector, regardless of the number of ""hops"" up the DOM.

**Syntax**

```
/* The white space around the > combinator is optional but recommended. */
selector1 > selector2 { /* style properties */ }
```

Examples:

```
span {
  background-color: aqua;
}

div > span {
  background-color: yellow;
}
```

## Footnote

[""Child combinator - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/Child_combinator) Retrieved February 13, 2024."
"*CSS Descendant combinator* (`"" ""`)","The *descendant combinator* — typically represented by a single space (`"" ""`) character — combines two selectors such that elements matched by the second selector are selected if they have an ancestor (parent, parent's parent, parent's parent's parent, etc.) element matching the first selector. Selectors that utilize a descendant combinator are called descendant selectors.

```
/* List items that are descendants of the ""my-things"" list */
ul.my-things li {
  margin: 2em;
}
```

The descendant combinator is technically one or more CSS white space characters — the space character and/or one of four control characters: carriage return, form feed, new line, and tab characters — between two selectors in the absence of another combinator. Additionally, the white space characters of which the combinator is comprised may contain any number of CSS comments.

**Syntax**

```
selector1 selector2 {
  /* property declarations */
}
```

Examples:

```
li {
  list-style-type: disc;
}

li li {
  list-style-type: circle;
}
```

## Footnote

[""Descendant combinator - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/Descendant_combinator) Retrieved February 13, 2024."
*CSS Namespace separator* (`|`),"The *namespace separator* (`|`) separates the selector from the namespace, identifying the namespace, or lack thereof, for a type selector.

```
/* Links in the namespace named myNameSpace */
myNameSpace|a {
  font-weight: bold;
}
/* paragraphs in any namespace (including no namespace) */
*|p {
  color: darkblue;
}
/* heading level 2 not in a namespace */
|h2 {
  margin-bottom: 0;
}
```

[Type selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors) and the [universal selector](https://developer.mozilla.org/en-US/docs/Web/CSS/Universal_selectors) allow an optional namespace component. When a namespace has been previously declared via `@namespace`, these selectors can be namespaced by prepending the selector with the name of the namespace separated by the namespace separator (`|`). This is useful when dealing with documents containing multiple namespaces such as HTML with inline SVG or MathML, or XML that mixes multiple vocabularies.

* `ns|h1` - matches `<h1>` elements in namespace `ns`
* `*|h1` - matches all `<h1>` elements
* `|h1` - matches all `<h1>` elements outside of any declared or implied namespace

**Syntax**

```
namespace|element { style properties }
```

## Footnote

[""Namespace separator - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/Namespace_separator) Retrieved February 13, 2024."
Explain `HTML` or `SVG` element default namespaces,"By default, all elements in an `HTML` or `SVG` element have a namespace as the http://www.w3.org/1999/xhtml and http://www.w3.org/2000/svg namespace are implied. The `document.createElementNS` method, with an empty string for the namespace parameter, can be used to create elements with no namespace.

Example:

**HTML**

```
<p>This paragraph <a href=""#"">has a link</a>.</p>

<svg width=""400"" viewBox=""0 0 400 20"">
  <a href=""#"">
    <text x=""0"" y=""15"">Link created in SVG</text>
  </a>
</svg>
```

**CSS**

The CSS declares two namespaces, then assigns styles to links globally (`a`), to links in no namespace (`|a`), to links in any namespace or no namespace (`*|a`), and then to two different named namespaces (`svgNamespace|a` and `htmlNameSpace|a`).

```
@namespace svgNamespace url(""http://www.w3.org/2000/svg"");
@namespace htmlNameSpace url(""http://www.w3.org/1999/xhtml"");
/* All `<a>`s in the default namespace, in this case, all `<a>`s */
a {
  font-size: 1.4rem;
}
/* no namespace */
|a {
  text-decoration: wavy overline lime;
  font-weight: bold;
}
/* all namespaces (including no namespace) */
*|a {
  color: red;
  fill: red;
  font-style: italic;
}
/* only the svgNamespace namespace, which is <svg> content */
svgNamespace|a {
  color: green;
  fill: green;
}
/* The htmlNameSpace namespace, which is the HTML document */
htmlNameSpace|a {
  text-decoration-line: line-through;
}
```

## Footnote

[ ""Named namespaces""](https://developer.mozilla.org/en-US/docs/Web/CSS/Namespace_separator#named_namespace_example) Retrieved February 13, 2024."
How do you create *default namespace* elements and how do you target them?,"No namespaces are explicitly declared in the HTML or within the SVG.

**HTML**

```
<p><a href=""#"">A link</a> in the implied HTML namespace.</p>

<svg width=""400"" viewBox=""0 0 400 20"">
  <a href=""#"">
    <text x=""0"" y=""15"">Link created in SVG namespace</text>
  </a>
</svg>
```

**JavaScript**
With JavaScript, with `document.createElementNS`, we create an anchor link without a namespace, then append the link.

```
// create 'no namespace' anchor
const a = document.createElementNS("""", ""a"");
a.href = ""#"";
a.appendChild(document.createTextNode(""Link created without a namespace""));
document.body.appendChild(a);
```

**CSS**
We declare a namespace with `@namespace`. By omitting the name for the namespace, the `@namespace` declaration creates a default namespace.

```
/* By omitting a name, this sets SVG as the default namespace */
@namespace url(""http://www.w3.org/2000/svg"");

/* `<a>` in the default (set to SVG) namespace */
a {
  font-size: 1.4rem;
}

/* `<svg>` and `<p>` in the default (set to SVG) namespace */
svg,
p {
  border: 5px solid gold;
}

/* links outside of any namespace */
|a {
  text-decoration: wavy underline purple;
  font-weight: bold;
}

/* links with any namespace or no namespace */
*|a {
  font-style: italic;
  color: magenta;
  fill: magenta;
}
```

The selector with no namespace separator, the `a`, matched only the SVG `<a>` elements, as SVG was set as the default namespace.

The selector with no namespace, the `|a`, matched the JavaScript defined and appended `<a>`, as that node is the only node that doesn't have a default namespace.

## Footnote

[""Default namespace and no namespace"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/Namespace_separator#default_namespace_and_no_namespace) Retrieved February 13, 2024."
*CSS Next-sibling combinator* (`+`),"The next-sibling combinator (`+`) separates two selectors and matches the second element only if it immediately follows the first element, and both are children of the same parent element.

```
/* Paragraphs that come immediately after any image */
img + p {
  font-weight: bold;
}
```

**Syntax**

```
/* The white space around the + combinator is optional but recommended. */
former_element + target_element { style properties }
```

Examples:

```
/* Targets the second li element of a list */
li:first-of-type + li {
  color: red;
}
```

## Footnote

[""Next-sibling combinator - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/Next-sibling_combinator) Retrieved February 14, 2024."
"*CSS Selector list* (`,`)","The *CSS selector list* (`,`) selects all the matching nodes. A selector list is a comma-separated list of selectors.

When multiple selectors share the same declarations, they can be grouped together into a comma-separated list. Selector lists can also be passed as parameters to some functional CSS pseudo-classes. White space may appear before and/or after the comma.

The following three declarations are equivalent:

```
span {
  border: red 2px solid;
}
div {
  border: red 2px solid;
}

span,
div {
  border: red 2px solid;
}

:is(span, div) {
  border: red 2px solid;
}
```

## Footnote

[""Selector list - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/Selector_list) Retrieved February 14, 2024."
What is the problem with invalid *selector lists*?,"An invalid selector represents, and therefore matches, nothing. When a selector list contains an invalid selector, the entire style block is ignored, except for the [`:is()`](https://developer.mozilla.org/en-US/docs/Web/CSS/:is) and [`:where()`](https://developer.mozilla.org/en-US/docs/Web/CSS/:where) pseudo-classes that accept [forgiving selector lists](https://developer.mozilla.org/en-US/docs/Web/CSS/Selector_list#forgiving_selector_list).

A single unsupported selector in the selector list invalidates the entire rule.

Consider the following two CSS rule sets:

```
h1 {
  font-family: sans-serif;
}
h2:invalid-pseudo {
  font-family: sans-serif;
}
h3 {
  font-family: sans-serif;
}
```

and

```
h1,
h2:invalid-pseudo,
h3 {
  font-family: sans-serif;
}
```

They are not equivalent. In the first rule set, styles will be applied on the `h1` and `h3` elements, but the `h2:invalid-pseudo` rule will not be parsed. In the second rule set, because one selector in the list is invalid, the entire rule will not be parsed. Because of this, no style will be applied to the `h1` and `h3` elements as when any selector in a list of selectors in invalid, the entire style block will be ignored.

## Footnote

[""Valid and invalid selector lists"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/Selector_list#valid_and_invalid_selector_lists) Retrieved February 14, 2024."
What is a *forgiving selector list*?,"A way to remedy the [invalid selector list](https://developer.mozilla.org/en-US/docs/Web/CSS/Selector_list#invalid_selector_list) problem is to use the [`:is()`](https://developer.mozilla.org/en-US/docs/Web/CSS/:is) or the [`:where()`](https://developer.mozilla.org/en-US/docs/Web/CSS/:where) pseudo-class, which accept a forgiving selector list. Each selector in a forgiving selector list is parsed individually. So any invalid selectors in the list are ignored and the valid ones are used.

The following two CSS rule sets are equivalent:

```
h1 {
  font-family: sans-serif;
}
h2:maybe-unsupported {
  font-family: sans-serif;
}
h3 {
  font-family: sans-serif;
}
```

and 

```
:is(h1, h2:maybe-unsupported, h3) {
  font-family: sans-serif;
}
```

The difference between the two is that the specificity of `:is()` is its most specific argument, whereas the `:where()` selector and the forgiving selector list parameter do not add any specificity weight.

## Footnote

[""Forgiving selector list"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/Selector_list#forgiving_selector_list) Retrieved February 14, 2024."
*Subsequent-sibling combinator*  (`~`),"The *subsequent-sibling combinator* (`~`, a tilde) separates two selectors and **matches all instances of the second element** that follow the first element (not necessarily immediately) and share the same parent element.

In the following example, the subsequent-sibling combinator (`~`) helps to select and style paragraphs that are both siblings of an image and appear after any image.

```
img ~ p {
  color: red;
}
```

**Syntax**

```
/* The white space around the ~ combinator is optional but recommended. */
former_element ~ target_element { style properties }
```

## Footnote

[""Subsequent-sibling combinator - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/Subsequent-sibling_combinator) Retrieved February 14, 2024."

Question,Answer
pseudo-class,pseudo-class
What is a *CSS pseudo-class*?,"A CSS ***pseudo-class*** is a keyword added to a selector that specifies a special state of the selected element(s). For example, the pseudo-class `:hover` can be used to select a button when a user's pointer hovers over the button and this selected button can then be styled.

```
/* Any button over which the user's pointer is hovering */
button:hover {
  color: blue;
}
```

A pseudo-class consists of a colon (`:`) followed by the pseudo-class name (e.g., `:hover`). A functional pseudo-class also contains a pair of parentheses to define the arguments (e.g., `:dir()`). The element that a pseudo-class is attached to is defined as an anchor element (e.g., button in case `button:hover)`.

Pseudo-classes let you apply a style to an element not only in relation to the content of the document tree, but also in relation to external factors like the history of the navigator (`:visited`, for example), the status of its content (like `:checked` on certain form elements), or the position of the mouse (like `:hover`, which lets you know if the mouse is over an element or not).

**Syntax**

```
selector:pseudo-class {
  property: value;
}
```

## Footnote

[""Pseudo-classes - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes) Retrieved February 15, 2024."
Type of *pseudo-classes*?,"* **Element display state pseudo-classes** - These pseudo-classes enable the selection of elements based on their display states.
* **Input pseudo-classes** - These pseudo-classes relate to form elements, and enable selecting elements based on HTML attributes and the state that the field is in before and after interaction.
* **Linguistic pseudo-classes** - These pseudo-classes reflect the document language and enable the selection of elements based on language or script direction.
* **Location pseudo-classes** - These pseudo-classes relate to links, and to targeted elements within the current document.
* **Resource state pseudo-classes** - These pseudo-classes apply to media that is capable of being in a state where it would be described as playing, such as a video.
* **Time-dimensional pseudo-classes** - These pseudo-classes apply when viewing something which has timing, such as a WebVTT caption track.
* **Tree-structural pseudo-classes** - These pseudo-classes relate to the location of an element within the document tree.

## Footnote

[""Pseudo-classes - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes) Retrieved February 15, 2024."
*element display state pseudo-classes*,"These pseudo-classes enable the selection of elements based on their display states.

* [**`:fullscreen`**](https://developer.mozilla.org/en-US/docs/Web/CSS/:fullscreen) - Matches an element that is currently in fullscreen mode.
* [**`:modal`**](https://developer.mozilla.org/en-US/docs/Web/CSS/:modal) - Matches an element that is in a state in which it excludes all interaction with elements outside it until the interaction has been dismissed.
* [**`:picture-in-picture`**](https://developer.mozilla.org/en-US/docs/Web/CSS/:picture-in-picture) - Matches an element that is currently in picture-in-picture mode.

**Note**: `:fullscreen` and `:picture-in-picture` are not widely supported by majors browser. Check their availability before using them.

## Footnote

[""Pseudo-classes - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes) Retrieved February 15, 2024."
*Input pseudo-classes*,"These pseudo-classes relate to form elements, and enable selecting elements based on HTML attributes and the state that the field is in before and after interaction.

* [`:autofill`](https://developer.mozilla.org/en-US/docs/Web/CSS/:autofill) - Matches when an `<input>` has been autofilled by the browser.
* [`:enabled`](https://developer.mozilla.org/en-US/docs/Web/CSS/:enabled) - Represents a user interface element that is in an enabled state.
* [`:disabled`](https://developer.mozilla.org/en-US/docs/Web/CSS/:disabled) - Represents a user interface element that is in a disabled state.
* [`:read-only`](https://developer.mozilla.org/en-US/docs/Web/CSS/:read-only) - Represents any element that cannot be changed by the user.
* [`:read-write`](https://developer.mozilla.org/en-US/docs/Web/CSS/:read-write) - Represents any element that is user-editable.
* [`:placeholder-shown`](https://developer.mozilla.org/en-US/docs/Web/CSS/:placeholder-shown) - Matches an input element that is displaying placeholder text. For example, it will match the placeholder attribute in the `<input>` and `<textarea>` elements.
* [`:default`](https://developer.mozilla.org/en-US/docs/Web/CSS/:default) - Matches one or more UI elements that are the default among a set of elements.
* [`:checked`](https://developer.mozilla.org/en-US/docs/Web/CSS/:checked) - Matches when elements such as checkboxes and radio buttons are toggled on.
* [`:indeterminate`](https://developer.mozilla.org/en-US/docs/Web/CSS/:indeterminate) - Matches UI elements when they are in an indeterminate state.
* [`:blank`](https://developer.mozilla.org/en-US/docs/Web/CSS/:blank) - Matches a user-input element which is empty, containing an empty string or other null input.
* [`:valid`](https://developer.mozilla.org/en-US/docs/Web/CSS/:valid) - Matches an element with valid contents. For example, an input element with the type 'email' that contains a validly formed email address or an empty value if the control is not required.
* [`:invalid`](https://developer.mozilla.org/en-US/docs/Web/CSS/:invalid) - Matches an element with invalid contents. For example, an input element with `type 'email'` with a name entered.
* [`:in-range`](https://developer.mozilla.org/en-US/docs/Web/CSS/:in-range) - Applies to elements with range limitations. For example, a slider control when the selected value is in the allowed range.
* [`:out-of-range`](https://developer.mozilla.org/en-US/docs/Web/CSS/:out-of-range) - Applies to elements with range limitations. For example, a slider control when the selected value is outside the allowed range.
* [`:required`](https://developer.mozilla.org/en-US/docs/Web/CSS/:required) - Matches when a form element is required.
* [`:optional`](https://developer.mozilla.org/en-US/docs/Web/CSS/:optional) - Matches when a form element is optional.
* [`:user-valid`](https://developer.mozilla.org/en-US/docs/Web/CSS/:user-valid) - Represents an element with correct input, but only when the user has interacted with it.
* [`:user-invalid`](https://developer.mozilla.org/en-US/docs/Web/CSS/:user-invalid) - Represents an element with incorrect input, but only when the user has interacted with it.

## Footnote

[""Input pseudo-classes"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes#input_pseudo-classes) Retrieved February 26, 2024."
*Linguistic pseudo-classes*,"These pseudo-classes reflect the document language and enable the selection of elements based on language or script direction.

* [`:dir()`](https://developer.mozilla.org/en-US/docs/Web/CSS/:dir) - The directionality pseudo-class selects an element based on its directionality as determined by the document language.
* [`:lang()`](https://developer.mozilla.org/en-US/docs/Web/CSS/:lang) - Select an element based on its content language.

## Footnote

[""Linguistic pseudo-classes"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes#linguistic_pseudo-classes) Retrieved February 26, 2024."
*Location pseudo-classes*,"These pseudo-classes relate to links, and to targeted elements within the current document.

* [`:any-link`](https://developer.mozilla.org/en-US/docs/Web/CSS/:any-link) - Matches an element if the element would match either `:link` or `:visited`.
* [`:link`](https://developer.mozilla.org/en-US/docs/Web/CSS/:link) - Matches links that have not yet been visited.
* [`:visited`](https://developer.mozilla.org/en-US/docs/Web/CSS/:visited) - Matches links that have been visited.
* [`:local-link`](https://developer.mozilla.org/en-US/docs/Web/CSS/:local-link) - Matches links whose absolute URL is the same as the target URL. For example, anchor links to the same page.
* [`:target`](https://developer.mozilla.org/en-US/docs/Web/CSS/:target) - Matches the element which is the target of the document URL.
* [`:target-within`](https://developer.mozilla.org/en-US/docs/Web/CSS/:target-within) - Matches elements which are the target of the document URL, but also elements which have a descendant which is the target of the document URL.
* [`:scope`](https://developer.mozilla.org/en-US/docs/Web/CSS/:scope) - Represents elements that are a reference point for selectors to match against.

## Footnote

[""Location pseudo-classes"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes#location_pseudo-classes) Retrieved February 26, 2024."
*Resource state pseudo-classes*,"These pseudo-classes apply to media that is capable of being in a state where it would be described as playing, such as a video.

[`:playing`](https://developer.mozilla.org/en-US/docs/Web/CSS/:playing) - Represents a media element that is capable of playing when that element is playing.

[`:paused`](https://developer.mozilla.org/en-US/docs/Web/CSS/:paused) - Represents a media element that is capable of playing when that element is paused.

## Footnote

[""Resource state pseudo-classes"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes#resource_state_pseudo-classes) Retrieved February 26, 2024."
Time-dimensional pseudo-classes,"These pseudo-classes apply when viewing something which has timing, such as a WebVTT caption track.

* [`:current`](https://developer.mozilla.org/en-US/docs/Web/CSS/:current) - Represents the element or ancestor of the element that is being displayed.
* [`:past`](https://developer.mozilla.org/en-US/docs/Web/CSS/:past) - Represents an element that occurs entirely before the `:current` element.
* [`:future`](https://developer.mozilla.org/en-US/docs/Web/CSS/:future) - Represents an element that occurs entirely after the `:current` element.

## Footnote

[""Time-dimensional pseudo-classes"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes#time-dimensional_pseudo-classes) Retrieved February 27, 2024."
User action pseudo-classes,"These pseudo-classes require some interaction by the user in order for them to apply, such as holding a mouse pointer over an element.

* [`:hover`](https://developer.mozilla.org/en-US/docs/Web/CSS/:hover) - Matches when a user designates an item with a pointing device, such as holding the mouse pointer over the item.
* [`:active`](https://developer.mozilla.org/en-US/docs/Web/CSS/:active) - Matches when an item is being activated by the user. For example, when the item is clicked on.
* [`:focus`](https://developer.mozilla.org/en-US/docs/Web/CSS/:focus) - Matches when an element has focus.
* [`:focus-visible`](https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible) - Matches when an element has focus and the user agent identifies that the element should be visibly focused.
* [`:focus-within`](https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-within) - Matches an element to which `:focus` applies, plus any element that has a descendant to which `:focus` applies.

## Footnote

[""User action pseudo-classes"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes#user_action_pseudo-classes) Retrieved February 27, 2024."
Functional pseudo-classes,"These pseudo-classes accept a [selector list](https://developer.mozilla.org/en-US/docs/Web/CSS/Selector_list#selector_list) or [forgiving selector list](https://developer.mozilla.org/en-US/docs/Web/CSS/Selector_list#forgiving_selector_list) as a parameter.

* [`:is()`](https://developer.mozilla.org/en-US/docs/Web/CSS/:is) - The matches-any pseudo-class matches any element that matches any of the selectors in the list provided. The list is forgiving.
* [`:not()`](https://developer.mozilla.org/en-US/docs/Web/CSS/:not) - The negation, or matches-none, pseudo-class represents any element that is not represented by its argument.
* [`:where()`](https://developer.mozilla.org/en-US/docs/Web/CSS/:where) - The specificity-adjustment pseudo-class matches any element that matches any of the selectors in the list provided without adding any specificity weight. The list is forgiving.
* [`:has()`](https://developer.mozilla.org/en-US/docs/Web/CSS/:has) - The relational pseudo-class represents an element if any of the relative selectors match when anchored against the attached element.

## Footnote

[""Functional pseudo-classes"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes#functional_pseudo-classes) Retrieved February 28, 2024."
`:is()` functional pseudo-class,"The `:is()` CSS pseudo-class function takes a selector list as its argument, and selects any element that can be selected by one of the selectors in that list. This is useful for writing large selectors in a more compact form.

It accepts a [forgiving selector list](https://drafts.csswg.org/selectors-4/#typedef-forgiving-selector-list)

**Note**: Originally named `:matches()` (and `:any()`), this selector was renamed to `:is()` in [CSSWG issue #3258](https://github.com/w3c/csswg-drafts/issues/3258).

**Syntax**

```
:is(<forgiving-selector-list>) {
  /* ... */
}
```

Examples: 

```
ol {
  list-style-type: upper-alpha;
  color: darkblue;
}

/* stylelint-disable-next-line selector-pseudo-class-no-unknown */
:is(ol, ul, menu:unsupported) :is(ol, ul) {
  color: green;
}

:is(ol, ul) :is(ol, ul) ol {
  list-style-type: lower-greek;
  color: chocolate;
}
```

## Footnote

["":is() - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/:is) Retrieved February 28, 2024."
Does `:is()` support pseudo-elements?,"The `:is()` pseudo-class does not match pseudo-elements. So rather than this:

```
some-element:is(::before, ::after) {
  display: block;
}
```

or this:

```
:is(some-element::before, some-element::after) {
  display: block;
}
```

instead do:

```
some-element::before,
some-element::after {
  display: block;
}
```

## Footnote

["":is() does not select pseudo-elements"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/:is#is_does_not_select_pseudo-elements) Retrieved February 28, 2024."
How can you use `:is()` to simplify selectors?,"The `:is()` pseudo-class can greatly simplify your CSS selectors. For example, take the following CSS:

```
/* 3-deep (or more) unordered lists use a square */
ol ol ul,
ol ul ul,
ol menu ul,
ol dir ul,
ol ol menu,
ol ul menu,
ol menu menu,
ol dir menu,
ol ol dir,
ol ul dir,
ol menu dir,
ol dir dir,
ul ol ul,
ul ul ul,
ul menu ul,
ul dir ul,
ul ol menu,
ul ul menu,
ul menu menu,
ul dir menu,
ul ol dir,
ul ul dir,
ul menu dir,
ul dir dir,
menu ol ul,
menu ul ul,
menu menu ul,
menu dir ul,
menu ol menu,
menu ul menu,
menu menu menu,
menu dir menu,
menu ol dir,
menu ul dir,
menu menu dir,
menu dir dir,
dir ol ul,
dir ul ul,
dir menu ul,
dir dir ul,
dir ol menu,
dir ul menu,
dir menu menu,
dir dir menu,
dir ol dir,
dir ul dir,
dir menu dir,
dir dir dir {
  list-style-type: square;
}
```

Can be replaced with:

```
/* 3-deep (or more) unordered lists use a square */
:is(ol, ul, menu, dir) :is(ol, ul, menu, dir) :is(ul, menu, dir) {
  list-style-type: square;
}
```

## Footnote

[""Simplifying section selectors"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/:is#simplifying_section_selectors) Retrieved February 28, 2024."
`:where()` functional pseudo-class,"The` :where()` CSS pseudo-class function takes a selector list as its argument, and selects any element that can be selected by one of the selectors in that list.

The difference between `:where()` and [`:is()`](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity) is that `:where()` always has `0` specificity, whereas `:is()` takes on the specificity of the most specific selector in its arguments.

## Footnote

["":where() - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/:where) Retrieved March 5, 2024."
`:not()` functional pseudo-class,"The `:not()` CSS pseudo-class represents elements that do not match a list of selectors. Since it prevents specific items from being selected, it is known as the negation pseudo-class.

**Syntax**
The `:not()` pseudo-class requires a comma-separated list of one or more selectors as its argument. **The list must not contain another negation selector or a pseudo-element**.

```
:not(<complex-selector-list>) {
  /* ... */
}
```

## Footnote

["":not() - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/:not) Retrieved March 5, 2024."
"`:not()` quirks, tricks, and unexpected results","There are several unusual effects and outcomes when using `:not()` that you should keep in mind when using it:

* Useless selectors can be written using this pseudo-class. For example, `:not(*)` matches any element which is not an element.
* This pseudo-class can increase the specificity of a rule. For example, `#foo:not(#bar)` will match the same element as the simpler `#foo`, but has the higher specificity of two id selectors.
* The specificity of the `:not()` pseudo-class is replaced by the specificity of the most specific selector in its comma-separated argument of selectors; providing the same specificity as if it had been written `:not(:is(argument))`.
* `:not(.foo)` will match anything that isn't `.foo`, including `<html>` and `<body>`. This selector will match everything that is ""not an X"". This may be surprising when used with descendant combinators, since there are multiple paths to select a target element. For instance, body `:not(table) a` will still apply to links inside a `<table>`, since `<tr>`, `<tbody>`, `<th>`, `<td>`, `<caption>`, etc. can all match the `:not(table)` part of the selector.
* You can negate several selectors at the same time. Example: `:not(.foo, .bar)` is equivalent to `:not(.foo):not(.bar)`.
* If any selector passed to the `:not()` pseudo-class is invalid or not supported by the browser, the whole rule will be invalidated. The effective way to overcome this behavior is to use `:is()` pseudo-class, which accepts a forgiving selector list. For example `:not(.foo, :invalid-pseudo-class)` will invalidate a whole rule, but `:not(:is(.foo, :invalid-pseudo-class))` will match any (including `<html>` and `<body>`) element that isn't `.foo`.

## Footnote

["":not() - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/:not) Retrieved March 5, 2024."
`:has()` functional pseudo-class,"The functional `:has()` CSS pseudo-class represents an element if any of the relative selectors that are passed as an argument match at least one element when anchored against this element. This pseudo-class presents a way of selecting a parent element or a previous sibling element with respect to a reference element by taking a relative selector list as an argument.

The `:has()` pseudo-class takes on the specificity of the most specific selector in its arguments the same way as `:is()` and `:not()` do.

**Syntax**

```
:has(<relative-selector-list>) {
  /* ... */
}
```

If the `:has()` pseudo-class itself is not supported in a browser, the entire selector block will fail unless `:has()` is in a forgiving selector list, such as in [`:is()`](https://developer.mozilla.org/en-US/docs/Web/CSS/:is) and [`:where()`](https://developer.mozilla.org/en-US/docs/Web/CSS/:where)).

The `:has()` pseudo-class cannot be nested within another `:has()`. This is because many pseudo-elements exist conditionally based on the styling of their ancestors and allowing these to be queried by `:has()` can introduce cyclic querying.

Pseudo-elements are also not valid selectors within `:has()` and pseudo-elements are not valid anchors for `:has()`.

Example:

```
/* Selects an h1 heading with a
paragraph element that immediately follows
the h1 and applies the style to h1 */
h1:has(+ p) {
  margin-bottom: 0;
}
```

## Footnote

["":has() - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/:has) Retrieved March 7, 2024."
`:only-of-type` pseudo-class,"The `:only-of-type` CSS pseudo-class represents an element that has no siblings of the same type.

**Syntax**

```
:only-of-type {
  /* ... */
}
```

Examples:

```
main :only-of-type {
  color: red;
}
```

## Footnote

["":only-of-type - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/:only-of-type) Retrieved March 7, 2024."
`:local-link` pseudo-class,"The `:local-link` CSS pseudo-class represents a link to the same document. Therefore an element that is the source anchor of a hyperlink whose target's absolute URL matches the element's own document URL.

**Syntax**

```
:local-link {
  /* ... */
}
```

Example: 

```
/* Selects any <a> that links to the current document */
a:local-link {
  color: green;
}
```

## Footnote

["":local-link - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/:local-link) Retrieved March 7, 2024."
`:indeterminate` pseudo-class,"The `:indeterminate` CSS pseudo-class represents any form element whose state is indeterminate, such as checkboxes that have been set to an indeterminate state with JavaScript, radio buttons which are members of a group in which all radio buttons are unchecked, and `<progress>` elements with no value attribute.

**Syntax**

```
:indeterminate
```

Examples: 

```
/* Selects any <input> whose state is indeterminate */
input:indeterminate {
  background: lime;
}
```

Elements targeted by this selector are:

[`<input type=""checkbox"">`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox) elements whose indeterminate property is set to true by JavaScript.
[`<input type=""radio"">`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/radio elements), when all radio buttons with the same name value in the form are unchecked.
[`<progress>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress) elements in an indeterminate state.

## Footnote

["":indeterminate - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/:indeterminate) Retrieved March 8, 2024."
`:scope` pseudo-class,"The `:scope` CSS pseudo-class represents elements that are a reference point, or scope, for selectors to match against.

```
/* Selects a scoped element */
:scope {
  background-color: lime;
}
```

Which element(s) `:scope` matches depends on the context in which it is used:

* When used at the root level of a stylesheet, `:scope` is equivalent to [`:root`](https://developer.mozilla.org/en-US/docs/Web/CSS/:root), which in a regular HTML document matches the `<html>` element.
* When used inside a `@scope` block, `:scope` matches the block's defined scope root. It provides a way to apply styles to the root of the scope from inside the [`@scope`](https://developer.mozilla.org/en-US/docs/Web/CSS/@scope) block itself.
* When used within a DOM API call — such as [`querySelector()`](hthttps://developer.mozilla.org/en-US/docs/Web/API/Element/querySelector), [`querySelectorAll()`](https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelectorAll), [`matches()`](https://developer.mozilla.org/en-US/docs/Web/API/Element/matches), or [`Element.closest()`](https://developer.mozilla.org/en-US/docs/Web/API/Element/closest) — `:scope` matches the element on which the method was called.

**Syntax**

```
:scope {
  /* ... */
}
```

## Footnote

["":scope - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/:scope) Retrieved March 8, 2024."
`:root` pseudo-class,"The `:root` CSS pseudo-class matches the root element of a tree representing the document. In HTML, `:root` represents the `<html>` element and is identical to the selector `html`, except that its specificity is higher.

```
/* Selects the root element of the document:
   <html> in the case of HTML */
:root {
  background: yellow;
}
```

**Syntax**

```
:root {
  /* ... */
}
```

Examples:

Declaring global CSS variables
:root can be useful for declaring global CSS variables:

```
:root {
  --main-color: hotpink;
  --pane-padding: 5px 42px;
}
```

## Footnote

["":root - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/:root) Retrieved March 8, 2024."

Question,Answer
pseudo-element,pseudo-element
What is a pseudo-element?,"A CSS *pseudo-element* is a keyword added to a selector that lets you style a specific part of the selected element(s).

**Syntax**

```
selector::pseudo-element {
  property: value;
}
```

For example, `::first-line` can be used to change the font of the first line of a paragraph.

```
/* The first line of every <p> element. */
p::first-line {
  color: blue;
  text-transform: uppercase;
}
```

Double colons (`::`) are used for pseudo-elements. This distinguishes pseudo-elements from pseudo-classes that use single colon (`:`) in their notation.

**Restrictions**

* You can use only one pseudo-element in a selector. 
* The pseudo-element must appear after all the other components in the complex or compound selector in which it appears. 

For example, you can select a paragraph's first line using `p::first-line` but not the first-line's children or a hovered first line. So both `p::first-line > *` and `p::first-line:hover` are invalid.

While it is not possible to select an element based on its state by using pseudo-elements, a pseudo-element can be used to select and style a part of an element that already has a state applied to it. 

For example, `p:hover::first-line` selects the first line (pseudo-element) of a paragraph when the paragraph itself is being hovered (pseudo-class).

## Footnote

[""Pseudo-elements - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements) Retrieved March 11, 2024."
`::after` pseudo-element,"In CSS, `::after` creates a pseudo-element that is the last child of the selected element. It is often used to add cosmetic [content](https://developer.mozilla.org/en-US/docs/Web/CSS/content) to an element with the content property. It is inline by default.

**Note**: The pseudo-elements generated by `::before` and `::after` are contained by the element's formatting box, and thus don't apply to replaced elements such as `<img>`, or to `<br>` elements.

**Syntax**

```
::after {
  content: /* value */;
  /* properties */
}
```

If the content property is not specified, has an invalid value, or has normal or none as a value, then the `::after` pseudo-element is not rendered. It behaves as if `display: none` is set.

**Accessibility concerns**

Using an `::after` pseudo-element to add content is discouraged, as it is not reliably accessible to screen readers.

Examples: 

```
.exciting-text::after {
  content: "" <- EXCITING!"";
  color: green;
}

.boring-text::after {
  content: "" <- BORING"";
  color: red;
}
```

## Footnote

[""::after - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/::after) Retrieved March 11, 2024."
`::before` pseudo-element,"In CSS, `::before` creates a pseudo-element that is the first child of the selected element. It is often used to add cosmetic [content](https://developer.mozilla.org/en-US/docs/Web/CSS/content) to an element with the content property. It is inline by default.

**Note**: The pseudo-elements generated by `::before` and `::after` are boxes generated as if they were immediate children of the element on which they are applied, or the ""originating element,"" and thus can not apply to replaced elements, such as `<img>`, whose content is outside the scope of the CSS formatting model.

**Syntax**

```
::before {
  content: /* value */;
  /* properties */
}
```

If the content property is not specified, has an invalid value, or has `normal` or `none` as a value, then the `::before` pseudo-element is not rendered. It behaves as if `display: none` is set.

Examples:

```
q::before {
  content: ""«"";
  color: blue;
}

q::after {
  content: ""»"";
  color: red;
}
```

**Accessibility concerns**

Using a `::before` pseudo-element to add content is discouraged, as it is not reliably accessible to screen readers.

## Footnote

[""::before - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/::before) Retrieved March 11, 2024."
`::backdrop` pseudo-element,"The `::backdrop` CSS pseudo-element is a box the size of the [viewport](https://developer.mozilla.org/en-US/docs/Glossary/Viewport), which is rendered immediately beneath any element being presented in the [top layer](https://developer.mozilla.org/en-US/docs/Glossary/Top_layer).

**Syntax**

```
::backdrop {
  /* ... */
}
```

**Description**
Backdrops appear in the following instances:

* Elements which have been placed in fullscreen mode using the [Fullscreen API](https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API) [`Element.requestFullscreen()`](https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullscreen) method.
* [`<dialog>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog) elements that have been shown in the top layer via a [`HTMLDialogElement.showModal()`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/showModal) call.
* [Popover](https://developer.mozilla.org/en-US/docs/Web/API/Popover_API) elements that have been shown in the top layer via a [`HTMLElement.showPopover()`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/showPopover) call.

When multiple elements have been placed into the top layer, each one has its own `::backdrop` pseudo-element.

```
/* Backdrop is only displayed when dialog is opened with dialog.showModal() */
dialog::backdrop {
  background: rgb(255 0 0 / 25%);
}
```

Elements are placed in a last-in/first out (LIFO) stack in the top layer. The `::backdrop` pseudo-element makes it possible to obscure, style, or completely hide everything located below a top layer element.

`::backdrop` neither inherits from nor is inherited by any other elements. No restrictions are made on what properties apply to this pseudo-element.

**Examples:**
Styling the backdrop for fullscreen video
In this example, the backdrop style used when a video is shifted to fullscreen mode is configured to be a grey-blue color rather than the black it defaults to in most browsers.

```
video::backdrop {
  background-color: #448;
}
```

## Footnote

[""::backdrop - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/::backdrop) Retrieved March 11, 2024."
`::file-selector-button` pseudo-element,"The `::file-selector-button` CSS pseudo-element represents the button of an [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input) of [`type=""file""`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file).

**Syntax**

```
selector::file-selector-button
```

Examples:

**HTML**

```
<form>
  <label for=""fileUpload"">Upload file</label>
  <input type=""file"" id=""fileUpload"" />
</form>
```

**CSS**

```
input[type=""file""]::file-selector-button {
  border: 2px solid #6c5ce7;
  padding: 0.2em 0.4em;
  border-radius: 0.2em;
  background-color: #a29bfe;
  transition: 1s;
}

input[type=""file""]::file-selector-button:hover {
  background-color: #81ecec;
  border: 2px solid #00cec9;
}
```

## Footnote

[""::file-selector-button - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/::file-selector-button) Retrieved March 12, 2024."
`::first-letter` pseudo-element,"The `::first-letter` CSS pseudo-element applies styles to the first letter of the first line of a [block container](https://developer.mozilla.org/en-US/docs/Web/CSS/Visual_formatting_model#block_containers), but only when not preceded by other content (such as images or inline tables).

Only a small subset of CSS properties can be used with the `::first-letter` pseudo-element please check this [link](https://developer.mozilla.org/en-US/docs/Web/CSS/::first-letter#allowable_properties) to see the full list.

**Syntax**

```
::first-letter {
  /* ... */
}
```

## Footnote

[""::first-letter - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/::first-letter) Retrieved March 12, 2024."
`::part()` pseudo-element,"The `::part` CSS pseudo-element represents any element within a [shadow tree](https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_shadow_DOM) that has a matching [part](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#part) attribute.

**Syntax**

```
::part(<ident>+) {
  /* ... */
}
```

Example: 

```
custom-element::part(foo) {
  /* Styles to apply to the `foo` part */
}
```

## Footnote

[""::part() - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/::part) Retrieved March 13, 2024."
`::placeholder` pseudo-element,"The `::placeholder` CSS pseudo-element represents the [placeholder text](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#placeholder) in an [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input) or [`<textarea>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea) element.

**Syntax**

```
::placeholder {
  /* ... */
}
```

**Note**: Placeholders are not a replacement for the `<label>` element. Without a label that has been programmatically associated with an input using a combination of the [`for`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label#for) and [`id`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#id) attributes, assistive technology such as screen readers cannot parse [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input) elements.

## Footnote

[""::placeholder - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/::placeholder) Retrieved March 13, 2024."
`::selection` pseudo-element,"The `::selection` CSS pseudo-element applies styles to the part of a document that has been highlighted by the user (such as clicking and dragging the mouse across text).

**Allowable properties**
Only certain CSS properties can be used with `::selection`:

* [`color`](https://developer.mozilla.org/en-US/docs/Web/CSS/color)
* [`background-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-color)
* [`text-decoration`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration) and its associated properties
* [`text-shadow`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow)
* [`-webkit-text-stroke-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-text-stroke-color), [`-webkit-text-fill-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-text-fill-color) and [`-webkit-text-stroke-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-text-stroke-width)

In particular, [`background-image`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-image) is ignored.

**Syntax**

```
::selection {
  /* ... */
}
```

Examples: 

```
/* Make selected text gold on a red background */
::selection {
  color: gold;
  background-color: red;
}

/* Make selected text in a paragraph white on a blue background */
p::selection {
  color: white;
  background-color: blue;
}
```

## Footnote

[""::selection - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/::selection) Retrieved March 13, 2024."

Question,Answer
units,units
What are `em`s?,"In CSS, `1em` means the font size of the current element; its exact value varies depending on the element you’re applying it to.

Values declared using relative units are evaluated by the browser to an absolute value, called the computed value.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
Why can it be confusing working with `em` units?,"One thing to keep in mind when using `em` is that when you set the `font-size` in it, it’s based on the nearest parent element with a declared `fonnt-size`.

```
.parent {  
  font-size: 20px;
}

.child { 
  /* This is based on 20px, so it's 30px */
  font-size: 1.5em;
}
```

But when we size other things in `em`, it’s now based on the newly-adjusted font-size of the current element. For example:

```
.parent {
   font-size: 20px;
}

.child {
   /* This is based on 20px, so it's 30px */
   font-size: 1.5em;
   /* This is based on 1.5em (not 20px), so it's also 30px */
   border: 1em solid black;
}
```

It just can be weird to see two different em values in the same element evaluating to the same end value.

This is in addition to the fact that the cascading effect of ems is sometimes challenging in itself. If you size things inside components in ems and those components can be nested, that can cause cascading of sizes that may be undesirable.

## Footnote

*Source [css-tricks](https://css-tricks.com/building-resizeable-components-relative-css-units/#aa-challenges-with-em)*"
What is the shrinking font problem?,"Shrinking text occurs when you nest lists several levels deep and apply an em-based font size to each level.

For example:

**CSS**

```
body {
  font-size: 16px;
}

ul {
  font-size: .8em;
}
```

**HTML**

```
<ul>
  <li>Top level
    <ul>
      <li>Second level
        <ul>
          <li>Third level
            <ul>
              <li>Fourth level
                <ul>
                  <li>Fifth level li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>
```

Each list has a font size 0.8 times that of its parent. This means the first list has a font size of 12.8 px, but the next one down is 10.24 px (12.8 px × 0.8), and the third level is 8.192 px, and so on. Similarly, if you specified a size larger than 1 em, the text would continually grow instead.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
How can you solve the shrinking font problem?,"Using `rem`s to specify the `font-size` of the nested element with `em`-based font size.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What are Rems?,"`rem` is short for root em. Instead of being relative to the current element, rems are relative to the root element. 

No matter where you apply it in the document, `1.2rem` has the same computed value: 1.2 times the font size of the root element.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
"When should we use `rem`s, `em`s and pixels?","When in doubt, use:

**Rems** - for font sizes and paddings.
**Pixels** - for borders, and
**Ems** - for most other properties.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What is wrong with he `font-size: .626em;` anti-pattern?,"This takes the browser’s default font size, `16px`, and scales it down to `10px`. This practice simplifies the math: If your designer tells you to make the font `14px`, you can easily divide by 10 in your head and type `1.4rem`, all while still using relative units.

But there are two problems:

1.  It forces you to write a lot of duplicate styles. Ten pixels is too small for most text, so you’ll have to override it throughout the page.
2. The second problem is that when you do this, you’re still thinking in pixels. You might type `1.4rem` into your code, but in your mind, you’re still thinking “14 pixels.” On a responsive web, you should get comfortable with “fuzzy” values.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
List all traditional viewport-relative units,"* `vh` - 1% of the viewport height
* `vw` - 1% of the viewport width
* `vi` - 1% of the size of the viewport’s inline axis.
* `vb` - 1% of the size of the viewport’s block axis.
* `vmin` - 1% of the smaller dimension, height or width (IE9 supports vm instead of vmin)
* `vmax` - `% of the larger dimension, height or width (not supported in IE)

The viewport-relative lengths are great for things like making a large hero image fill the screen. Your image can be inside a long container, but setting the image height to `100vh`, makes it exactly the height of the viewport.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
List all the new large/small viewport-relative units,"* `lvh` - 1% of the large viewport height
* `lvw` - 1% of the large viewport width
* `lvi` - 1% of the size of the large viewport’s inline axis.
* `lvb` - 1% of the size of the large viewport’s block axis.
* `svh` - 1% of the small viewport height
* `svw` - 1% of the small viewport width
* `svi` - 1% of the size of the small viewport’s inline axis.
* `svb` - 1% of the size of the small viewport’s block axis.

**Large viewport**: The viewport sized assuming any UA interfaces that are dynamically expanded and retracted to be retracted.

**Small Viewport**: The viewport sized assuming any UA interfaces that are dynamically expanded and retracted to be expanded.

## Footnote

[""The large, small, and dynamic viewport units  |  Blog  |  web.dev"" (web.dev).](https://web.dev/blog/viewport-units) Retrieved October 18, 2024."
Explain dynamic viewport-relative units,"Dynamic viewport-relative units are units that have dynamic consideration of the UA UI:

* When the dynamic toolbars are expanded, the dynamic viewport is equal to the size of the small viewport.
* When the dynamic toolbars are retracted, the dynamic viewport is equal to the size of the large viewport.

Its accompanied units have the `dv` prefix: `dvw`, `dvh`, `dvi`, `dvb`, `dvmin`, and `dvmax`. Their sizes are clamped between their `lv*` and `sv*` counterparts.

* `dvh` - 1% of the dynamic viewport height
* `dvw` - 1% of the dynamic viewport width
* `dvi` - 1% of the size of the dynamic viewport’s inline axis.
* `dvb` - 1% of the size of the dynamic viewport’s block axis.
* `dvmin` - 1% of the smaller dimension, height or width
* `dvmax` - `1% of the larger dimension, height or width

## Footnote

[""The large, small, and dynamic viewport units  |  Blog  |  web.dev"" (web.dev).](https://web.dev/blog/viewport-units) Retrieved October 18, 2024."
How can you make a site's font size responsive to the viewport width?,"One application for viewport-relative units that may not be immediately obvious is font size.

If you applied `font-size: 2vw` to an element. On a desktop monitor at `1200px`, this evaluates to `24px` (2% of 1,200). And, the nice thing is, the element scales smoothly between the all sizes. This means there’re no sudden breakpoint changes; it transitions incrementally as the viewport size changes.

Unfortunately, `24px` is a bit too large on a big screen. And worse, it scales all the way down to `7.5px` on an iPhone 6.

You can use `calc()` to combine `rem` units with `vw` units. Avoiding the need to use media queries to define the base font size.

```
:root {
  font-size: calc(0.5rem + 1vw);
}
```

The `0.5rem` here operates as a sort of minimum font size, and the `1vw` adds a responsive scalar.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What properties allow for unitless values?,"Some properties allow for unitless values (that is, a number with no specified unit).
Properties that support this include:

`line-height,` `z-index`, and `font-weight` (`700` is equivalent to `bold`; `400` is equivalent to `normal`, and so on).

You can also use the unitless value `0` anywhere a length unit (such as `px`, `em`, or `rem`) is required because, in these cases, the unit does not matter, `0px` equals `0%` equals `0em`.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What are unitless values?,"When you use a unitless number, that declared value is inherited, meaning its computed value is recalculated for each inheriting child element. This will almost always be the result you want.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
Why should you use unitless values to define the `line-height` property?,"When you use a unitless number, that declared value is inherited, meaning its computed value is recalculated for each inheriting child element. Using a unitless number lets you set the line height on the body and then forget about it for the rest of the page, unless there are particular places where you want to make an exception.

Therefore always define the default `line-height` unitless

```
:root {
  line-height: 1.2;
}
```

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
How do you define a custom property aka CSS variables?,"To define a custom property, you declare it much like any other CSS property. For example:

```
:root {
  --main-font: Helvetica, Arial, sans-serif;
}
```

The name must begin with two hyphens (`--`) to distinguish it from CSS properties, followed by whatever name you’d like to use. Variables must be declared inside a declaration block.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
How can you use a CSS custom property (CSS variable)?,"A function called `var()` allows the use of variables.

```
:root {
  --main-font: Helvetica, Arial, sans-serif;
  --brand-color: #369;
}

p {
  font-family: var(--main-font);
  color: var(--brand-color, blue);
}
```

**Note**: The `var()` function accepts a second parameter, which specifies a fallback value. If the variable specified in the first parameter is not defined, then the second value is used instead.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What happens if a `var()` function evaluates to an invalid value?,"The property will be set to its initial value.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
How can you change custom properties dynamically?,"You can define the same variable inside multiple selectors, and the variable will have a different value for various parts of the page.

```
:root {
  --main-bg: #fff;
  --main-color: #000;
}

.panel {
  font-size: 1rem;
  padding: 1em;
  border: 1px solid #999;
  border-radius: 0.5em;
  background-color: var(--main-bg);
  color: var(--main-color);
}

.dark {
  --main-bg: #333;
  --main-color: #fff;
}
```

The panel class makes use of the previously defined variables but, there is a second css ruleset with selector `.dark` that overwrites the values of the `:root` selector.

Any element that uses panel and dark classes will have a dark background and white text.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
How can you change custom properties with javascript?,"Assuming you have this custom property:

```
:root {
  --main-bg: #fff;
}
```

You could get the value of ""--main-bg"" with the following JS code:

```
const rootElement = document.documentElement;
const styles = getComputedStyle(rootElement);
const mainColor = styles.getPropertyValue('--main-bg')
```

And you can overwrite the value with the following JS code:

```
var rootElement = document.documentElement;
rootElement.style.setProperty('--main-bg', '#cdf')
```

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"

Question,Answer
values & units,values & units
What is a CSS value type aka CSS data type?,"A value type in CSS is a way to define a collection of allowable values. 

In CSS specifications and on the property pages on MDN you will be able to spot value types as they will be surrounded by angle brackets, such as `<color>` or `<length>`. When you see the value type `<color>` as valid for a particular property, that means you can use any valid color as a value for that property, as listed on the `<color>` reference page.

**Note**: You'll see CSS value types referred to as *data types*. The terms are basically interchangeable — when you see something in CSS referred to as a data type, it is really just a fancy way of saying value type. The term value refers to any particular expression supported by a value type that you choose to use.

## Footnote

[""What is a CSS value?"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units#what_is_a_css_value) Retrieved March 14, 2024."
`<integer>` CSS data type,"The `<integer>` CSS data type is a special type of [`<number>`](https://developer.mozilla.org/en-US/docs/Web/CSS/integer#:~:text=The%20%3Cinteger%3E%20CSS%20data%20type%20is%20a%20special%20type%20of%20%3Cnumber%3E%20that%20represents%20a%20positive%20or%20negative%20whole%20number.) that represents a positive or negative whole number.

**Syntax**

The `<integer>` data type consists of one or several decimal digits, `0` through `9` inclusive, optionally preceded by a single `+` or `-` sign. There is no unit associated with integers.

**Note**: There is no official range of valid `<integer>` values, and the specifications do not specify a range.

Examples:

Valid integers

```
12          Positive integer (without a leading + sign)
+123        Positive integer (with a leading + sign)
-456        Negative integer
0           Zero
+0          Zero, with a leading +
-0          Zero, with a leading -
```

Invalid integers

```
12.0        This is a <number>, not an <integer>, though it represents an integer.
12.         Decimal points are not allowed.
+---12      Only one leading +/- is allowed.
ten         Letters are not allowed.
_5          Special characters are not allowed.
\35         Escaped Unicode characters are not allowed, even if they are an integer (here: 5).
\4E94       Non-arabic numerals are not allowed, even when escaped (here: the Japanese 5, 五).
3e4         Scientific notation is not allowed.
```

## Footnote

[""`<integer>` - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/integer) Retrieved March 14, 2024."
`<number>` CSS data type,"The `<number>` CSS data type represents a number, being either an integer or a number with a fractional component.

**Syntax**

The syntax of `<number>` extends the syntax of [`<integer>`](https://developer.mozilla.org/en-US/docs/Web/CSS/integer). A fractional value is represented by a `.` followed by one or more decimal digits, and may be appended to an integer. There is no unit associated with numbers.

**Interpolation**

When animated, values of the `<number>` CSS data type are interpolated as real, floating-point numbers. The speed of the interpolation is determined by the [easing function](https://developer.mozilla.org/en-US/docs/Web/CSS/easing-function) associated with the animation.

Examples:

Valid numbers

```
12          A raw <integer> is also a <number>.
4.01        Positive fraction
-456.8      Negative fraction
0.0         Zero
+0.0        Zero, with a leading +
-0.0        Zero, with a leading -
.60         Fractional number without a leading zero
10e3        Scientific notation
-3.4e-2     Complicated scientific notation
```

Invalid numbers

```
12.         Decimal points must be followed by at least one digit.
+-12.2      Only one leading +/- is allowed.
12.1.1      Only one decimal point is allowed.
```

## Footnote

[""`<number>` - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/number) Retrieved March 20, 2024."
`<dimension>` CSS data type,"The `<dimension>` CSS data type represents a [`<number>`](https://developer.mozilla.org/en-US/docs/Web/CSS/number) with a unit attached to it, for example `10px`.

CSS uses dimensions to specify distances ([`<length>`](https://developer.mozilla.org/en-US/docs/Web/CSS/length)), durations ([`<time>`](https://developer.mozilla.org/en-US/docs/Web/CSS/time)), frequencies ([`<frequency>`](https://developer.mozilla.org/en-US/docs/Web/CSS/frequency)), resolutions ([`<resolution>`](https://developer.mozilla.org/en-US/docs/Web/CSS/resolution)), and other quantities.

**Syntax**

The syntax of `<dimension>` is a [`<number>`](https://developer.mozilla.org/en-US/docs/Web/CSS/number) immediately followed by a unit which is an identifier. Unit identifiers are case insensitive.

Examples:

Valid dimensions

```
12px      12 pixels
1rem      1 rem
1.2pt     1.2 points
2200ms    2200 milliseconds
5s        5 seconds
200hz     200 Hertz
200Hz     200 Hertz (values are case insensitive)
```

Invalid dimensions

```
12 px       The unit must come immediately after the number.
12""px""      Units are identifiers and therefore unquoted.
3sec        The seconds unit is abbreviated ""s"" not ""sec"".
```

## Footnote

[""`<dimension>` - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/dimension) Retrieved March 20, 2024."
`<percentage>` CSS data type,"The `<percentage>` CSS data type represents a percentage value. It is often used to define a size as relative to an element's parent object. Numerous properties can use percentages, such as `width`, `height`, `margin`, `padding`, and `font-size`.

**Note**: **Only calculated values can be inherited**. Thus, even if a percentage value is used on the parent property, a real value (such as a `width` in `pixels` for a `<length>` value) will be accessible on the inherited property, not the percentage value.

**Syntax**

The `<percentage>` data type consists of a `<number>` followed by the percentage sign `(%).` Optionally, it may be preceded by a single `+` or `-` sign, although negative values are not valid for all properties. As with all CSS dimensions, there is no space between the symbol and the number.

**Interpolation**

When animated, values of the `<percentage>` data type are [interpolated](https://developer.mozilla.org/en-US/docs/Glossary/Interpolation) as real, floating-point numbers. The speed of the interpolation is determined by the [easing function](https://developer.mozilla.org/en-US/docs/Web/CSS/easing-function) associated with the animation.

## Footnote

[""`<percentage>` - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/percentage) Retrieved March 20, 2024."
`<length>` CSS data type,"The `<length>` CSS data type represents a distance value. Lengths can be used in numerous CSS properties, such as `width`, `height`, `margin`, `padding`, `border-width`, `font-size`, and `text-shadow`.

Note: Although `<percentage>` values are usable in some of the same properties that accept `<length>` values, they are not themselves `<length>` values. See [`<length-percentage>`](https://developer.mozilla.org/en-US/docs/Web/CSS/length-percentage).

**Syntax**
The `<length>` data type consists of a `<number>` followed by one of the length units. As with all CSS dimensions, there is no space between the number and the unit literal. Specifying the length unit is optional if the number is `0`.

Note: Some properties allow negative` <length>` values, while others do not.

The `<length>` units can be relative or absolute. Relative lengths represent a measurement in terms of some other distance. Depending on the unit, this distance can be the size of a specific character, the line height, or the size of the viewport. Style sheets that use relative length units can more easily scale from one output environment to another.

## Footnote

[""`<length>` - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/length) Retrieved March 21, 2024."
Absolute `<length>` units,"The following are all absolute length units — they are not relative to anything else, and are generally considered to always be the same size.

* `cm`	- Centimeters	`1cm = 37.8px = 25.2/64in`
* `mm`	- Millimeters	`1mm = 1/10th of 1cm`
* `Q`	- Quarter-millimeters	`1Q = 1/40th of 1cm`
* `in`	- Inches	`1in = 2.54cm = 96px`
* `pc`	- Picas	`1pc = 1/6th of 1in`
* `pt`	- Points	`1pt = 1/72nd of 1in`
* `px`	- Pixels	`1px = 1/96th of 1in`

Most of these units are more useful when used for print, rather than screen output. For example, we don't typically use `cm` (centimeters) on screen. The only value that you will commonly use is `px` (pixels).

## Footnote

[""Lengths"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units#lengths) Retrieved March 21, 2024."
Relative `<length>` units,"Relative length units are relative to something else, perhaps the size of the parent element's font, or the size of the viewport. The benefit of using relative units is that with some careful planning you can make it so the size of text or other elements scales relative to everything else on the page. Some of the most useful units for web development are listed in the table below.

* `em` -	Font size of the parent, in the case of typographical properties like `font-size`, and font size of the element itself, in the case of other properties like `width`.
* `ex` -	x-height of the element's font.
* `ch -`	The advance measure (width) of the glyph `""0""` of the element's font.
* `rem` - Font size of the root element.
* `lh` -	Line height of the element.
* `rlh` -	Line height of the root element. When used on the `font-size` or `line-height` properties of the root element, it refers to the properties' initial value.
* `vw` -	`1% `of the viewport's width.
* `vh` -	`1%` of the viewport's height.
* `vmin` -	`1%` of the viewport's smaller dimension.
* `vmax` -	`1%` of the viewport's larger dimension.
* `vb` -	`1%` of the size of the initial containing block in the direction of the root element's [block axis](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_logical_properties_and_values#block_vs._inline).
* `vi` -	`1%` of the size of the initial containing block in the direction of the root element's [inline axis](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_logical_properties_and_values#block_vs._inline).
* `svw`, `svh` -	`1%` of the [small viewport](https://developer.mozilla.org/en-US/docs/Web/CSS/length#relative_length_units_based_on_viewport)'s width and height, respectively.
* `lvw`, `lvh` -	`1%` of the [large viewport](https://developer.mozilla.org/en-US/docs/Web/CSS/length#relative_length_units_based_on_viewport)'s width and height, respectively.
* `dvw`, `dvh` -	`1%` of the [dynamic viewport](https://developer.mozilla.org/en-US/docs/Web/CSS/length#relative_length_units_based_on_viewport)'s width and height, respectively.

## Footnote

[""Lengths"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units#lengths) Retrieved March 21, 2024."
Explain the four different viewport sizes viewport-percentage length units are based on,"The *viewport-percentage* length units are based on four different viewport sizes: *small*, *large*, *dynamic*, and *default*. 

**Small viewport**
The viewport sized assuming any UA interfaces that are dynamically expanded and retracted to be retracted.

The small viewport size is represented by the `sv` prefix and results in the `sv*` viewport-percentage length units.

**Large viewport**
The viewport sized assuming any UA interfaces that are dynamically expanded and retracted to be expanded.

The large viewport unit is represented by the `lv` prefix and results in the `lv*` viewport-percentage units.

**Dynamic viewport**
The viewport sized taking in cosideration consideration the UA UI:

* When the dynamic toolbars are expanded, the dynamic viewport is equal to the size of the *small viewpor*t.
* When the dynamic toolbars are retracted, the dynamic viewport is equal to the size of the *large viewport*.

The dynamic viewport unit is represented by the `dv` prefix and results in the `dv*` viewport-percentage units. The sizes of the dynamic viewport-percentage units are not stable, even when the viewport itself is unchanged.

Note: using viewport-percentage units based on the dynamic viewport size can cause the content to resize while a user is scrolling a page. This can lead to degradation of the user interface and cause a performance hit.

**Default viewport**
The default viewport size is defined by the browser. The behavior of the resulting viewport-percentage unit could be equivalent to the viewport-percentage unit based on the small viewport size, the large viewport size, an intermediate size between the two, or the dynamic viewport size.

## Footnote

[""Relative length units based on viewport"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/length#relative_length_units_based_on_viewport) Retrieved March 21, 2024.

Also 

[""The large, small, and dynamic viewport units  |  Blog  |  web.dev"" (web.dev).](https://web.dev/blog/viewport-units) Retrieved April 2, 2024."
`vh` viewport-percentage length unit,"Represents a percentage of the `height` of the viewport's initial [containing block](https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block). `1vh` is `1%` of the viewport height. For example, if the viewport height is `300px`, then a value of `70vh` on a property will be `210px`.

For small, large, and dynamic viewport sizes, the respective viewport-percentage units are `svh`, `lvh`, and `dvh`. `vh` represents the viewport-percentage length unit based on the browser default viewport size.

## Footnote

[""vh"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/length#vh) Retrieved March 22, 2024."
`vw` viewport-percentage length unit,"Represents a percentage of the width of the viewport's initial [containing block](https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block). `1vw` is `1%` of the viewport width. For example, if the viewport width is `800px`, then a value of `50vw` on a property will be `400px`.

For small, large, and dynamic viewport sizes, the respective viewport-percentage units are `svw`, `lvw`, and `dvw`. `vw` represents the viewport-percentage length unit based on the browser default viewport size.

## Footnote

[""vw"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/length#vw) Retrieved March 22, 2024."
`vmax` viewport-percentage length unit,"Represents in percentage the largest of `vw` and `vh`.

For small, large, and dynamic viewport sizes, the respective viewport-percentage units are `svmax`, `lvmax`, and `dvmax`. `vmax` represents the viewport-percentage length unit based on the browser default viewport size.

## Footnote

[""vmax"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/length#vmax) Retrieved March 22, 2024."
`vb` viewport-percentage length unit,"Represents percentage of the size of the initial [containing block](https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block), in the direction of the root element's [block axis](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_logical_properties_and_values#block_vs._inline).

For small, large, and dynamic viewport sizes, the respective viewport-percentage units are `svb`, `lvb`, and `dvb`, respectively. `vb` represents the viewport-percentage length unit based on the browser default viewport size.

## Footnote

[""vb"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/length#vb) Retrieved March 22, 2024."
`vi` viewport-percentage length unit,"Represents a percentage of the size of the initial [containing block](https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block), in the direction of the root element's [inline axis](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_logical_properties_and_values#block_vs._inline).

For small, large, and dynamic viewport sizes, the respective viewport-percentage units are `svi`, `lvi`, and `dvi`. `vi` represents the viewport-percentage length unit based on the browser default viewport size.

## Footnote

[""vi"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/length#vi) Retrieved March 22, 2024."
`<percentage>` CSS data type,"The `<percentage>` CSS data type represents a percentage value. It is often used to define a size as relative to an element's parent object. Numerous properties can use percentages, such as `width`, `height`, `margin`, `padding`, and `font-size`.

Note: Only calculated values can be inherited. Thus, even if a percentage value is used on the parent property, a real value (such as a width in pixels for a `<length>` value) will be accessible on the inherited property, not the percentage value.

**Syntax**
The `<percentage>` data type consists of a `<number>` followed by the percentage sign `(%).` Optionally, it may be preceded by a single `+` or `-` sign, although negative values are not valid for all properties. As with all CSS dimensions, there is no space between the symbol and the number.

Examples:

HTML

```
<div style=""background-color:navy;"">
  <div style=""width:50%; margin-left:20%; background-color:chartreuse;"">
    Width: 50%, Left margin: 20%
  </div>
  <div style=""width:30%; margin-left:60%; background-color:pink;"">
    Width: 30%, Left margin: 60%
  </div>
</div>
```

## Footnote

[""`<percentage>` - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/percentage) Retrieved March 25, 2024."
What is the target of `<percentage>` data type?,"A `<percentage>` CSS data type should have a target taken as a reference source. Most answers to this are the **parent block** of the element we assign the percentage. This is correct, but does not entirely cover all the cases. The most correct answer should be the [**containing block**]([""Identifying the containing block"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block) Retrieved March 25, 2024.), meaning the block that contains our element and it doesn't have to be the direct parent.

However, for certain properties, the reference source for the percentage unit is neither the parent nor the containing block, instead, it is itself - self element.

* `width` - containing block's `width`
* `height` - containing block's `height`
* `padding` - containing block's `width`
* `margin` - containing block's `width`
* `top`/`bottom`- containing block's `height`
* `left`/`right` - containing block's `width`
* `transform: translateX()` - self element's `width`
* `transform: translateY()` - self element's `height`
* `background-size` - background positioning area
* `background-position` - background positioning area
* `font-size` - parent's block `font-size`
* `line-height` - self element's `font-size`

**NOTE**: **background positioning area**, Can be interpreted as similar to the containing block, but with an addition of these 3 factors:

* Block with only content (*content-box*)
* Block with content and padding (*padding-box*)
* Block with content, padding and border (*border-box*)

The 3 factors are given by the `background-origin` property. You can read more on [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/background-origin).

## Footnote

[""Understanding CSS Percentage"" (DEV Community).](https://dev.to/khangnd/understanding-css-percentage-44gd) Retrieved March 25, 2024."
`<ratio>` CSS data type,"The `<ratio>` CSS data type, used for describing [aspect ratios](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/aspect-ratio) in [media queries](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_media_queries), denotes the proportion between two unitless values.

**Syntax**
In Media Queries Level 3, the `<ratio>` data type consisted of a strictly positive `<integer>` followed by a forward slash (`'/'`, Unicode `U+002F` SOLIDUS) and a second strictly positive `<integer>`. Spaces before and after the slash are optional. The first number represents the width, while the second represents the height.

In Media Queries Level 4, the `<ratio>` date type is updated to consist of a strictly positive `<number>` followed by a forward slash (`'/'`, Unicode `U+002F` SOLIDUS) and a second strictly positive `<number>`. In addition a single `<number>` as a value is allowable.

**Formal syntax**

```
<ratio> = 
  <number [0,∞]> [ / <number [0,∞]> ]?  
```

Examples:

```
@media screen and (min-aspect-ratio: 16/9) {
  /* … */
}
```

## Footnote

[""`<ratio>` - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/ratio) Retrieved March 25, 2024."
`<length-percentage>` CSS data type,"The `<length-percentage>` CSS data type represents a value that can be either a `<length>` or a `<percentage>`.

Syntax
Refer to the documentation for [`<length>`](https://developer.mozilla.org/en-US/docs/Web/CSS/length) and [`<percentage>`](https://developer.mozilla.org/en-US/docs/Web/CSS/percentage) for details of the individual syntaxes allowed by this type.

Examples:

```
p {
  /* length-percentage examples */
  width: 75%;
  height: 200px;
  margin: 3rem;
  padding: 1%;
  border-radius: 10px 10%;
  font-size: 250%;
  line-height: 1.5em;

  /* length examples */
  text-shadow: 1px 1px 1px red;
  border: 5px solid red;
  letter-spacing: 3px;

  /* percentage example */
  text-size-adjust: 20%;
}
```

## Footnote

[""`<length-percentage>` - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/length-percentage) Retrieved April 2, 2024."
`<color>` CSS data type,"The `<color>` CSS data type represents a color. A `<color>` may also include an [alpha-channel](https://en.wikipedia.org/wiki/Alpha_compositing) transparency value, indicating how the color should [composite](https://www.w3.org/TR/compositing-1/#simplealphacompositing) with its background.

**Note**: Although `<color>` values are precisely defined, their actual appearance may vary (sometimes significantly) from device to device. This is because most devices are not calibrated, and some browsers do not support output devices' color profiles.

**Syntax**

```
/* Named colors */
rebeccapurple
aliceblue

/* RGB Hexadecimal */
#f09
#ff0099

/* RGB (Red, Green, Blue) */
rgb(255 0 153)
rgb(255 0 153 / 80%)

/* HSL (Hue, Saturation, Lightness) */
hsl(150 30% 60%)
hsl(150 30% 60% / 80%)

/* HWB (Hue, Whiteness, Blackness) */
hwb(12 50% 0%)
hwb(194 0% 0% / 0.5)

/* LAB (Lightness, A-axis, B-axis) */
lab(50% 40 59.5)
lab(50% 40 59.5 / 0.5)

/* LCH (Lightness, Chroma, Hue) */
lch(52.2% 72.2 50)
lch(52.2% 72.2 50 / 0.5)

/* Oklab (Lightness, A-axis, B-axis) */
oklab(59% 0.1 0.1)
oklab(59% 0.1 0.1 / 0.5)

/* Oklch (Lightness, Chroma, Hue) */
oklch(60% 0.15 50)
oklch(60% 0.15 50 / 0.5)

/* Relative CSS colors */
/* HSL hue change */
hsl(from red 240deg s l)
/* HWB alpha channel change */
hwb(from green h w b / 0.5)
/* LCH lightness change */
lch(from blue calc(l + 20) c h)

/* light-dark */
light-dark(white, black)
light-dark(rgb(255 255 255), rgb(0 0 0))
```

## Footnote

[""`<color>` - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value) Retrieved April 2, 2024."
How can you specify a `<color>` CSS data type?,"A `<color>` value can be specified using one of the methods listed below:

* By keywords: [`<named-color>`](https://developer.mozilla.org/en-US/docs/Web/CSS/named-color) (such as `blue` or `pink`), [`<system-color>`](https://developer.mozilla.org/en-US/docs/Web/CSS/system-color), and [`currentcolor`](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#currentcolor_keyword).
* By hexadecimal notations: [`<hex-color>`](https://developer.mozilla.org/en-US/docs/Web/CSS/hex-color) (such as `#ff0000`).
* By `<color-function>`, with parameters in a [color space](https://developer.mozilla.org/en-US/docs/Glossary/Color_space) using functional notations:
-. [sRGB](https://en.wikipedia.org/wiki/SRGB) color space: [`hsl()`](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hsl), [`hwb()`](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hwb), [`rgb()`](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/rgb);
-. [CIELAB](https://en.wikipedia.org/wiki/CIELAB_color_space) color space: [`lab()`](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/lab), [`lch()`](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/lch);
-. [Oklab](https://bottosson.github.io/posts/oklab/) color space: [`oklab()`](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/oklab), [`oklch()`](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/oklch);
-. Other color spaces: [`color()`](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color).
* By using [relative color](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_colors/Relative_colors) syntax to output a new color based on an existing color. Any of the above color functions can take an origin color preceded by the from keyword and followed by definitions of the channel values for the new output color.
* By mixing two colors: [`color-mix()`](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color-mix).
* By specifying two colors, the first used for light color-schemes and the second used for dark color-schemes: [`light-dark()`](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/light-dark).

## Footnote

[""`<color>` - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value) Retrieved April 2, 2024."
What does the `currentcolor` keyword represent?,"The `currentcolor` keyword represents the value of an element's [`color`](https://developer.mozilla.org/en-US/docs/Web/CSS/color) property. This lets you use the `color` value on properties that do not receive it by default.

If `currentcolor` is used as the value of the `color` property, it instead takes its value from the inherited value of the `color` property.

## Footnote

[""currentcolor keyword"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#currentcolor_keyword) Retrieved April 2, 2024."
`<angle>` CSS data type,"The `<angle>` CSS data type represents an angle value expressed in *degrees*, *gradians*, *radians*, or *turns*. It is used, for example, in [`<gradient>`](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient)s and in some [`transform`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform) functions.

**Syntax**

The `<angle>` data type consists of a `<number>` followed by one of the units listed below. As with all dimensions, there is no space between the unit literal and the number. The angle unit is optional after the number `0`.

Optionally, it may be preceded by a single `+` or `-` sign. Positive numbers represent clockwise angles, while negative numbers represent counterclockwise angles. For static properties of a given unit, any angle can be represented by various equivalent values. For example, `90deg` equals `-270deg`, and `1turn` equals `4turn`. For dynamic properties, like when applying an animation or transition, the effect will nevertheless be different.

**Units**

* `deg` - Represents an angle in degrees. One full circle is `360deg`. Examples: `0deg`, `90deg`, `14.23deg`.
* `grad` - Represents an angle in gradians. One full circle is `400grad`. Examples: `0grad`, `100grad`, `38.8grad`.
* `rad` - Represents an angle in radians. One full circle is `2π` radians which approximates to `6.2832rad`. `1rad` is `180/π` degrees. Examples: `0rad`, `1.0708rad`, `6.2832rad`.
* `turn` - Represents an angle in a number of turns. One full circle is `1turn`. Examples: `0turn`, `0.25turn`, `1.2turn`.

## Footnote

[""`<angle>` - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/angle) Retrieved April 3, 2024."
`<gradient>` CSS data type,"The `<gradient>` CSS data type is a special type of [`<image>`](https://developer.mozilla.org/en-US/docs/Web/CSS/image) that consists of a progressive transition between two or more colors.

A CSS gradient has [no intrinsic dimensions](https://developer.mozilla.org/en-US/docs/Web/CSS/image#description); i.e., it has no natural or preferred size, nor a preferred ratio. Its concrete size will match the size of the element to which it applies.

**Syntax**

The `<gradient>` data type is defined with one of the function types listed below.

* **Linear gradient** - Linear gradients transition colors progressively along an imaginary line. They are generated with the [`linear-gradient()`](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/linear-gradient) function.
* **Radial gradient** - Radial gradients transition colors progressively from a center point (origin). They are generated with the [`radial-gradient()`](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/radial-gradient) function.
* **Conic gradient** - Conic gradients transition colors progressively around a circle. They are generated with the [`conic-gradient()`](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/conic-gradient) function.
* **Repeating gradient** - Repeating gradients duplicate a gradient as much as necessary to fill a given area. They are generated with the [`repeating-linear-gradient()`](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/repeating-linear-gradient), [`repeating-radial-gradient()`](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/repeating-radial-gradient), and [`repeating-conic-gradient()`](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/repeating-conic-gradient) functions.

## Footnote

[""`<gradient>` - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient) Retrieved April 3, 2024."
`<image>` CSS data type,"The `<image>` CSS data type represents a two-dimensional image.

**Syntax**

The `<image>` data type can be represented with any of the following:

* An image denoted by the [`url()`](https://developer.mozilla.org/en-US/docs/Web/CSS/url) data type
* A [`<gradient>`](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient) data type
* A part of the webpage, defined by the [`element()`](https://developer.mozilla.org/en-US/docs/Web/CSS/element) function
* An image, image fragment or solid patch of color, defined by the [`image()`](https://developer.mozilla.org/en-US/docs/Web/CSS/image/image) function
* A blending of two or more images defined by the [`cross-fade()`](https://developer.mozilla.org/en-US/docs/Web/CSS/cross-fade) function.
* A selection of images chosen based on resolution defined by the [`image-set()`](https://developer.mozilla.org/en-US/docs/Web/CSS/image/image-set) function.

## Footnote

[""`<image>` - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/image) Retrieved April 3, 2024."
What kind of images can CSS handle?,"CSS can handle the following kinds of images:

* Images with *intrinsic dimensions* (a natural size), like a JPEG, PNG, or other [raster format](https://en.wikipedia.org/wiki/Raster_graphics).
* Images with *multiple intrinsic dimensions*, existing in multiple versions inside a single file, like some .ico formats. (In this case, the intrinsic dimensions will be those of the image largest in area and the aspect ratio most similar to the containing box.)
* Images with no intrinsic dimensions but with an *intrinsic aspect ratio* between its width and height, like an SVG or other [vector format](https://en.wikipedia.org/wiki/Vector_graphics).
* Images with *neither intrinsic dimensions, nor an intrinsic aspect ratio*, like a CSS gradient.

## Footnote

[""`<image>` - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/image) Retrieved April 3, 2024."
How does CSS determines an Image's concrete size?,"CSS determines an object's concrete size using (1) its intrinsic dimensions; (2) its specified size, defined by CSS properties like `width`, `height`, or `background-size`; and (3) its default size, determined by the kind of property the image is used with:

* [`background-image`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-image) - The size of the element's background positioning area
* [`list-style-image`](https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-image) - The size of a 1em character
* [`border-image-source`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-source) - The size of the element's border image area
* [`cursor`](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor) - The browser-defined size matching the usual cursor size on the client's system
* [`content`](https://developer.mozilla.org/en-US/docs/Web/CSS/content) for a pseudo-element ([`::after`](https://developer.mozilla.org/en-US/docs/Web/CSS/::after)/[`::before`](https://developer.mozilla.org/en-US/docs/Web/CSS/::before)) - A `300px × 150px` rectangle

The concrete object size is calculated using the following algorithm:

* If the specified size defines both the *width* and the *height*, these values are used as the concrete object size.
* If the specified size defines only the *width* or only the *height*, the missing value is determined using the intrinsic ratio, if there is any, the intrinsic dimensions if the specified value matches, or the default object size for that missing value.
* If the specified size defines *neither the width nor the height*, the concrete object size is calculated so that it matches the intrinsic aspect ratio of the image but without exceeding the default object size in any dimension. If the image has no intrinsic aspect ratio, the intrinsic aspect ratio of the object it applies to is used; if this object has none, the missing width or height are taken from the default object size.

## Footnote

[""`<image>` - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/image) Retrieved April 3, 2024."
`<time>` CSS data type,"The `<time>` CSS data type represents a time value expressed in seconds or milliseconds. It is used in animation, transition, and related properties.

**Syntax**
The `<time>` data type consists of a [`<number>`](https://developer.mozilla.org/en-US/docs/Web/CSS/number) followed by one of the units listed below. Optionally, it may be preceded by a single + or - sign. As with all dimensions, there is no space between the unit literal and the number.

**Note**: Although the number `0` is always the same regardless of unit, the unit may not be omitted. In other words, `0` is invalid and does not represent `0s` or `0ms`.

**Units**

* `s` - Represents a time in seconds. Examples: `0s`, `1.5s`, `-60s`.
* `ms` - Represents a time in milliseconds. Examples: `0ms`, `150.25ms`, `-60000ms`.

**Note**: Conversion between s and ms follows the logical `1s = 1000ms`.

Examples:

**Valid times**

```
12s         Positive integer
-456ms      Negative integer
4.3ms       Non-integer
14mS        The unit is case-insensitive, although capital letters are not recommended.
+0s         Zero with a leading + and a unit
-0ms        Zero with a leading - and a unit
```

**Invalid times**

```
0           Although unitless zero is allowed for <length>s, it's invalid for <time>s.
12.0        This is a <number>, not a <time>, because it's missing a unit.
7 ms        No space is allowed between the number and the unit.
```

## Footnote

[""`<time>` - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/time) Retrieved April 4, 2024."
`<resolution>` CSS data type,"The `<resolution>` CSS data type, used for describing [resolutions](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/resolution) in [media queries](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_media_queries), denotes the pixel density of an output device, i.e., its resolution.

On screens, the units are related to CSS inches, centimeters, or pixels, not physical values.

**Syntax**
The `<resolution>` data type consists of a strictly positive `<number>` followed by one of the units listed below. As with all CSS dimensions, there is no space between the unit literal and the number.

**Units**

* `dpi` - Represents the number of [dots per inch](https://en.wikipedia.org/wiki/Dots_per_inch). Screens typically contains 72 or 96 dots per inch, but the dpi for printed documents is usually much greater. As 1 inch is 2.54 cm, `1dpi ≈ 0.39dpcm`.
* `dpcm` - Represents the number of [dots per centimeter](https://en.wikipedia.org/wiki/Dots_per_inch). As 1 inch is 2.54 cm, `1dpcm ≈ 2.54dpi`.
* `dppx` - Represents the number of dots per [px](https://developer.mozilla.org/en-US/docs/Web/CSS/length#px) unit. Due to the 1:96 fixed ratio of CSS `in` to CSS `px`, `1dppx` is equivalent to `96dpi`, which corresponds to the default resolution of images displayed in CSS as defined by image-resolution.
* `x`- Alias for dppx.

**Note**: Although the number `0` is always the same regardless of unit, the unit may not be omitted. In other words, `0` is invalid and does not represent `0dpi`, `0dpcm`, or `0dppx`.

Examples:

```
@media print and (min-resolution: 300dpi) {
  /* … */
}

@media (resolution: 120dpcm) {
  /* … */
}

@media (min-resolution: 2dppx) {
  /* … */
}

@media (resolution: 1x) {
  /* … */
}
```

**Valid resolutions**

```
96dpi
50.82dpcm
3dppx
```

**Invalid resolutions**

```
72 dpi     Spaces are not allowed between the number and the unit.
ten dpi    The number must use digits only.
0          The unit is required.
```

## Footnote

[""`<resolution>` - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/resolution) Retrieved April 4, 2024."
`<overflow>` CSS data type,"The `<overflow>` [enumerated](https://developer.mozilla.org/en-US/docs/Glossary/Enumerated) value type represents the keyword values for the [`overflow-block`](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-block), [`overflow-inline`](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-inline), [`overflow-x`](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-x), and [`overflow-y`](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-y) longhand properties and the [`overflow`](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow) shorthand property. These properties apply to block containers, flex containers, and grid containers.

**Syntax**

```
<overflow> = visible | hidden | clip | scroll | auto
```

`Values`
The `<overflow>` enumerated value type is specified using one of the values listed below.

* `visible` - Overflow content is not clipped and may be visible outside the element's padding box. The element box is not a [scroll container](https://developer.mozilla.org/en-US/docs/Glossary/Scroll_container). This is the default value for all the properties that have the `<overflow>` enumerated value type.

* `hidden` - Overflow content is clipped at the element's padding box. There are no scroll bars, and the clipped content is not visible (i.e., clipped content is hidden), but the content still exists. User agents do not add scrollbars and also do not allow users to view the content outside the clipped region by actions such as dragging on a touch screen or using the scroll wheel on a mouse. The content can be scrolled programmatically (for example, by setting the value of the [`scrollLeft`](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeft) property or the [`scrollTo()`](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTo) method). The content can also be scrolled via keyboard interaction. The element box on which this value is set is a [scroll container](https://developer.mozilla.org/en-US/docs/Glossary/Scroll_container).

* `clip` - Overflow content is clipped at the element's overflow clip edge that is defined using the [`overflow-clip-margin`](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-clip-margin) property. As a result, content overflows the element's padding box by the `<length>` value of `overflow-clip-margin` or by `0px` if not set. Overflow content outside the clipped region is not visible, user agents do not add a scrollbar, and programmatic scrolling is also not supported. No new [formatting context](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_display/Block_formatting_context) is created.

* `scroll` - Overflow content is clipped at the element's padding box, and overflow content can be scrolled into view using scrollbars. User agents display scrollbars in both horizontal and vertical directions if only one value is set, whether or not any content is overflowing or clipped. The use of this keyword value, therefore, can prevent scrollbars from appearing and disappearing as content changes. Printers may still print overflowing content. The element box on which this value is set is a [scroll container](https://developer.mozilla.org/en-US/docs/Glossary/Scroll_container).

* `auto` - Overflow content is clipped at the element's padding box, and overflow content can be scrolled into view. Unlike `scroll`, user agents display scrollbars only if the content is overflowing and hide scrollbars by default. If content fits inside the element's padding box, it looks the same as with `visible` but still establishes a new formatting context. The element box on which this value is set is a [scroll container](https://developer.mozilla.org/en-US/docs/Glossary/Scroll_container).

## Footnote

[""`<overflow>` - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow_value) Retrieved April 4, 2024."

Question,Answer
Box model,Box model
What is the **Box model**?,"According to [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model). When laying out a document, the browser's rendering engine represents each element as a rectangular box according to the standard CSS basic box model. CSS determines the size, position, and properties (color, background, border size, etc.) of these boxes.

Every box is composed of four parts (or areas), defined by their respective edges: the *content edge, padding edge, border edge,* and *margin edge*.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What is the **Content area**?,"The **content area**, bounded by the content edge, contains the ""real"" content of the element, such as text, an image, or a video player. Its dimensions are the *content width* (or *content-box width*) and the *content height* (or *content-box height*). It often has a background color or background image.

If the [_box-sizing_](https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing) property is set to `content-box` (default) and if the element is a block element, the content area's size can be explicitly defined with the [_width_](https://developer.mozilla.org/en-US/docs/Web/CSS/width), [_min-width_](https://developer.mozilla.org/en-US/docs/Web/CSS/min-width), [_max-width_](https://developer.mozilla.org/en-US/docs/Web/CSS/max-width), [_height_](https://developer.mozilla.org/en-US/docs/Web/CSS/height), [_min-height_](https://developer.mozilla.org/en-US/docs/Web/CSS/min-height), and [_max-height_](https://developer.mozilla.org/en-US/docs/Web/CSS/max-height) properties.

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model#content_area)"
What is the **Padding area**?,"The **padding area**, bounded by the padding edge, extends the content area to include the element's padding. Its dimensions are the *padding-box width* and the *padding-box height*.

The thickness of the padding is determined by the [_padding-top_](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-top), [_padding-right_](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-right), [_padding-bottom_](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-bottom), [_padding-left_](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-left), and shorthand [_padding_](https://developer.mozilla.org/en-US/docs/Web/CSS/padding) properties.

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model#padding_area)"
What is the **Border area**?,"The **border area**, bounded by the border edge, extends the padding area to include the element's borders. Its dimensions are the *border-box width* and the *border-box height*.

The thickness of the borders are determined by the [_border-width_](https://developer.mozilla.org/en-US/docs/Web/CSS/border-width) and shorthand [_border_](https://developer.mozilla.org/en-US/docs/Web/CSS/border) properties. If the [_box-sizing_](https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing) property is set to `border-box`, the border area's size can be explicitly defined with the [_width_](https://developer.mozilla.org/en-US/docs/Web/CSS/width), [_min-width_](https://developer.mozilla.org/en-US/docs/Web/CSS/min-width), [_max-width_](https://developer.mozilla.org/en-US/docs/Web/CSS/max-width), [_height_](https://developer.mozilla.org/en-US/docs/Web/CSS/height), [_min-height_](https://developer.mozilla.org/en-US/docs/Web/CSS/min-height), and [_max-height_](https://developer.mozilla.org/en-US/docs/Web/CSS/max-height) properties. When there is a background ([_background-color_](https://developer.mozilla.org/en-US/docs/Web/CSS/background-color) or [_background-image_](https://developer.mozilla.org/en-US/docs/Web/CSS/background-image)) set on a box, it extends to the outer edge of the border (i.e. extends underneath the border in z-ordering). This default behaviour can be altered with the [_background-clip_](https://developer.mozilla.org/en-US/docs/Web/CSS/background-clip) CSS property.

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model#border_area)"
What is the **Margin area**?,"The **margin area**, bounded by the margin edge, extends the border area to include an empty area used to separate the element from its neighbors. Its dimensions are the *margin-box width* and the *margin-box height*.

The size of the margin area is determined by the [_margin-top_](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-top), [_margin-right_](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-right), [_margin-bottom_](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-bottom), [_margin-left_](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-left), and shorthand [_margin_](https://developer.mozilla.org/en-US/docs/Web/CSS/margin) properties. When [_margin collapsing_](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing) occurs, the margin area is not clearly defined since margins are shared between boxes.

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model#margin_area)"
What does “*box-sizing: content-box;”* do?,"**content-box** gives you the default CSS box-sizing behaviour. If you set an element's `width` to `100px`, then the element's content box will be `100px` wide, and the `width` of any border or `padding` will be added to the final rendered `width`, making the element wider than `100px`.

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing)"
What does “*box-sizing: border-box;”* do?,"**border-box** tells the browser to account for any border and padding in the values you specify for an element's `width` and `height`. If you set an element's width to `100px`, that 100 pixels will include any border or padding you added, and the content box will shrink to absorb that extra width. This typically makes it much easier to size elements. `box-sizing: border-box` is the default styling that browsers use for the `<table>`, `<select>`, and `<button>` elements, and for `<input>` elements whose type is *radio, checkbox, reset, button, submit, color*, or *search*.

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing)"
What is the problem with *magic numbers?*,"For programming in general, magic numbers aren’t desirable. It’s often hard to explain why a magic number works. If you don’t understand where the number comes from, you won’t understand how it will behave under different circumstances.

In other words avoid playing with properties values until the work as you need. Chances are that the values won't be valid if the screen size changes or if the page loads on a device with a different aspect ratio that the one you are working on.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
"What is the problem with the following css ruleset?

```
*,
::before,
::after {
  box-sizing: border-box;
 }
```","If you add third-party components with their own CSS to your page, you may see some broken layouts for those components, especially if their CSS wasn't written with `box-sizing: border-box;`. Correcting this can be problematic.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
How can you apply `box-sizing: border-box` to all your site but mitigate issues with added third party components?,"```
:root {
   box-sizing: border-box;
 }

 *,
 ::before,
 ::after {
   box-sizing: inherit;
 }
```

Box sizing isn’t normally an inherited property, but by using the inherit keyword, you can force it to be. With the version shown here, you can convert a third-party component into a content-box when necessary by targeting its top-level container:

```
 .third-party-component {
   box-sizing: content-box;
 }
```

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
Is it recommended to set the element's height?,"No.

Working with element height is different than working with element width. Typically it’s best to avoid setting explicit heights on elements. Normal document flow is designed to work with a constrained width and an unlimited height. Contents fill the width of the viewport and then line wrap as necessary. Because of this, the height of a container is organically determined by its contents, not by the container itself.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What is the **normal document flow**?,"The **normal document flow** refers to the default layout behaviour of elements on the page. Inline elements flow along with the text of the page, from left to right, line wrapping when they reach the edge of their container. Block-level elements fall on individual lines, with a line break above and below.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What is a **block element**?,"A **Block-level element** occupies the entire horizontal space of its parent element (container), and vertical space equal to the height of its contents, thereby creating a ""block"".

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements)"
What is an **inline element**?,"An **Inline-level element** only occupy the space bounded by the tags defining the element, and vertical space equal to the height of its contents, instead of breaking the flow of the content as block elements do.

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/HTML/Inline_elements)"
What are the differences between **block-level elements** and **inline-level elements**?,"There are a couple of key differences between block-level elements and inline elements:

**Content model**
Generally, block-level elements may contain inline elements and (sometimes) other block-level elements. Inherent in this structural distinction is the idea that block elements create ""larger"" structures than inline elements.

**Default formatting**
By default, block-level elements begin on new lines, but inline elements can start anywhere in a line.

## Footnote

*source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements#block-level_vs._inline)"
Examples of HTML block-level elements (no HTML5 semantic block elements),"* `<h1>-\<h6>` : This element is used for including headings of different sizes ranging from 1 to 6.
* `<div>`: This is a container tag and is used to make separate divisions of content on the web page.
* `<hr>`: This is an empty tag and is used for separating content by horizontal lines.
* `<li>`: This tag is used for including list items of an ordered or unordered list.
* `<ul>`: This tag is used to make an unordered list.
* `<ol>`: This tag is used to make an ordered list.
* `<p>`: This tag is used to include paragraphs of content in the webpage.
* `<table>`: This tag is used for including the tables in the webpage when there is a need for tabular data.

## Footnote

*Source* [*geeksforgeeks*](https://www.geeksforgeeks.org/difference-between-block-elements-and-inline-elements/)"
Examples of HTML5 semantic block level elements,"* `<header>`: This tag is used for including all the main things of the webpage like *navbar*, logos, and heading of the webpage.
* `<nav>`: This tag helps to navigate through different sections by including different blocks of hyperlinks in the webpage.
* `<footer>`: This contains all information about the authorization, contact, and copyright details of the webpage.
* `<main>`: The main content of the webpage resides in this tag.
* `<section>` : This is used separate different sections in the webpage.
* `<article>`: This tag is used to include different independent articles on the webpage.
* `<aside>`: This tag is used to mention details of the main content aside.

## Footnote

*source* [*geeksforgeeks*](https://www.geeksforgeeks.org/difference-between-block-elements-and-inline-elements/)"
Examples of Inline-level elements,"* `<a>`: This tag is used for including hyperlinks in the webpage.
* `<br>`: This tag is used for mentioning line breaks in the webpage where ever needed.
* `<script>` : This tag is used for including external and internal JavaScript codes.
* `<input>`: This tag is used for taking input from the users and is mainly used in forms.
* `<img>`: This tag is used for including different images in the webpage to add beauty to the webpage.
* `<span>`: This is an inline container that takes necessary space only.
* `<b>`: This tag is used in places where bold text is needed.
* `<label>`: The tag in HTML is used to provide a usability improvement for mouse users i.e, if a user clicks on the text within the \< label \> element, it toggles the control.

## Footnote

*source* [*geeksforgeeks*](https://www.geeksforgeeks.org/difference-between-block-elements-and-inline-elements/)"
What is the problem with setting an element's height?,"When you explicitly set an element’s height, you run the risk of its contents overflowing the container. This happens when the content doesn’t fit the specified constraint and renders outside of the parent element.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
How can you control the behaviour of the overflowing content?,"With the *“**overflow**”* property, which supports four values:

* ***visible*** (default value) - All content is visible, even when it overflows the container’s edges.
* ***Hidden*** - Content that overflows the container’s padding edge is clipped and won’t be visible.
* ***clip*** - Content is clipped at the element's overflow clip edge that is defined using the [`overflow-clip-margin`](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-clip-margin) property.  Overflow content outside the clipped region is not visible, user agents do not add a scroll bar, and programmatic scrolling is also not supported. 
* ***Scroll*** - Scrollbars are added to the container so the user can scroll to see the remaining content. On some operating systems, both horizontal and vertical scrollbars are added, even if all the content is visible. In this case, the scrollbars will be disabled (grayed).
* ***Auto*** - Scrollbars are added to the container only if the contents overflow.


**Note**:  Specifying a value other than visible (the default) or clip for overflow creates a new block [formatting context](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_display/Block_formatting_context).

## Footnote

[""overflow - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow) Retrieved November 19, 2024."
Is it possible to control **only** horizontal or vertical overflow behaviour?,"**Yes**, You can control only horizontal overflow using the “*overflow-x”* property, or vertical overflow with *“overflow-y”*. These properties support the same values as the overflow property. **Explicitly setting both x and y to different values, however, tends to have unpredictable results**.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
Can you use percentage-based heights?,"Rarely.

Specifying height using a percentage is problematic. Percentage refers to the size of an element’s containing block; the height of that container, however, is typically determined by the height of its children. This produces a circular definition that the browser can’t resolve, so it’ll ignore the declaration. For percentage-based heights to work, the parent must have an explicitly defined height.

**Tip**: if you need to set a percentage-based height use *viewport-relative vh* units

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
How can you make the columns of a row share the same height in CSS?,"You have 3 options: 

- CSS Table Layout
- Flexbox
- Grid

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
How can you make a **div** as a table?,"With

```
display: table;
```"
How can a **div** behave as a table cell?,"With

```display: table-cell;```

**Note**: the table cell div needs to be within a Div with `display: table;` property"
What are the main differences between a **block element** and a **table-cell** element?,"By default, an element with a `table-cell` `display` value won’t expand to a 100% width like a block element will, so you’ll have to declare the width explicitly. Also, `margin`s can’t be applied to `table-cell` elements."
What does ***min-height*** and ***max-height*** properties do?,"The **min-height** CSS property sets the minimum height of an element. It prevents the used value of the height property from becoming smaller than the value specified for `min-height`.

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/min-height)

The **max-height** CSS property sets the maximum height of an element. It prevents the used value of the height property from becoming larger than the value specified for `max-height`.

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/max-height)"
Why are ***min-height*** and ***max-height*** useful to define a layout?,"Because instead of explicitly defining a height, you can use `min-height` and `max-height` properties to specify a minimum or maximum value, allowing the element to size naturally within those bounds."
Why doesn't **vertical-align** work?,"Developers are often frustrated when they apply `vertical-align: middle` to a block element, expecting it to center the contents of the block. Instead, this declaration is ignored by the browser.

A `vertical-align` declaration only affects ***inline*** and ***table-cell*** elements.

* With **inline elements**, `vertical-align` controls alignment among other elements on the same line. You can use it to control how an inline image aligns with the neighboring text, for example.
* With **table-cell elements**, `vertical-align` controls the alignment of the contents within the cell. If a CSS table layout works for your page, then you can accomplish vertical centering with vertical-align.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
how do you center horizontally an ***inline*** or ***inline-\**** elements (like text or links)?,"You can center inline elements horizontally, within a block-level parent element, with just:

```
.center {
  text-align: center;
 }
```

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/centering-css-complete-guide/)"
How do you center horizontally a **block-level** element?,"You can center a block-level element by giving it `margin-left` and `margin-right` of `auto` (and it has a set `width`, otherwise it would be full width and wouldn’t need centering). That’s often done with shorthand like this:

```
 .center-me {
  margin: 0 auto;
}
```

## Footnote

*Source [css-tricks](https://css-tricks.com/centering-css-complete-guide/)*"
How do you horizontally center multiple **block-level element**?,"If you have two or more block-level elements that need to be centered horizontally in a row, chances are you’d be better served making them a different display type.

If flexbox is supported use it. It is simpler.

```
 .container {
  display: flex;
  justify-content: center;
 }
```

If flexbox is not supported we need to apply styles to both the container and the content elements

```
 .inline-block-center {
  text-align: center;
 }

 .inline-block-center div {
  display: inline-block;
  text-align: left; /* Reset text-align to initial state */
 }
```

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/centering-css-complete-guide/)"
how do you vertically center a **single line** of **inline** or **inline-\*** elements (like text or links)?,"Sometimes inline/text elements can appear vertically centered, just because there is equal padding above and below them.

```
 .link {
  padding-top: 30px;
  padding-bottom: 30px;
 }
```

If padding isn’t an option for some reason, and you’re trying to center some text that you know will not wrap, there is a trick were making the `line-height` equal to the `height` will center the text.

```
 .center-text-trick {
  height: 100px;
  line-height: 100px;
  white-space: nowrap;
 }
```

## Footnote

*Source [css-tricks](https://css-tricks.com/centering-css-complete-guide/)*"
how do you vertically center **multiple** lines of **inline** or **inline-\*** elements (like text or links)?,"The element the text is in can be a table cell, either literally or made to behave like one with CSS. The `vertical-align` property handles this, in this case, unlike what it normally does which is handle the alignment of elements aligned on a row.

```
 .center-table {
  display: table;
  height: 250px;
  width: 240px;
 }

 .center-table p {
  display: table-cell;
  vertical-align: middle;
 }
```

If something table-like is out, perhaps you could use *flexbox*? A single flex-child can be made to center in a flex-parent pretty easily.

```
 .flex-center-vertically {
  display: flex;
  justify-content: center;
  flex-direction: column;
  height: 400px;
 }
```

Remember that it’s only really relevant if the parent container has a fixed height (`px`, `%`, etc), which is why the container here has a height.

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/centering-css-complete-guide/)"
What is the “ghost element” technique?,"It is a technique use to vertically align multiple lines of `inline` or `inline-*` elements. A full-height pseudo-element is placed inside the container and the text is vertically aligned with that.

```
 .ghost-center::before {
  content: "" "";
  display: inline-block;
  height: 100vh;
  width: 1%;
  vertical-align: middle;
 }

 .ghost-center p {
  display: inline-block;
  vertical-align: middle;
 }
```

Remember that it’s only really relevant if the parent container (`div.ghost-center`) has a fixed height (`px`, `em`, etc), which is why the container here has a height.

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/centering-css-complete-guide/)"
How do you vertically center a **block element** of fixed height?,"```
.parent {
  position: relative;
 }

 .child {
  position: absolute;
  top: 50%;
  height: 100px;
  margin-top: -50px; /* account for padding and border if not using box-sizing: border-box; */
 }
```

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/centering-css-complete-guide/)"
How do you vertically center a **block element** of **unknown height**?,"It’s still possible to center it by nudging it up half of it’s height after bumping it down halfway:

```
 .parent {
  position: relative;
 }

 .child {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
 }
```

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/centering-css-complete-guide/)"
How do you **vertically center** a **block element** with **flexbox**?,"```
.parent {
  display: flex;
  flex-direction: column;
  justify-content: center;
 }
```

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/centering-css-complete-guide/)"
How do you **center** a **block element** of **fixed** **size** (width & height)?,"Using **negative margins** equal to half of that width and height, after you’ve absolutely positioned it at 50% / 50% will center it with great cross-browser support:

```
 .parent {
  position: relative;
 }

 .child {
  width: 300px;
  height: 100px;
  padding: 20px;

 position: absolute;
  top: 50%;
  left: 50%;

 margin: -70px 0 0 -170px;
 }
```

## Footnote

*Source [css-tricks](https://css-tricks.com/centering-css-complete-guide/)*"
How do you **center** a **block element** of **unknown width** and **height**?,"If you don’t know the width or height, you can use the *transform* property and a *negative* *translate* of 50% in both directions (it is based on the current width/height of the element) to center:

```
 .parent {
  position: relative;
 }

 .child {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
 }
```

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/centering-css-complete-guide/)"
How can you **center** a **block element** with **flexbox?**,"```
.parent {
  display: flex;
  align-items: center;
  justify-content: center;
 }
```

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/centering-css-complete-guide/)"
What is the **behaviour** of **negative margins?**,"Unlike `padding` and `border-width`, you can assign a negative value to `margin`s.

The exact behaviour of a negative margin depends on which side of the element
you apply it to.

* If applied to the left or top, the negative margin moves the element leftward or upward, respectively. This can cause the element to overlap another element preceding it in the document flow.
* If applied to the right or bottom side, a negative margin doesn’t shift the element; instead, it pulls in any succeeding element. Giving an element a negative bottom margin is behaves the same as if you gave the element(s) beneath it a negative top margin.

**WARNING** Using negative margins to overlap elements can render some elements un-clickable if they’re moved beneath other elements.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What is **margin collapsing**?,"The *top* and *bottom* margins of blocks are sometimes combined (collapsed) into a single margin whose size is the largest of the individual margins (or just one of them, if they are equal), a behavior known as margin collapsing. Note that the margins of *floating* and *absolutely positioned elements* never collapse.

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing)"
When does **marging collapsing** occur?,"Margin collapsing occurs in three basic cases:

**Adjacent siblings**

The margins of adjacent siblings are collapsed (except when the latter sibling needs to be [cleared](https://developer.mozilla.org/en-US/docs/Web/CSS/clear) past floats).

**No content separating parent and descendants**

If there is no border, padding, inline part, [block formatting context](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_display/Block_formatting_context) created, or [clearance](https://developer.mozilla.org/en-US/docs/Web/CSS/clear) to separate the [`margin-top`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-top) of a block from the [`margin-top`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-top) of one or more of its descendant blocks; or no border, padding, inline content, [`height`](https://developer.mozilla.org/en-US/docs/Web/CSS/height), or [`min-height`](https://developer.mozilla.org/en-US/docs/Web/CSS/min-height) to separate the [`margin-bottom`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-bottom) of a block from the [`margin-bottom`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-bottom) of one or more of its descendant blocks, then those margins collapse. The collapsed margin ends up outside the parent.

**Empty blocks**

If there is no border, padding, inline content, [`height`](https://developer.mozilla.org/en-US/docs/Web/CSS/height), or [`min-height`](https://developer.mozilla.org/en-US/docs/Web/CSS/min-height)  to separate a block's  [`margin-top`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-top) from its  [`margin-bottom`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-bottom), then its top and bottom margins collapse.

## Footnote

[""Mastering margin collapsing - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing) Retrieved April 20, 2024."
"Given this HTML

```
<div class=""wrapper"">
 <div class=""empty-block"">
 <div class=""empty-block"">< /div>
 <div class=""empty-block"">< /div>
 </div>
</div>
```

and this CSS rulesets

```
.wrapper {
 border: solid rebeccapurple 1px;
}

.empty-block {
 margin: 20px;
}
```

What will be the `height` of the **div.wrapper element**? and what will be its `margin`?","`div.wrapper` element will have a height of `20px` and a margin of `0px`.

Ther reason is because the vertical margins of `div.empty-block` elements collapse all the way up until it reaches the border of the the parent element (`div.wrapper`) whose `margin` can not collapse because it has set a border.

## Footnote

[codepen](https://codepen.io/carpasse/pen/vYRGZeW)"
What can **prevent** a **margin** from **collapsing**?,"Anything that separates the `margin-top` of a block from the `margin-top` of one or more of its descendant blocks and the same with the `margin-bottom` of a block element and its descendants.

Like `border`, `padding`, inline part (aka content), [block formatting context](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context) created (display, overflow, float, column-span, ...), a set height or min-height or [clearance](https://developer.mozilla.org/en-US/docs/Web/CSS/clear)

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing)"
"Given the following aside with two links:

```
<aside class=""sidebar"">
  <a href=""/twitter"" class=""button-link"">
  follow us on Twitter
  </a>
  <a href=""/facebook"" class=""button-link"">
  like us on Facebook
  </a>
 </aside>
```

How can you add a `1.5em` vertical space the in-between of the `a.button-link` elements?
Note: the assume all button-link anchors have `display:block`. In other words treat them as block elements.","Using the adjacent sibling selector to set a `margin-top`

```
 .button-link + .button-link {
  margin-top: 1.5em;
 }
```

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
How can you target all elements on the page that aren’t the first child of their parent?,"With the ***lobotomized owl selector***

```
* + *
```

That’s a universal selector (`*`) that targets all elements, followed by an adjacent sibling combinator (`+`), followed by another universal selector. The lobotomized owl targets all elements on the page that aren’t the first child of their parent.

**NOTE**: You might be worried about the performance implications of the universal selector (`*`). In IE6, it was incredibly slow, so developers avoided using it. Today, this is no longer a concern because modern browsers handle it well.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
"What is the difference between

```
 * + * {
  margin-top: 1.5em;
 }
```

and

```
 body * + * {
  margin-top: 1.5em;
 }
```","If you include `body` at the beginning of the selector. This restricts the selector to only target items inside the body. If you use the *lobotomized owl* by itself, it will target the `<body>` element because it’s an adjacent sibling of the  `<head>` element.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"

Question,Answer
at-rules,at-rules
What is an at-rule?,"At-rules are CSS statements that instruct CSS how to behave. They begin with an at sign, `@` (`U+0040 COMMERCIAL AT`), followed by an identifier and includes everything up to the next semicolon, `;` (`U+003B SEMICOLON`), or the next CSS block, whichever comes first.

## Footnote

[""At-rules - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule) Retrieved March 26, 2024."
Syntax of at-rules,"At-rules begin with an at sign, `@` (`U+0040 COMMERCIAL AT`), followed by an identifier and includes everything up to the next semicolon, `;` (`U+003B SEMICOLON`), or the next CSS block, whichever comes first.

**Regular**

```
/* General structure */
@identifier (RULE);

/* Example: tells browser to use UTF-8 character set */
@charset ""utf-8"";
```

There are several regular at-rules, designated by their identifiers, each with a different syntax:

* [`@charset`](https://developer.mozilla.org/en-US/docs/Web/CSS/@charset) — Defines the character set used by the style sheet.
* [`@import`](https://developer.mozilla.org/en-US/docs/Web/CSS/@import) — Tells the CSS engine to include an external style sheet.
* [`@namespace`](https://developer.mozilla.org/en-US/docs/Web/CSS/@namespace) — Tells the CSS engine that all its content must be considered prefixed with an XML namespace.

**Nested**

```
@identifier (RULE) {
}
```

A subset of nested statements, which can be used as a statement of a style sheet as well as inside of conditional group rules.

* [`@media`](https://developer.mozilla.org/en-US/docs/Web/CSS/@media) — A conditional group rule that will apply its content if the device meets the criteria of the condition defined using a media query.
* [`@scope`](https://developer.mozilla.org/en-US/docs/Web/CSS/@scope) - A conditional group rule that will apply its content if the device meets the criteria of the given condition.
* [`@starting-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/@starting-style) - A conditional group rule that will apply starting transition if the browser meets the criteria of the given condition.
* [`@supports`](https://developer.mozilla.org/en-US/docs/Web/CSS/@supports) — A conditional group rule that will apply its content if the browser meets the criteria of the given condition.
* [`@page`](https://developer.mozilla.org/en-US/docs/Web/CSS/@page) — Describes the aspect of layout changes that will be applied when printing the document.
* [`@font-face`](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face) — Describes the aspect of an external font to be downloaded.
* [`@keyframes`](https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes) — Describes the aspect of intermediate steps in a CSS animation sequence.
* [`@counter-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/@counter-style) — Defines specific counter styles that are not part of the predefined set of styles.
* [`@font-feature-values`](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-feature-values) (plus `@swash`, `@ornaments`, `@annotation`, `@stylistic`, `@styleset` and `@character-variant`) — Define common names in [font-variant-alternates](https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-alternates) for feature activated differently in OpenType.
* [`@property`](https://developer.mozilla.org/en-US/docs/Web/CSS/@property) — Describes the aspect of custom properties and variables.
* [`@layer`](https://developer.mozilla.org/en-US/docs/Web/CSS/@layer) – Declares a cascade layer and defines the order of precedence in case of multiple cascade layers.

## Footnote

[""At-rules - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule) Retrieved March 26, 2024."
What are conditional group rules?,"Each at-rule has a different syntax. Nevertheless, several of them can be grouped into a special category named *conditional group rules*. These statements share a common syntax and each of them can include nested statements—either rulesets or nested at-rules. Furthermore, they all convey a common semantic meaning—they all link some type of condition, which at any time evaluates to either true or false. If the condition evaluates to true, then all of the statements within the group will be applied.

Conditional group rules are:

* [`@media`](https://developer.mozilla.org/en-US/docs/Web/CSS/@media) — A conditional group rule that will apply its content if the device meets the criteria of the condition defined using a media query.
* [`@scope`](https://developer.mozilla.org/en-US/docs/Web/CSS/@scope) - A conditional group rule that will apply its content if the device meets the criteria of the given condition.
* [`@supports`](https://developer.mozilla.org/en-US/docs/Web/CSS/@supports) — A conditional group rule that will apply its content if the browser meets the criteria of the given condition.

Since each conditional group may also contain nested statements, there may be an unspecified amount of nesting.

## Footnote

[""Conditional group rules"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule#conditional_group_rules) Retrieved March 26, 2024."
`@import` CSS at-rule,"The `@import` CSS at-rule is used to import style rules from other valid stylesheets. An `@import` rule must be defined at the top of the stylesheet, before any other at-rule (except `@charset` and `@layer`) and style declarations, or it will be ignored.

The `@import` rule is not a [nested statement](https://developer.mozilla.org/en-US/docs/Web/CSS/Syntax#nested_statements). Therefore, it cannot be used inside [conditional group](https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule#conditional_group_rules) at-rules.

The `@import` rule can also be used to create a [cascade layer](https://developer.mozilla.org/en-US/docs/Web/CSS/@layer) by importing rules from a linked resource. Rules can also be imported into an existing cascade layer. The `layer` keyword or the `layer()` function is used with `@import` for this purpose. Declarations in style rules from imported stylesheets interact with the cascade as if they were written literally into the stylesheet at the point of the import.

**Syntax**

```
@import url;
@import url layer;
@import url layer(layer-name);
@import url layer(layer-name) supports(supports-condition);
@import url layer(layer-name) supports(supports-condition) list-of-media-queries;
@import url layer(layer-name) list-of-media-queries;
@import url supports(supports-condition);
@import url supports(supports-condition) list-of-media-queries;
@import url list-of-media-queries;
```

where:

* `url` - Is a [`<string>`](https://developer.mozilla.org/en-US/docs/Web/CSS/string), a `<url>` or a `url() `function representing the location of the resource to import. The URL may be absolute or relative.
* `list-of-media-queries` - Is a comma-separated list of [media queries](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_media_queries/Using_media_queries), which specify the media-dependent conditions for applying the CSS rules defined in the linked URL. If the browser does not support any of these queries, it does not load the linked resource.
* `layer-name` - Is the name of a [cascade layer](https://developer.mozilla.org/en-US/docs/Web/CSS/@layer) into which the contents of the linked resource are imported.
* `supports-condition` - Indicates the feature(s) that the browser must support in order for the stylesheet to be imported. If the browser does not conform to the conditions specified in the supports-condition, it may not fetch the linked stylesheet, and even if downloaded through some other path, will not load it. The syntax of `supports()` is almost identical to that described in [`@supports`](https://developer.mozilla.org/en-US/docs/Web/CSS/@supports), and that topic can be used as a more complete reference.

## Footnote

[""@import - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/@import) Retrieved March 27, 2024."
"What is the problem with this styles?

```
* {
  margin: 0;
  padding: 0;
}
/* more styles */
@import url(""my-imported-styles.css"");
```","As the `@import` at-rule is declared after the styles, it is invalid and hence ignored.

```
@import url(""my-imported-styles.css"");
* {
  margin: 0;
  padding: 0;
}
/* more styles */
```

## Footnote

[""@import"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/@import#description) Retrieved March 27, 2024."
"Explain the following CSS rules

```
@import url(""fineprint.css"") print;
@import url(""bluish.css"") print, screen;
@import ""common.css"" screen;
@import url(""landscape.css"") screen and (orientation: landscape)
```","The `@import` rules in the above examples show media-dependent conditions that will need to be true before the linked CSS rules are applied. So for instance, the last `@import` rule will load the `landscape.css` stylesheet only on a screen device in landscape orientation.

## Footnote

[""Importing CSS rules conditional on media queries"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/@import#importing_css_rules_conditional_on_media_queries) Retrieved March 27, 2024."
"Explain the following CSS rules

```
@import url(""gridy.css"") supports(display: grid) screen and (max-width: 400px);
@import url(""flexy.css"") supports(not (display: grid) and (display: flex)) screen
  and (max-width: 400px);
```","The `@import` rules above illustrate how you might import a layout that uses a grid if `display: grid` is supported, and otherwise imports CSS that uses `display: flex`. While you can only have one `supports()` statement, you can combine any number of feature checks with `not`, `and`, and `or`, as long as you wrap each condition to be tested in parentheses. You can also use parentheses to indicate precedence. Note that if you just have a single declaration then you don't need to wrap it in additional parenthese: this is shown in the first example above.

## Footnote

[""Importing CSS rules conditional on feature support"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/@import#importing_css_rules_conditional_on_feature_support) Retrieved March 27, 2024."
"Explain the following CSS rule

```
@import url(""whatever.css"") supports((selector(h2 > p)) and
    (font-tech(color-COLRv1)));
```","The CSS rule above shows an `@import` that is conditional on both [child combinators](https://developer.mozilla.org/en-US/docs/Web/CSS/Child_combinator) (`selector()`) and the `font-tech()` function.

## Footnote

[""Importing CSS rules conditional on feature support"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/@import#importing_css_rules_conditional_on_feature_support) Retrieved March 27, 2024."
"Explain the following CSS rules

```
@import url(headings.css) layer(default);
@import url(links.css) layer(default);

@layer default {
  audio[controls] {
    display: block;
  }
}
```","The CSS rules in `headings.css` and `links.css` stylesheets cascade within the same layer as the `audio[controls]` rule.

## Footnote

[""Importing CSS rules into a cascade layer"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/@import#importing_css_rules_into_a_cascade_layer) Retrieved March 27, 2024."
`@namespace` CSS at-rule,"`@namespace` is an at-rule that defines XML [namespaces](https://developer.mozilla.org/en-US/docs/Glossary/Namespace) to be used in a CSS style sheet.

**Syntax**

```
/* Default namespace */
@namespace url(XML-namespace-URL);
@namespace ""XML-namespace-URL"";

/* Prefixed namespace */
@namespace prefix url(XML-namespace-URL);
@namespace prefix ""XML-namespace-URL"";
```

**Description**
The defined namespaces can be used to restrict the [universal](https://developer.mozilla.org/en-US/docs/Web/CSS/Universal_selectors), [type](https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors), and [attribute](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors) [selectors](https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors) to only select elements within that namespace. The `@namespace` rule is generally only useful when dealing with documents containing multiple namespaces—such as HTML with inline SVG or MathML, or XML that mixes multiple vocabularies.

Any `@namespace` rules must follow all [`@charset`](https://developer.mozilla.org/en-US/docs/Web/CSS/@charset) and [`@import`](https://developer.mozilla.org/en-US/docs/Web/CSS/@import) rules, and precede all other at-rules and [style declarations](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration) in a style sheet.

`@namespace` can be used to define the **default namespace** for the style sheet. When a default namespace is defined, all universal and type selectors (but not attribute selectors, see note below) apply only to elements in that namespace.

The `@namespace` rule can also be used to define a **namespace prefix**. When a universal, type, or attribute selector is prefixed with a namespace prefix, then that selector only matches if the namespace and name of the element or attribute matches.

In HTML, [known foreign elements](https://html.spec.whatwg.org/multipage/syntax.html#foreign-elements) will automatically be assigned namespaces. This means that HTML elements will act as though they are in the [XHTML namespace](http://www.w3.org/1999/xhtml), even if there is no `xmlns` attribute anywhere in the document, and the [`<svg>`](http://www.w3.org/2000/svg) and [`<math>`](http://www.w3.org/1998/Math/MathML) elements will be assigned their proper namespaces.

**Note**: In XML, unless a prefix is defined directly on an attribute (e.g., `xlink:href`), that attribute has no namespace. In other words, **attributes do not inherit the namespace of the element they're on**. To match this behavior, the default namespace in CSS does not apply to attribute selectors.

Examples: 

```
@namespace url(http://www.w3.org/1999/xhtml);
@namespace svg url(http://www.w3.org/2000/svg);

/* This matches all XHTML <a> elements, as XHTML is the default unprefixed namespace */
a {
}

/* This matches all SVG <a> elements */
svg|a {
}

/* This matches both XHTML and SVG <a> elements */
*|a {
}
```

## Footnote

[""@namespace - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/@namespace) Retrieved March 28, 2024."
`@charset` CSS rule,"The `@charset` CSS rule specifies the character encoding used in the style sheet. Although the first character in `@charset` is the `@` symbol, it is not an at-rule. **The CSS syntax module deprecates this rule**, defining it as an unrecognized legacy rule to be dropped when a stylesheet is grammar-checked, but it is fully supported in all browsers.

**Syntax**

```
@charset ""UTF-8"";
@charset ""iso-8859-15"";
```

**Formal syntax**

```
@charset ""<charset>"";
```

`charset` -  A `<string>` denoting the character encoding to be used. It must be the name of a web-safe character encoding defined in the[ IANA-registry](https://www.iana.org/assignments/character-sets/character-sets.xhtml), and must be double-quoted, following exactly one space character (`U+0020`), and immediately terminated with a semicolon. If several names are associated with an encoding, only the one marked with preferred must be used.

## Footnote

[""@charset - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/@charset) Retrieved March 29, 2024."
`@scope` CSS at-rule,"The `@scope` CSS at-rule enables you to select elements in specific DOM subtrees, targeting elements precisely without writing overly-specific selectors that are hard to override, and without coupling your selectors too tightly to the DOM structure.

In JavaScript, `@scope` can be accessed via the CSS object model interface [CSSScopeRule](https://developer.mozilla.org/en-US/docs/Web/API/CSSScopeRule).

**Syntax**

`@scope` can be used in two ways:

1. As a standalone block inside your CSS, in which case it includes a prelude section that includes scope root and optional scope limit selectors — these define the upper and lower bounds of the scope.

```
@scope (scope root) to (scope limit) {
  rulesets
}
```

2. As inline styles included inside a `<style>` element in your HTML, in which case the prelude is omitted, and the enclosed ruleset is automatically scoped to the `<style>` element's enclosing parent element.

HTML

```
<parent-element>
  <style>
    @scope {
      rulesets
    }
  </style>
</parent-element>
```

**NOTE:** It is important to understand that, while `@scope` allows you to isolate the application of selectors to specific DOM subtrees, it does not completely isolate the applied styles to within those subtrees. This is most noticeable with inheritance — properties that are inherited by children (for example `color` or `font-family`) will still be inherited, beyond any set scope limit.

**NOTE 2:** At the moment of this writing support for this at-rule is limite please check its [browser compatibility table](https://developer.mozilla.org/en-US/docs/Web/CSS/@scope#browser_compatibility) before use.

## Footnote

[""@scope - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/@scope) Retrieved March 29, 2024."
"What does `:scope` pseudo-class refers to in the following CSS ruleset

```
@scope (.feature) {
  :scope {
    background: rebeccapurple;
    color: antiquewhite;
    font-family: sans-serif;
  }
}
```","In the context of a `@scope` block, the `:scope` pseudo-class represents the scope root — it provides an easy way to apply styles to the scope root itself, from inside the scope. In the example CSS provided `:scope` will refer to `.feature` elements.

In fact, `:scope` is implicitly prepended to all scoped style rules. If you want, you can explicitly prepend `:scope` or prepend the nesting selector (`&`) to get the same effect if you find these representations easier to understand.

The three rules in the following block are all equivalent in what they select:

```
@scope (.feature) {
  img { ... }

  :scope img { ... }

  & img { ... }
}
```

## Footnote

[""The :scope pseudo-class"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/@scope#the_scope_pseudo-class) Retrieved March 29, 2024."
What is the difference between `:scope` and `&` inside `@scope` at-rule?,"`:scope` represents the matched scope root, whereas `&` represents the selector used to match the scope root. Because of this, it is possible to chain `&` multiple times. However, you can only use `:scope` once — you can't match a scope root inside a scope root.

```
@scope (.feature) {
  /* Selects a .feature inside the matched root .feature */
  & & { ... }

  /* Doesn't work */
  :scope :scope { ... }
}
```

## Footnote

[""The difference between :scope and & inside @scope"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/@scope#the_difference_between_scope_and_inside_scope) Retrieved March 29, 2024."
How are `@scope` conflicts are resolved?,"`@scope` adds a new criterion to the [CSS cascade](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_cascade): **scoping proximity**. This states that when two scopes have conflicting styles, the style that has the smallest number of hops up the DOM tree hierarchy to the scope root is applied. Let's look at an example to see what this means.

Take the following HTML snippet, where different-themed cards are nested inside one another:

HTML

```
<div class=""light-theme"">
  <p>Light theme text</p>
  <div class=""dark-theme"">
    <p>Dark theme text</p>
    <div class=""light-theme"">
      <p>Light theme text</p>
    </div>
  </div>
</div>
```

If you wrote the theme CSS like so, you'd run into trouble:

```
.light-theme {
  background: #ccc;
}

.dark-theme {
  background: #333;
}

.light-theme p {
  color: black;
}

.dark-theme p {
  color: white;
}
```

The innermost paragraph is supposed to be colored black because it is inside a light theme card. However, it's targeted by both `.light-theme p` and `.dark-theme p`. Because the `.dark-theme p` rule appears later in the source order, it is applied, and the paragraph ends up being wrongly colored white.

To fix this, you can use `@scope` as follows:

CSS

```
@scope (.light-theme) {
  :scope {
    background: #ccc;
  }
  p {
    color: black;
  }
}

@scope (.dark-theme) {
  :scope {
    background: #333;
  }
  p {
    color: white;
  }
}
```

Now the innermost paragraph is correctly colored black. This is because it is only one DOM tree hierarchy level away from the `.light-theme` scope root, but two levels away from the `.dark-theme` scope root. Therefore, the light style wins.

## Footnote

[""How @scope conflicts are resolved"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/@scope#how_scope_conflicts_are_resolved) Retrieved March 29, 2024."
`@media` CSS at-rule,"The `@media` CSS at-rule can be used to apply part of a style sheet based on the result of one or more [media queries](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_media_queries/Using_media_queries). With it, you specify a media query and a block of CSS to apply to the document if and only if the media query matches the device on which the content is being used.

**Syntax**

```
/* At the top level of your code */
@media screen and (min-width: 900px) {
  article {
    padding: 1rem 3rem;
  }
}

/* Nested within another conditional at-rule */
@supports (display: flex) {
  @media screen and (min-width: 900px) {
    article {
      display: flex;
    }
  }
}
```

## Footnote

[""@media - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/@media) Retrieved March 29, 2024."
`@supports` CSS at-rule,"The `@supports` CSS at-rule lets you specify CSS declarations that depend on a browser's support for CSS features. Using this at-rule is commonly called a *feature query*. The rule must be placed at the top level of your code or nested inside any other [conditional group at-rule](https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule#conditional_group_rules).

**Syntax**
The `@supports` at-rule consists of a block of statements with a supports condition. The supports condition is a set of one or more name-value pairs (e.g., `<property>: <value>`).

```
@supports (<supports-condition>) {
  /* If the condition is true, use the CSS in this block. */
}
```

The conditions can be combined by conjunctions (`and`), disjunctions (`or`), and/or negations (`not`).

```
@supports (<supports-condition>) and (<supports-condition>) {
  /* If both conditions are true, use the CSS in this block. */
}
```

The precedence of operators can be defined with parentheses. Supports conditions can use either a `<property>: <value>` declaration syntax or a `<function()>` syntax.

## Footnote

[""`@supports` - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/@supports) Retrieved April 5, 2024."
`@supports` declaration syntax,"The declaration syntax checks if a browser supports the specified` <property>: <value>` declaration. The declaration must be surrounded by parentheses. The following example returns true and applies the CSS style if the browser supports the expression `transform-origin: 5% 5%`:

```
@supports (transform-origin: 5% 5%) {
}
```

## Footnote

[""@supports - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/@supports#declaration_syntax) Retrieved April 9, 2024."
`@supports` function syntax,"The function syntax checks if a browser supports values or expressions within the function. The functions supported in the function syntax are:

**`selector()`** 
This function evaluates if a browser supports the specified selector syntax. The following example returns true and applies the CSS style if the browser supports the child combinator:

```
@supports selector(h2 > p) {
}
```

**`font-tech()`**
This function checks if a browser supports the specified font technology for layout and rendering. The following example returns true and applies the CSS style if the browser supports the `COLRv1` font technology:

```
@supports font-tech(color-COLRv1) {
}
```

**`font-format()`**
This function checks if a browser supports the specified font format for layout and rendering. The following example returns true and applies the CSS style if the browser supports the opentype font format:

```
@supports font-format(opentype) {
}
```

## Footnote

[""@supports - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/@supports#function_syntax) Retrieved April 9, 2024."
`@supports` `not` operator,"The `not` operator precedes an expression resulting in the negation of the expression. The following returns `true` if the browser's `transform-origin` property considers `10em 10em 10em` to be invalid:

```
@supports not (transform-origin: 10em 10em 10em) {
}
```

As with any operator, the `not` operator can be applied to a declaration of any complexity. The following examples are both valid:

```
@supports not (not (transform-origin: 2px)) {
}
@supports (display: grid) and (not (display: inline-grid)) {
}
```

## Footnote

[""The not operator"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/@supports#the_not_operator) Retrieved April 9, 2024."
`@supports` `and` operator,"The `and` operator creates a new expression from the conjunction of two shorter expressions. It returns `true` only if both of the shorter expressions are also `true`. The following example returns `true` if and only if the two shorter expressions are simultaneously true:

```
@supports (display: table-cell) and (display: list-item) {
}
```

Multiple conjunctions can be juxtaposed without the need of more parentheses. The following are both equivalent:

```
@supports (display: table-cell) and (display: list-item) and (display: contents) {
}
@supports (display: table-cell) and
  ((display: list-item) and (display: contents)) {
}
```

**Note**: When using both `and` and `or` operators, the parentheses must be used to define the order in which they apply. Otherwise, the condition is invalid and the whole rule is ignored.

## Footnote

[""The and operator"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/@supports#the_and_operator) Retrieved April 9, 2024."
`@supports` `or` operator,"The `or` operator creates a new expression from the disjunction of two shorter expressions. It returns true if one or both of the shorter expressions is also true. The following example returns true if at least one of the two shorter expressions is true:

```
@supports (transform-style: preserve) or (-moz-transform-style: preserve) {
}
```

Multiple disjunctions can be juxtaposed without the need of more parentheses. The following are both equivalent:

```
@supports (transform-style: preserve) or (-moz-transform-style: preserve) or (-webkit-transform-style: preserve) {}

@supports (transform-style: preserve-3d) or ((-moz-transform-style: preserve-3d) or (-webkit-transform-style: preserve-3d))) {}
```

**Note**: When using both `and` and `or` operators, the parentheses must be used to define the order in which they apply. Otherwise, the condition is invalid and the whole rule is ignored.

## Footnote

[""The or operator"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/@supports#the_or_operator) Retrieved April 10, 2024."
`@layer` CSS at-rule,"The `@layer` CSS at-rule is used to declare a cascade layer and can also be used to define the order of precedence in case of multiple cascade layers.

Rules within a cascade layer cascade together, giving more control over the cascade to web developers. Any styles not in a layer are gathered together and placed into a single anonymous layer that comes after all the declared layers, named and anonymous. This means that any styles declared outside of a layer will override styles declared in a layer, regardless of specificity.

**Syntax**

```
@layer layer-name {rules}
@layer layer-name;
@layer layer-name, layer-name, layer-name;
@layer {rules}
```

where:

* `layer-name` - Is the name of the cascade layer.
* `rules` - Is the set of CSS rules in the cascade layer.

## Footnote

[""`@layer` - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/@layer) Retrieved April 10, 2024."
List the 4 ways you can create a cascade `@layer`,"1.- **Create a named cascade layer with the CSS rules for that layer inside**, like so:

```
@layer utilities {
  .padding-sm {
    padding: 0.5rem;
  }

  .padding-lg {
    padding: 0.8rem;
  }
}
```

2.- **Create a named cascade layer without assigning any styles**. This can be a single layer, as shown below:

```
@layer utilities;
```

Multiple layers can be defined at once:

```
@layer theme, layout, utilities;
```

This is useful because the initial order in which layers are declared indicates which layer has precedence. As with declarations, the last layer to be listed will win if declarations are found in multiple layers. Therefore, with the preceding example, if a competing rule was found in `theme` and `utilities`, the one in utilities would win and be applied.

A rule in `utilities` would be applied even if it has lower specificity than the rule in theme. This is because **once the layer order has been established, specificity and order of appearance are ignored**. This enables the creation of simpler CSS selectors because you do not have to ensure that a selector will have high enough specificity to override competing rules; all you need to ensure is that it appears in a later layer.

**Note**: Having declared your layer names, thus setting their order, you can add CSS rules to the layer by re-declaring the name. The styles are then appended to the layer and the layer order will not be changed.

3.- **Create a cascade layer with no name**. For example:

```
@layer {
  p {
    margin-block: 1rem;
  }
}
```

This creates an anonymous cascade layer. This layer functions in the same way as named layers; however, rules cannot be assigned to it later. The order of precedence for anonymous layers is the order in which layers are declared, named or not, and lower than the styles declared outside of a layer.

4.- **Create a cascade layer is by using [`@import`](https://developer.mozilla.org/en-US/docs/Web/CSS/@import)**. In this case, the rules would be in the imported stylesheet. Remember that the `@import` at-rule must precede all other types of rules, except `@charset` and `@layer` rules.

```
@import ""theme.css"" layer(utilities);
```

## Footnote

[""`@layer` - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/@layer) Retrieved April 10, 2024."
is it possible to nest `@layer`s?,"Layers may be nested. For example:

```
@layer framework {
  @layer layout {
  }
}
```

To append rules to the layout layer inside framework, join the two names with a ..

```
@layer framework.layout {
  p {
    margin-block: 1rem;
  }
}
```

## Footnote

[""Nesting layers"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/@layer#nesting_layers) Retrieved April 10, 2024."
`@page` CSS at-rule,"The `@page` at-rule is a CSS at-rule used to modify different aspects of printed pages. It targets and modifies the page's dimensions, orientation, and margins. The `@page` at-rule can be used to target all pages in a print-out or a subset using its various pseudo-classes.

**Syntax**

```
/* Targets all the pages */
@page {
  size: 8.5in 9in;
  margin-top: 4in;
}

/* Targets all even-numbered pages */
@page :left {
  margin-top: 4in;
}

/* Targets all odd-numbered pages */
@page :right {
  size: 11in;
  margin-top: 4in;
}

/* Targets all selectors with `page: wide;` set */
@page wide {
  size: a4 landscape;
}

@page {
  /* margin box at top right showing page number */
  @top-right {
    content: ""Page "" counter(pageNumber);
  }
}
```

**Page properties**

The `@page` at-rule can contain only [page descriptors](https://developer.mozilla.org/en-US/docs/Web/CSS/@page#page-descriptors) and [margin at-rules](https://developer.mozilla.org/en-US/docs/Web/CSS/@page#margin_at-rules). The following descriptors have been implemented by at least one browser:

* [`margin`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin) - Specifies the page margins. Individual margin properties `margin-top`, `margin-right`, `margin-bottom`, and `margin-left` can also be used.
* [`page-orientation`](https://developer.mozilla.org/en-US/docs/Web/CSS/@page/page-orientation) - Specifies the orientation of the page. This does not affect the layout of the page; the rotation is applied after the layout in the output medium.
* [`size`](https://developer.mozilla.org/en-US/docs/Web/CSS/@page/size) - Specifies the target size and orientation of the page box's containing block. In the general case, where one page box is rendered onto one page sheet, it also indicates the size of the destination page sheet.

**Margin at-rules**

**Warning**: The margin at-rules have not been implemented by any user agent (updated: August 2023).

The [margin at-rules](https://developer.mozilla.org/en-US/docs/Web/CSS/@page#margin_at-rules) are used inside of the `@page` at-rule. They each target a different section of the document printed page, styling the area of the printed page based on the property values set in the style block:

```
@page {
  @top-left {
    /* page-margin-properties */
  }
}
```

## Footnote

[""`@page `- CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/@page) Retrieved April 11, 2024."
`@property` CSS at-rule,"The `@property` CSS at-rule is part of the [CSS Houdini](https://developer.mozilla.org/en-US/docs/Web/API/Houdini_APIs) umbrella of APIs. It allows developers to explicitly define their [CSS custom properties](https://developer.mozilla.org/en-US/docs/Web/CSS/--*), allowing for property type checking and constraining, setting default values, and defining whether a custom property can inherit values or not.

The `@property` rule represents a custom property registration directly in a stylesheet without having to run any JS. Valid `@property` rules result in a registered custom property, as if [`registerProperty()`](https://developer.mozilla.org/en-US/docs/Web/API/CSS/registerProperty_static) had been called with equivalent parameters.

**Syntax**

```
@property --property-name {
  syntax: ""<color>"";
  inherits: false;
  initial-value: #c0ffee;
}
```

**Descriptors**

**[`syntax`](https://developer.mozilla.org/en-US/docs/Web/CSS/@property/syntax)**

Describes the allowable syntax for the property. May be a `<length>, <number>, <percentage>, <length-percentage>, <color>, <image>, <url>, <integer>, <angle>, <time>, <resolution>, <transform-function>`, or `<custom-ident>`, or a list of data type and keyword values.

The `+` (space-separated) and `#` (comma-separated) multipliers indicate that a list of values is expected, for example `<color>#` means a comma-separated list of `<color>` values is the expected syntax.

Vertical lines (`|`) - can create ""or"" conditions for the expected syntax, for example `<length> | auto` accepts a `<length>` or `auto`, and `<color># | <integer>#` expects a comma-separated list of `<color>` values or a comma-separated list of `<integer>` values.

**[`inherits`](https://developer.mozilla.org/en-US/docs/Web/CSS/@property/inherits)**

Controls whether the custom property registration specified by `@property` inherits by default.

**[`initial-value`](https://developer.mozilla.org/en-US/docs/Web/CSS/@property/initial-value)**

Sets the initial value for the property.

The `@property` rule must include both the `syntax` and `inherits` descriptors; if either are missing, the entire `@property` rule is invalid and ignored. The `initial-value` descriptor is also required, unless the syntax is the [`*` universal syntax definition](https://drafts.css-houdini.org/css-properties-values-api/#universal-syntax-definition) (e.g., `initial-value: *`). If the `initial-value` descriptor is required and omitted, the entire `@property` rule is invalid and ignored.

Unknown descriptors are invalid and ignored, but do not invalidate the `@property` rule.

Examples:

With CSS:

```
@property --item-size {
  syntax: ""<percentage>"";
  inherits: true;
  initial-value: 40%;
}
```

With Js:

```
window.CSS.registerProperty({
  name: ""--item-color"",
  syntax: ""<color>"",
  inherits: false,
  initialValue: ""aqua"",
});
```

Usage example:

```
.container {
  display: flex;
  height: 200px;
  border: 1px dashed black;

  /* set custom property values on parent */
  --item-size: 20%;
  --item-color: orange;
}

/* use custom properties to set item size and background color */
.item {
  width: var(--item-size);
  height: var(--item-size);
  background-color: var(--item-color);
}

/* set custom property values on element itself */
.two {
  --item-size: initial;
  --item-color: inherit;
}

.three {
  /* invalid values */
  --item-size: 1000px;
  --item-color: xyz;
}
```

## Footnote

[""`@property` - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/@property) Retrieved April 16, 2024."
`@counter-style` CSS at-rule,"The `@counter-style` CSS at-rule lets you extend predefined list styles and define your own counter styles that are not part of the predefined set of styles. The `@counter-style` rule contains [descriptors](https://developer.mozilla.org/en-US/docs/Web/CSS/@counter-style#descriptors) defining how the counter value is converted into a string representation.

```
@counter-style thumbs {
  system: cyclic;
  symbols: ""\1F44D"";
  suffix: "" "";
}

ul {
  list-style: thumbs;
}
```

**Syntax**

The `@counter-style` at-rule is identified by a [counter style name](https://developer.mozilla.org/en-US/docs/Web/CSS/@counter-style#counter_style_name), and the style of the named counter can be fine-tuned using a `<declaration-list>` consisting of one or more [descriptors](https://developer.mozilla.org/en-US/docs/Web/CSS/@counter-style#descriptors) and their values.

**Counter style name**

`<counter-style-name>` - Provides a name for your counter style. It is specified as a case-sensitive `<custom-ident>` without quotes. The value should not be equal to none. Like all custom identifiers, the value of your counter style can't be a [CSS-wide keyword](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Types#css-wide_keywords). Avoid other enumerated CSS property values, including values of [list](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_lists#properties) and [counter style properties](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_counter_styles#properties). The name of your counter can't be the case-insensitive [list-style-type](https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-type) property values of `decimal`, `disc`, `square`, `circle`, `disclosure-open`, and `disclosure-closed`.

**Descriptors**

[`system`](https://developer.mozilla.org/en-US/docs/Web/CSS/@counter-style/system)
Specifies the algorithm to be used for converting the integer value of a counter to a string representation. If the value is `cyclic`, `numeric`, `alphabetic`, `symbolic`, or `fixed`, the `symbols` descriptor must also be specified. If the value is `additive` , the `additive-symbols` descriptor must also be specified.

[`symbols`](https://developer.mozilla.org/en-US/docs/Web/CSS/@counter-style/symbols)
Specifies the symbols that are to be used for the marker representations. Symbols can contain strings, images, or custom identifiers. 

[`additive-symbols`](https://developer.mozilla.org/en-US/docs/Web/CSS/@counter-style/additive-symbols)
Defines the additive tuples for additive systems. While the `symbols` specified in the symbols descriptor are used for constructing marker representation by most algorithms, additive counter systems, such as Roman numerals, consist of a series of weighted symbols. The descriptors is a list of counter symbol along with their non-negative integer weights, listed by weight in descending order. 

[`negative`](https://developer.mozilla.org/en-US/docs/Web/CSS/@counter-style/negative)
Specifies to symbols to be appended or prepended to the counter representation if the value is negative.

[`prefix`](https://developer.mozilla.org/en-US/docs/Web/CSS/@counter-style/prefix)
Specifies a symbol that should be prepended to the marker representation. Prefixes are added to the representation in the final stage, before any characters added to negative counter values by the `negative` descriptor.

[`suffix`](https://developer.mozilla.org/en-US/docs/Web/CSS/@counter-style/suffix)
Specifies, similar to the prefix descriptor, a symbol that is appended to the marker representation. Suffixes come after the marker representation, including after any characters added to negative counter values by the `negative` descriptor.

[`range`](https://developer.mozilla.org/en-US/docs/Web/CSS/@counter-style/range)
Defines the range of values over which the counter style is applicable. If a counter style is used to represent a counter value outside of the ranges defined by this descriptor, the counter style will drop back to its fallback style.

[`pad`](https://developer.mozilla.org/en-US/docs/Web/CSS/@counter-style/pad)
Is used when you need the marker representations to be of a minimum length. For example if you want the counters to start at 01 and go through 02, 03, 04, etc., then the `pad` descriptor is to be used. For representations larger than the specified pad value, the marker is constructed as normal.

[`speak-as`](https://developer.mozilla.org/en-US/docs/Web/CSS/@counter-style/speak-as)
Describes how speech synthesizers, such as screen readers, should announce the counter style. For example, the value of the list item marker can be read out as numbers or alphabets for ordered lists or as audio cues for unordered lists, based on the value of this descriptor.

[`fallback`](https://developer.mozilla.org/en-US/docs/Web/CSS/@counter-style/fallback)
Specifies the counter name of the system to fall back to if either the specified system is unable to construct the representation of a counter value or if the counter value is outside the specified `range`. If the fallback counter also fails to represent the value, then that counter's fallback is used, if one is specified. If there are either no fallback counters described or if the chain of fallback systems are unable to represent a counter value, then it will ultimately fall back to the decimal style.

Examples:

```
@counter-style circled-alpha {
  system: fixed;
  symbols: Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ;
  suffix: "" "";
}

.items {
  list-style: circled-alpha;
}
```

## Footnote

[""@counter-style - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/@counter-style) Retrieved April 16, 2024."

Question,Answer
media queries,medis queries
What are CSS Media Queries?,"The CSS Media Query gives you a way to apply CSS only when the browser and device environment matches a rule that you specify, for example ""viewport is wider than 480 pixels"".

## Footnote

Source [MDN](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Media_queries)"
What is the syntax of a Media Query?,"A media query is composed of an optional media type and any number of media feature expressions, which may optionally be combined in various ways using logical operators. Media queries are case-insensitive.

***Media types*** define the broad category of device for which the media query applies: `all`, `print`, `screen`. The type is optional (assumed to be `all`) except when using the not or only logical operators.

***Media features*** describe a specific characteristic of the user agent, output device, or environment:

Examples:

Targeting media types

```
@media print {
  / … /
}
```

Targeting media features 

```
@media (color) {
  /* … */
}
```

Complex queries

```
@media screen and (min-width: 30em) and (orientation: landscape) {
  /* … */
}

@media screen and (min-width: 30em) and (orientation: landscape) {
  /* … */
}
```

## Footnote

Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries#syntax)"
How can you test for multiple Media Queries?,"You can **use a comma-separated list** to apply styles when the user's device matches any one of various media types, features, or states. For instance, the following rule will apply its styles if the user's device has either a minimum height of 680px or is a screen device in portrait mode:

```
@media (min-height: 680px), screen and (orientation: portrait) {
  /* … */
}
```

## Footnote

Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries#testing_for_multiple_queries)"
How can you combine multiple types or features in a Media Query?,"The ***and*** keyword combines a media feature with a media type or other media features. 

This example combines two media features to restrict styles to landscape-oriented devices with a width of at least 30 ems:

```
@media (min-width: 30em) and (orientation: landscape) {
  /* … */
}
```

## Footnote

Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries#combining_multiple_types_or_features)"
How can you improve Media Query compatibility with older browsers?,"The `only` keyword prevents older browsers that do not support media queries with media features from applying the given styles. It has no effect on modern browsers.

```
@media only screen and (color) {
  /* … */
}
```

## Footnote

Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries#improving_compatibility_with_older_browsers)"
"Rewrite this Media Query to the new level 4 syntax

```
@media (max-width: 30em) {
  /* … */
}
```","```
@media (width <= 30em) {  /* … */ }
```"
"Rewrite this Media Query to the new level 4 syntax

```
@media (min-width: 30em) and (max-width: 50em) {
  /* … */
}
```","```
@media (30em <= width <= 50em) {  /* … */ }
```"
How can you negate a feature in Media Queries level 4?,"Using ***not()*** around a media feature negates that feature in the query. For example, not(hover) would match if the device had no hover capability:

```
@media (not(hover)) {
  /* … */
}
```

## Footnote

Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries#negating_a_feature_with_not)"
How can you test for multiple features in Media Queries level 4?,"You can use ***or*** to test for a match among more than one feature, resolving to true if any of the features are true. For example, the following query tests for devices that have a monochrome display or hover capability:

```
@media (not (color)) or (hover) {
  /* … */
}
```

## Footnote

Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries#testing_for_multiple_features_with_or)"
List all Media Queries level 3 useful features,"* **width** - Width of the viewport including width of scrollbar.
* **height** - Height of the viewport.
* **aspect-ratio** - Width-to-height aspect ratio of the viewport
* **resolution** - Pixel density of the output device.
* **orientation** - Orientation of the viewport.

## Footnote

Source [dotConference/2017](https://www.dotconferences.com/2017/11/florian-rivoal-media-queries-4)"
What are Media Queries' media types?,"Media types describe the general category of a device. Except when using the not or only logical operators, the media type is optional and the all type is implied.



* **all** - Suitable for all devices.
* **print** - Intended for paged material and documents viewed on a screen in print preview mode. (Please see paged media for information about formatting issues that are specific to these formats.)
* **screen** - Intended primarily for screens.

## Footnote

Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/@media#media_types)"
List and explain all Media Queries' logical operators,"The logical operators **`not`**, **`and`**, and **`only`** can be used to compose a complex media query. You can also combine multiple media queries into a single rule by separating them with commas.
 

**`and`** Used for combining multiple media features together into a single media query, requiring each chained feature to return true for the query to be `true`. It is also used for joining media features with media types.

**`not`** - Used to negate a media query, returning `true` if the query would otherwise return false. If present in a comma-separated list of queries, it will only negate the specific query to which it is applied. If you use the `not` operator, you must also specify a media type.

Note: In Level 3, the not keyword can't be used to negate an individual media feature expression, only an entire media query.

**`only`** - Applies a style only if an entire query matches. It is useful for preventing older browsers from applying selected styles. If you use the `only` operator, you must also specify a media type.

**`, (comma)`** - Commas are used to combine multiple media queries into a single rule. Each query in a comma-separated list is treated separately from the others Thus, if any of the queries in a list is `true`, the entire media statement returns `true`. In other words, lists behave like a logical `or` operator.

**`or`** - Equivalent to the `,` operator. Added in Media Queries Level 4.

## Footnote

Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/@media#logical_operators)"
"Given this Media Queries: 

```
  @media screen {
	  a {
		  color: cyan;
		  text-decoration: underline;
	  } 
  }
	
  @media print {
	  a::after {
		  content: "" ("" attr(href) "")"";
	  } 
  }
```
	
What will the browser print depending on the media type?","On screen:
[foo](http://foo.com)
 
On paper:

```
Foo (http://foo.com)
```

## Footnote

Source [dotConference/2017](https://www.dotconferences.com/2017/11/florian-rivoal-media-queries-4)"
Is it possible to nest Media Queries?,"Yes. 

For example you could do:

```
@media screen and (orientation: portrait), print {
  @media (min-width: 20em) and (max-width: 40em) {
    …
  }
}
```"
What are the interaction media features?,"Allows a media query to be set based on the presence and accuracy of the user's pointing device, and whether they have the ability to hover over elements on the page. This includes the `pointer`, `any-pointer`, `hover`, and `any-hover` media features.


**`any-hover`** - Does any available input mechanism allow the user to hover over elements? Added in Media Queries Level 4.

**`any-pointer`** - Is any available input mechanism a pointing device, and if so, how accurate is it? Added in Media Queries Level 4.

**`pointer`** - Is the primary input mechanism a pointing device, and if so, how accurate is it? Added in Media Queries Level 4.

**`hover`** - Does the primary input mechanism allow the user to hover over elements? Added in Media Queries Level 4.

## Footnote

Source [w3.org](https://www.w3.org/TR/mediaqueries-4/#mf-interaction) and [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/@media)"
What is the range syntax of media queries level 4?,"Syntax improvements to make media queries using features that have a ""range"" type (like width or height) less verbose. Can be used with ordinary mathematical comparison operators: >, <, >=, or <=.
 
For example: 
 
`@media (100px <= width <= 1900px)` is the equivalent of `@media (min-width: 100px) and (max-width: 1900px)`

## Footnote

Source [w3.org](https://www.w3.org/TR/mediaqueries-4/#mq-range-context)"
Explain the **pointer** CSS media feature,"The `pointer` CSS media feature tests whether the user has a pointing device (such as a mouse), and if so, how accurate the primary pointing device is.

**Note**: If you want to test the accuracy of any pointing device, use `any-pointer` instead.

**Syntax**
The `pointer` feature is specified as a keyword value chosen from the list below.

**`none`** - The primary input mechanism does not include a pointing device.

**`coarse`** - The primary input mechanism includes a pointing device of limited accuracy.

**`fine`** - The primary input mechanism includes an accurate pointing device.

Example: 

```
@media (pointer: fine) {
  input[type=""checkbox""] {
    width: 15px;
    height: 15px;
    border-width: 1px;
    border-color: blue;
  }
}

@media (pointer: coarse) {
  input[type=""checkbox""] {
    width: 30px;
    height: 30px;
    border-width: 2px;
    border-color: red;
  }
}
```

## Footnote

Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/pointer)"
Explain the **hover** CSS media feature,"The `hover` CSS media feature can be used to test whether the user's primary pointing mechanism can hover over elements.
 
**Syntax**

The `hover` feature is specified as a keyword value chosen from the list below.
 
**`none`** - The primary input mechanism cannot hover at all or cannot conveniently hover (e.g., many mobile devices emulate hovering when the user performs an inconvenient long tap), or there is no primary pointing input mechanism.

**`hover`** - The primary input mechanism can conveniently hover over elements.

Example: 
 
```
@media (hover: hover) {
  /* when hover is supported */
  a:hover {
    color: white;
    background: black;
  }
}

```

## Footnote

Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/hover)"
Explain the **update** CSS media feature,"The `update` CSS media feature can be used to test how frequently (if at all) the output device is able to modify the appearance of content.

**Syntax**
The `update` feature is specified as a single keyword value chosen from the list below.

**`none`** - Once it has been rendered, the layout can no longer be updated. Example: documents printed on paper.

**`slow`** - The layout may change dynamically according to the usual rules of CSS, but the output device is not able to render or display changes quickly enough for them to be perceived as a smooth animation. Examples: e-book readers or severely underpowered devices.

**`fast`** - The layout may change dynamically according to the usual rules of CSS, and the output device is not unusually constrained in speed, so regularly-updating things like CSS Animations can be used. Example: computer screens.

Note: this feature is still considered experimental. Check its [browser compatibility](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/update-frequency#browser_compatibility) before using it.

## Footnote

Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/update-frequency)"
Explain the **overflow-block** CSS media feature,"The `overflow-block` CSS media feature can be used to test how the output device handles content that overflows the initial containing block along the block axis.

**Syntax**
The `overflow-block` feature is specified as a keyword value chosen from the list below.

**`none`** - Content that overflows the block axis is not displayed.

**`scroll`** - Content that overflows the block axis can be seen by scrolling to it.

**`optional-paged`** - Content that overflows the block axis can be seen by scrolling to it, but page breaks can be manually triggered (such as via [`break-inside`](https://developer.mozilla.org/en-US/docs/Web/CSS/break-inside), etc.) to cause the following content to display on the following page.

**`paged`** - Content is broken up into discrete pages; content that overflows one page in the block axis is displayed on the following page.

**NOTE**: support for this feature is still limited. Check its [browser compatibility](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/overflow-block#browser_compatibility) before using it

## Footnote

Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/overflow-block)"
Explain the **scripting** CSS media feature,"The `scripting` CSS media feature can be used to test whether scripting (such as JavaScript) is available.

**Syntax**
The `scripting` feature is specified as a keyword value chosen from the list below.

**`none`** - Scripting is completely unavailable on the current document.

**`initial-only`** - Scripting is enabled during the initial page load, but not afterwards.

**`enabled`** - Scripting is supported and active on the current document.

NOTE: This media feture is part of level 5 specification and not yet supported. Please check [browser compatibility](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/scripting#browser_compatibility) before using it.

## Footnote

Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/scripting)"
Explain the difference between **pointer** and **any-pointer** CSS media features,"The **any-pointer** CSS media feature tests whether the user has any pointing device (such as a mouse) while **pointer** tests the primary pointing device.

Everything else remains the same.

## Footnote

Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/any-pointer)"
Explain the difference between **hover** and **any-hover** CSS media features,"The **any-hover** CSS media feature can be used to test whether any available input mechanism can hover over elements. While **hover** CSS media tests whether the user's primary input mechanism can hover over elements.

Everything else remains the same

## Footnote

Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/any-hover)"
When should you add a break point with CSS Media Queries?,"You should add a breakpoint when your design breaks.

**NOTE**: avoid antipatterns like creating breakpoints for popular devices.

## Footnote

Source [smashingmagazine](https://www.smashingmagazine.com/2018/02/media-queries-responsive-design-2018/#don-t-target-devices-add-breakpoints-when-the-design-breaks)"
Why should you avoid breakpoints based on popular devices?,"Because popular devices change from time to time and from once version to the next version. And you will need to keep updating the breakpoints

For example:

```
@media (width: 320px) { /* iPhone design */ }
@media (width: 320px), (width: 375px) { /* iPhone design */ }
@media (width: 320px), (width: 375px), (width: 414px) { /* iPhone design */ }
```

Instead you should add breakpoints whenever your design breaks/changes

```
@media (width < 20em) { /* narrow design*/ }
```

## Footnote

Source [dotConference/2017](https://www.dotconferences.com/2017/11/florian-rivoal-media-queries-4)"
What units should you use on your Media Queries?,"You should favor **em** units instead of **px** units.

They will give a consistent result if the user has larger text that you expected.

## Footnote

Source [smashingmagazine](https://www.smashingmagazine.com/2018/02/media-queries-responsive-design-2018/#it-s-not-all-about-pixels)"
How can you do progressive enhancement with media queries?,"Testing for media features:

```
@media (hover) {
    .can-i-hover::after {
        content: ""You look like you can hover."";    
    } 
}

@media  (hover:none) {
    .can-i-hover::after {
        content: ""I don't think you can hover."";    
    } 
}
```

## Footnote

Source [smashingmagazine](https://www.smashingmagazine.com/2018/02/media-queries-responsive-design-2018/#detecting-pointer-type-rather-than-screen-size)"
How can you negate a Media Query?,"The ***not*** keyword inverts the meaning of an entire media query. It will only negate the specific media query it is applied to. (Thus, it will not apply to every media query in a comma-separated list of media queries.)

The ***not*** keyword can't be used to negate an individual feature query, only an entire media query. The not is evaluated last in the following query:

```
@media not all and (monochrome) {
  /* … */
}
```

The above query is evaluated like this:

```
@media not (all and (monochrome)) {
  /* … */
}
```

As another example, the following media query:

```
@media not screen and (color), print and (color) {
  /* … */
}
```

This means that the above query is evaluated like this:

```
@media (not (screen and (color))), print and (color) {
  /* … */
}
```

## Footnote

Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries#inverting_a_querys_meaning)"

Question,Answer
containment,containment
What does CSS containment do?,"CSS containment improves the performance of web pages by allowing the browser to isolate a subtree of the page from the rest of the page. If the browser knows that a part of the page is independent from the rest of the content, rendering can be optimized and performance improved.

The [`contain`](https://developer.mozilla.org/en-US/docs/Web/CSS/contain) and [`content-visibility`](https://developer.mozilla.org/en-US/docs/Web/CSS/content-visibility) properties enable developers to inform user agents whether or not an element should render its contents at all, and whether it should render its contents when it is offscreen. The user agent then applies containment to elements when appropriate, potentially deferring layout and rendering until needed.

## Footnote

[""Using CSS containment - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_containment/Using_CSS_containment) Retrieved April 18, 2024."
`contain` CSS property,"The `contain` CSS property indicates that an element and its contents are, as much as possible, independent from the rest of the document tree. Containment enables isolating a subsection of the DOM, providing performance benefits by limiting calculations of `layout`, `style`, `paint`, `size`, or any combination to a DOM subtree rather than the entire page. Containment can also be used to scope CSS counters and quotes.

**Note**: using `layout`, `paint`, `strict` or `content` values for this property creates:

* A new [containing block](https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block) (for the descendants whose `position` property is `absolute` or `fixed`).
* A new [stacking context](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_positioned_layout/Understanding_z-index/Stacking_context).
* A new [block formatting context](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_display/Block_formatting_context).

**Syntax**

```
/* Keyword values */
contain: none;
contain: strict;
contain: content;
contain: size;
contain: inline-size;
contain: layout;
contain: style;
contain: paint;

/* Multiple keywords */
contain: size paint;
contain: size layout paint;
contain: inline-size layout;
```

**Values**

The `contain` property can have any of the following values:

* The keyword `none` or
* One or more of the space-separated keywords `size` (or `inline-size`), `layout`, `style`, and `paint` in any order or
* One of the shorthand values `strict` or `content`

The keywords have the following meanings:

* `none` - The element renders as normal, with no containment applied.
* `strict` - All containment rules are applied to the element. This is equivalent to `contain: size layout paint style`.
* `content` - All containment rules except size are applied to the element. This is equivalent to `contain: layout paint style`.
* `size` - Size containment is applied to the element in both the inline and block directions. The size of the element can be computed in isolation, ignoring the child elements. This value cannot be combined with `inline-size`.
* `inline-size` - Inline size containment is applied to the element. The inline size of the element can be computed in isolation, ignoring the child elements. This value cannot be combined with `size`.
* `layout` - The internal layout of the element is isolated from the rest of the page. This means nothing outside the element affects its internal layout, and vice versa.
* `style` - For properties that can affect more than just an element and its descendants, the effects don't escape the containing element. Counters and quotes are scoped to the element and its contents.
* `paint` -  Descendants of the element don't display outside its bounds. If the containing box is offscreen, the browser does not need to paint its contained elements — these must also be offscreen as they are contained completely by that box. If a descendant overflows the containing element's bounds, then that descendant will be clipped to the containing element's border-box.

## Footnote

[""`contain` - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/contain) Retrieved April 19, 2024."
Explain `contain: paint;`,"Paint containment is achieved with 

```
contain: paint;
```

Applying that CSS rule to an element will prevent descendants of the element from displaying outside its bounds. 
If the element's containing box is offscreen, the browser does not need to paint its contained elements.

Example:

The following example shows how to use contain: paint to prevent an element's descendants from painting outside of its bounds.

CSS

```
div {
  width: 100px;
  height: 100px;
  background: red;
  margin: 10px;
  font-size: 20px;
}
```

HTML

```
<div style=""contain: paint"">
  <p>This text will be clipped to the bounds of the box.</p>
</div>
<div>
  <p>This text will not be clipped to the bounds of the box.</p>
</div>
```

## Footnote

[""Paint containment"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/contain#paint_containment) Retrieved April 19, 2024."
Explain `contain: layout;`,"The `layout` containment value informs the browser that none of the element’s descendants affect other elements on the page, nor do those other elements have any effect on the descendants of the contained element. This allows the browser to potentially reduce the number of calculations necessary when creating the page layout

Another benefit is that if the contained element is off-screen or obscured in some way, then the browser may delay or shift related calculations to a lower priority. An example of this is a contained element not in view at the end of a block element and the beginning of that block element is visible.

An element with layout containment becomes a containing box for positioned descendants — such as elements with absolute positioning. The element receives a new stacking context in relation to the page and the `z-index` property can be used. Although, directional properties, such as `top` or `left`, do not apply.

## Footnote

[ ""contain layout | CSS-Tricks""].](https://css-tricks.com/almanac/properties/c/contain/) Retrieved May 27, 2024."
Explain `contain: style;`,"Style containment scopes [`counters`](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_counter_styles/Using_CSS_counters) and [`quotes`](https://developer.mozilla.org/en-US/docs/Web/CSS/quotes) to the contained element. For CSS counters, the [`counter-increment`](https://developer.mozilla.org/en-US/docs/Web/CSS/counter-increment) and [`counter-set`](https://developer.mozilla.org/en-US/docs/Web/CSS/counter-set) properties are scoped to the element as if the element is at the root of the document.

## Footnote

[""Style containment"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/contain#style_containment) Retrieved April 20, 2024."
`contain-intrinsic-block-size` CSS [logical property](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_logical_properties_and_values),"The `contain-intrinsic-block-size` CSS [logical property](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_logical_properties_and_values) defines the block size of an element that a browser can use for layout when the element is subject to [size containment](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_containment#size_containment).

Block size is the size of an element in the dimension perpendicular to the flow of text within a line. In a horizontal [writing mode](https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode) like standard English, block size is the vertical dimension (height); in a vertical writing mode, block size is the horizontal dimension.

**Syntax**

```
/* Keyword values */
contain-intrinsic-block-size: none;

/* <length> values */
contain-intrinsic-block-size: 1000px;
contain-intrinsic-block-size: 10rem;

/* auto <length> */
contain-intrinsic-block-size: auto 300px;
```

**Values**
The following values can be specified for the intrinsic block size of an element:

* `none` - The element has no intrinsic block size.
* `<length>` - The element has the specified block size, expressed using the ([`<length>`](https://developer.mozilla.org/en-US/docs/Web/CSS/length)) data type.
* `auto <length>` - When the element is in size containment and skipping its contents (for example, when it is offscreen and `content-visibility: auto` is set) the block size is remembered from the actual size of the element when it was last able to render its child elements. If the element has never rendered its child elements and hence has no remembered value for the normally rendered element size, or if it is not skipping its contents, the block size is the specified `<length>`.

## Footnote

[""`contain-intrinsic-block-size` - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/contain-intrinsic-block-size) Retrieved April 22, 2024."
`contain-intrinsic-height` CSS property,"The `contain-intrinsic-height` CSS property sets the height of an element that a browser can use for layout when the element is subject to [size containment](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_containment#size_containment).

**Syntax**

```
/* Keyword values */
contain-intrinsic-height: none;

/* <length> values */
contain-intrinsic-height: 1000px;
contain-intrinsic-height: 10rem;

/* auto <length> */
contain-intrinsic-height: auto 300px;
```

**Values**
The following values may be specified for an element.

* `none` - The element has no intrinsic height.
* `<length>` - The element has the specified height ([`<length>`](https://developer.mozilla.org/en-US/docs/Web/CSS/length)).
* `auto <length>` - A remembered value of the ""normally rendered"" element height if one exists and the element is skipping its contents (for example, when it is offscreen); otherwise the specified `<length>`.

## Footnote

[""contain-intrinsic-height - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/contain-intrinsic-height) Retrieved April 23, 2024."
`contain-intrinsic-width` CSS property,"The `contain-intrinsic-width` CSS property sets the width of an element that a browser will use for layout when the element is subject to [size containment](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_containment#size_containment).

**Syntax**

```
/* Keyword values */
contain-intrinsic-width: none;

/* <length> values */
contain-intrinsic-width: 1000px;
contain-intrinsic-width: 10rem;

/* auto <length> */
contain-intrinsic-width: auto 300px;
```

**Values**

The following values may be specified for an element.

* `none` - The element has no intrinsic width.
* `<length>` - The element has the specified width ([`<length>`](https://developer.mozilla.org/en-US/docs/Web/CSS/length)).
* `auto <length>` - A remembered value of the ""normally rendered"" element width if one exists and the element is skipping its contents (for example, when it is offscreen); otherwise the specified `<length>`.

## Footnote

[""`contain-intrinsic-width` - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/contain-intrinsic-width) Retrieved April 24, 2024."
`contain-intrinsic-size` CSS shorthand property,"The `contain-intrinsic-size` CSS shorthand property sets the size of an element that a browser will use for layout when the element is subject to [size containment](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_containment/Using_CSS_containment#size_containment).

**Constituent properties**

This property is a shorthand for the following CSS properties:

[`contain-intrinsic-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/contain-intrinsic-width)
[`contain-intrinsic-height`](https://developer.mozilla.org/en-US/docs/Web/CSS/contain-intrinsic-height)

**Syntax**

```
/* Keyword values */
contain-intrinsic-width: none;

/* <length> values */
contain-intrinsic-size: 1000px;
contain-intrinsic-size: 10rem;

/* width | height */
contain-intrinsic-size: 1000px 1.5em;

/* auto <length> */
contain-intrinsic-size: auto 300px;
contain-intrinsic-size: auto none;

/* auto width | auto height */
contain-intrinsic-size: auto 300px auto 4rem;
```

**Values**

The following values may be specified for the `contain-intrinsic-size` property:

`none` - The element has no intrinsic size in the given dimension(s).

`<length>` The element has the specified [`<length>`](https://developer.mozilla.org/en-US/docs/Web/CSS/length) in the given dimension(s).

`auto [<length> | none]` - A remembered value of the ""normally rendered"" element size if one exists and the element is skipping its contents (for example, when it is offscreen); otherwise the specified `<length>`. The `none` keyword may be used in place of `<length>` where `0px` fixed lengths behave differently than `none` (such as in multi column, or grid layouts).

If one value is provided as a keyword, a length or an `auto [<length> | none]` pair, it applies to both width and height.

Two length values may be specified, which apply to the width and height in that order. If two `auto [<length> | none] `pairs are specified, the first pair applies to the width, and the second to the height.

## Footnote

[""`contain-intrinsic-size` - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/contain-intrinsic-size) Retrieved April 26, 2024."
`contain-intrinsic-inline-size` CSS [logical property](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_logical_properties_and_values),"The `contain-intrinsic-inline-size` CSS [logical property](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_logical_properties_and_values) defines the inline-size of an element that a browser can use for layout when the element is subject to [size containment](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_containment#size_containment).

Inline-size is the size of the element in the dimension parallel to the flow of text within a line. In a horizontal [writing mode](https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode) like standard English, inline size is the horizontal dimension (width); for a vertical writing mode, inline size is the vertical dimension.

The `contain-intrinsic-inline-size` CSS property is commonly applied alongside elements that can trigger size containment, such as [`contain: size`](https://developer.mozilla.org/en-US/docs/Web/CSS/contain) and [`content-visibility`](https://developer.mozilla.org/en-US/docs/Web/CSS/content-visibility).

**Syntax**

```
/* Keyword values */
contain-intrinsic-inline-size: none;

/* <length> values */
contain-intrinsic-inline-size: 1000px;
contain-intrinsic-inline-size: 10rem;

/* auto <length> */
contain-intrinsic-inline-size: auto 300px;
contain-intrinsic-inline-size: unset;
```

**Values**
The following values can be specified for the intrinsic inline size of an element:

* `none` - The element has no intrinsic inline-size.
* `<length>` - The element has the specified inline-size ([`<length>`](https://developer.mozilla.org/en-US/docs/Web/CSS/length)).
* `auto <length>` - When the element is in size containment and skipping its contents (for example, when it is offscreen and `content-visibility: auto` is set) the inline size is remembered from the actual size of the element when it was last able to render its child elements. If the element has never rendered its child elements and hence has no remembered value for the normally rendered element size, or if it is not skipping its contents, the inline size is the specified `<length>`.

## Footnote

[""`contain-intrinsic-inline-size` - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/contain-intrinsic-inline-size) Retrieved April 26, 2024."
`content-visibility` CSS property,"The `content-visibility` CSS property controls whether or not an element renders its contents at all, along with forcing a strong set of containments, allowing user agents to potentially omit large swathes of layout and rendering work until it becomes needed. It enables the user agent to skip an element's rendering work (including layout and painting) until it is needed — which makes the initial page load much faster.

Note: The [`contentvisibilityautostatechange`](https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event) event fires on any element with `content-visibility: auto` set on it when its rendering work starts or stops being skipped. This provides a convenient way for an app's code to start or stop rendering processes (e.g. drawing on a [`<canvas>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas)) when they are not needed, thereby conserving processing power.

**Syntax**

```
/* Keyword values */
content-visibility: visible;
content-visibility: hidden;
content-visibility: auto;
```

**Values**

`visible`
No effect. The element's contents are laid out and rendered as normal.

`hidden`
The element [skips its contents](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_containment#skips_its_contents). The skipped contents must not be accessible to user-agent features, such as find-in-page, tab-order navigation, etc., nor be selectable or focusable. This is similar to giving the contents `display: none`.

`auto`
The element turns on layout containment, style containment, and paint containment. If the element is not [relevant to the user](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_containment#relevant_to_the_user), it also skips its contents. Unlike `hidden`, the skipped contents must still be available as normal to user-agent features such as find-in-page, tab order navigation, etc., and must be focusable and selectable as normal.

**Accessibility concerns**
Off-screen content within a `content-visibility: auto` property remains in the document object model and the accessibility tree. This allows improving page performance with `content-visibility: auto` without negatively impacting accessibility.

Since styles for off-screen content are not rendered, elements intentionally hidden with `display: none` or `visibility: hidden` will still appear in the accessibility tree. If you don't want an element to appear in the accessibility tree, use `aria-hidden=""true""`.

**Using auto to reduce rendering cost of long pages**

HTML

```
<section>
  <!-- Content for each section… -->
</section>
<section>
  <!-- Content for each section… -->
</section>
<section>
  <!-- Content for each section… -->
</section>
<!-- … -->
```

CSS
The `contain-intrinsic-size` property adds a default size of `500px` to the `height` and `width` of each section element. After a section is rendered, it will retain its rendered intrinsic size, even when it is scrolled out of the viewport.

```
section {
  content-visibility: auto;
  contain-intrinsic-size: auto 500px;
}
```

## Footnote

[""`content-visibility` - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/content-visibility) Retrieved April 30, 2024."
`container-name` CSS propery,"The `container-name` CSS property specifies a list of query container names used by the [`@container`](https://developer.mozilla.org/en-US/docs/Web/CSS/@container) at-rule in a [container query](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_containment/Container_queries). A container query will apply styles to elements based on the size of the nearest ancestor with a containment context. When a containment context is given a name, it can be specifically targeted using the [`@container`](https://developer.mozilla.org/en-US/docs/Web/CSS/@container) at-rule instead of the nearest ancestor with containment.

**Note**: When using the [`container-type`](https://developer.mozilla.org/en-US/docs/Web/CSS/container-type) and `container-name` properties, the `style` and `layout` values of the [`contain`](https://developer.mozilla.org/en-US/docs/Web/CSS/contain) property are automatically applied.

**Syntax**

```
/* A single name */
container-name: myLayout;

/* Multiple names */
container-name: myPageLayout myComponentLibrary;
```

**Values**

`<container-name>`

A case-sensitive string that is used to identify the container.

The following conditions apply:

* The name can be any valid [`<custom-ident>`](https://developer.mozilla.org/en-US/docs/Web/CSS/custom-ident), but must not equal `default`.
* The name value must not be in quotes.
* The dashed ident intended to denote author-defined identifiers (e.g., `--container-name`) is permitted.
* A list of multiple names separated by a space is allowed.

Examples: 

```
.post-meta {
  container-type: inline-size;
}

.post-excerpt {
  container-type: inline-size;
  container-name: excerpt;
}
```

## Footnote

[""`container-name` - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/container-name) Retrieved May 1, 2024."
Can you use multiple names in `container-name` CSS property?,"Yes, you can provide multiple names to a container context separated by a space:

```
.post-meta {
  container-type: inline-size;
  container-name: meta card;
}
```

This will allow you to target the container using either name in the [`@container`](https://developer.mozilla.org/en-US/docs/Web/CSS/@container) at-rule. This is useful if you want to target the same container with multiple container queries where either condition could be true:

```
@container meta (max-width: 500px) {
  p {
    visibility: hidden;
  }
}

@container card (max-height: 200px) {
  h2 {
    font-size: 1.5em;
  }
}
```

## Footnote

[""Using multiple container names"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/container-name#using_multiple_container_names) Retrieved May 1, 2024."
`container-type` CSS property,"An element can be established as a query container for [container size](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_containment/Container_queries) queries using the `container-type` CSS property.
**Syntax**

```
/* Keyword values */
container-type: normal;
container-type: size;
container-type: inline-size;
```

**Values**

`size`
Establishes a query container for container size queries in both the [inline and block](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_logical_properties_and_values/Basic_concepts_of_logical_properties_and_values#block_and_inline_dimensions) dimensions. Applies `layout` containment, `style` containment, and `size` containment to the container.

Size containment is applied to the element in both the inline and block directions. The `size` of the element can be computed in isolation, ignoring the child elements.

`inline-size`
Establishes a query container for dimensional queries on the [inline axis](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_logical_properties_and_values/Basic_concepts_of_logical_properties_and_values#block_and_inline_dimensions) of the container. Applies `layout`, `style`, and `inline-size` containment to the element.

Inline size containment is applied to the element. The inline size of the element can be computed in isolation, ignoring the child elements.

`normal`
The element is not a query container for any container size queries, but remains a query container for container style queries. Applies `layout` and `style` containment to the element.

## Footnote

[""`container-type` - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/container-type) Retrieved May 2, 2024."
`container` CSS property,"The `container` [shorthand](https://developer.mozilla.org/en-US/docs/Web/CSS/Shorthand_properties) CSS property establishes the element as a query container and specifies the name and type of the [containment context](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_containment/Container_queries#naming_containment_contexts) used in a [container query](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_containment/Container_queries).

**Constituent properties**
This property is a shorthand for the following CSS properties:

[`container-name`](https://developer.mozilla.org/en-US/docs/Web/CSS/container-name)
[`container-type`](https://developer.mozilla.org/en-US/docs/Web/CSS/container-type)

**Syntax**

```
/* <container-name> */
container: my-layout;

/* <container-name> / <container-type> */
container: my-layout / size;
```

**Values**
`<container-name>`
A case-sensitive name for the containment context. More details on the syntax are covered in the [`container-name`](https://developer.mozilla.org/en-US/docs/Web/CSS/container-name) property page.

`<container-type>`
The type of containment context. More details on the syntax are covered in the [`container-type`](https://developer.mozilla.org/en-US/docs/Web/CSS/container-type) property page.

Example:

Establishing inline size containment

Given the following HTML example which is a card component with an image, a title, and some text:

```
<div class=""post"">
  <div class=""card"">
    <h2>Card title</h2>
    <p>Card content</p>
  </div>
</div>
```

The explicit way to create a container context is to declare a container-type with an optional container-name:

```
.post {
  container-type: inline-size;
  container-name: sidebar;
}
```

The container shorthand is intended to make this simpler to define in a single declaration:

```
.post {
  container: sidebar / inline-size;
}
```

You can then target that container by name using the [`@container`](https://developer.mozilla.org/en-US/docs/Web/CSS/@container) at-rule:

```
@container sidebar (min-width: 400px) {
  /* <stylesheet> */
}
```

## Footnote

[""`container` - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/container) Retrieved May 3, 2024."
`@container` CSS at-rule,"The `@container` CSS at-rule is a conditional group rule that applies styles to a [containment context](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_containment/Container_queries#naming_containment_contexts). Style declarations are filtered by a condition and applied to the container if the condition is true. The condition is evaluated when the container size or [`<style-feature>`](https://developer.mozilla.org/en-US/docs/Web/CSS/@container#container_style_queries) value changes.

The [`container-name`](https://developer.mozilla.org/en-US/docs/Web/CSS/container-name) property specifies a list of query container names. These names can be used by `@container` rules to filter which query containers are targeted. The optional, case-sensitive `<container-name>` filters the query containers that are targeted by the query.

Once an eligible query container has been selected for an element, each container feature in the `<container-condition>` is evaluated against that query container.

**Syntax**

The `@container` at-rule has the following syntax:

```
@container <container-condition> {
  <stylesheet>
}
```

For example:

```
@container (width > 400px) {
  h2 {
    font-size: 1.5em;
  }
}
/* with an optional <container-name> */
@container tall (height > 30rem) {
  h2 {
    line-height: 1.6;
  }
}
```

**Values**

`<container-condition>`
An optional `<container-name>` and a `<container-query>`. Styles defined in the `<stylesheet>` are applied if the condition is `true`.

* `<container-name>` - Optional. The name of the container that the styles will be applied to when the query evaluates to true, specified as an [`<ident>`](https://developer.mozilla.org/en-US/docs/Web/CSS/ident).

* `<container-query>` - A set of features that are evaluated against the query container when the size of the container changes.

`<stylesheet>`
A set of CSS declarations.

## Footnote

[""`@container` - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/@container) Retrieved May 4, 2024."
Is it possible to target multiple containers in a single container query?,"It's not possible to target multiple containers in a single container query. It is possible to nest container queries which has the same effect.

The following query evaluates to true and applies the declared style if the container named `summary` is wider than `400px` and has an ancestor container wider than `800px`:

```
@container summary (min-width: 400px) {
  @container (min-width: 800px) {
    /* <stylesheet> */
  }
}
```

## Footnote

[""Nested container queries"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/@container#nested_container_queries) Retrieved May 6, 2024."
list all `@container` CSS descriptors,"The following descriptors can be used within the container condition:

`aspect-ratio`
The [aspect-ratio](https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio) of the container calculated as the width to the height of the container expressed as a [`<ratio>`](https://developer.mozilla.org/en-US/docs/Web/CSS/ratio) value.

`block-size`
The [block-size](https://developer.mozilla.org/en-US/docs/Web/CSS/block-size) of the container expressed as a [`<length>`](https://developer.mozilla.org/en-US/docs/Web/CSS/length) value.

`height`
The height of the container expressed as a [`<length>`](https://developer.mozilla.org/en-US/docs/Web/CSS/length) value.

`inline-size`
The [inline-size](https://developer.mozilla.org/en-US/docs/Web/CSS/inline-size) of the container expressed as a [`<length>`](https://developer.mozilla.org/en-US/docs/Web/CSS/length) value.

`orientation`
The [orientation](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/orientation) of the container, either landscape or portrait.

`width`
The width of the container expressed as a [`<length>`](https://developer.mozilla.org/en-US/docs/Web/CSS/length) value.

## Footnote

[""`@container` descriptors"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/@container#descriptors) Retrieved May 6, 2024."

Question,Answer
floats,floats
What does ***float*** do?,"A `float` pulls an element (often an image) to one side of its container, allowing the document flow to wrap around it. This layout is common in newspapers and magazines, so floats were added to CSS to achieve this effect.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What is the ***double container pattern**?*,"This layout is common for centering content on a page. You can achieve it by placing your content inside two nested containers and then set margins on the inner container to position it within the outer one. Web developer Brad Westfall calls this the *double container pattern.*

It is usually used using 

`< body> . . . < / body>`

as the outer container, which by default is already 100% of the page width, so you won’t have to apply any new styles to it. Inside that, you wrap the entire contents of the page in a

`< div> . . . < / div>`

, which serves as the inner container. To that you’ll apply a max-width and auto margins to center the contents.

```
.container {
  max-width: 1080px;
  margin: 0 auto;
 }
```

By using `max-width` instead of width, the element shrinks to below `1080px` if the screen’s viewport is smaller than that. That is to say, in smaller viewports, the inner container will fill the screen, but on larger ones, it’ll expand to `1080px`. This is important to avoid horizontal scrolling on devices with smaller screens.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What is the height of a block elements that only contains floated elements inside?,"**Cero**, because unlike elements in the normal document flow, floated elements do not add height to their parent elements.

This may seem odd, but it goes back to the original purpose of floats. Floats are intended to allow text to wrap around them. When you float an image inside a paragraph, the paragraph does not grow to contain the image. This means, if the image is taller than the text of the paragraph, the next paragraph will start immediately below the text of the first, and the text in both paragraphs will wrap around the float.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What does `clear: both` declaration do?,"Causes the element to move below the bottom of floated elements, rather than beside them. You can give this property the value `left` or `right` to clear only elements floated to the left or right, respectively.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What is a ***pseudo-element***?,"***Pseudo-element -*** Special selectors that target certain parts of the document. These begin with a double-colon (`::`) syntax, though most browsers also support a single-colon syntax for backward compatibility. The most common pseudo-elements are `::before` and `:after`, which are used to insert content at the beginning or end of an element.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What is a **clearfix**?,"[The clearfix](https://css-tricks.com/snippets/css/clear-fix/), for those unaware, is a CSS hack that solves a behavior that occurs when two floated elements are stacked next to each other. When elements are aligned this way, the parent container ends up with a `height` of `0`, and it can easily wreak havoc on a layout.

**NOTE**: it is not a bug but the desired behaviour of the original purpose of floats. Left as is for the correctness of the quote.

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/clearfix-a-lesson-in-web-development-evolution/#:~:text=The%20clearfix%2C%20for%20those%20unaware,wreak%20havoc%20on%20a%20layout.)"
"What is the “problem” with this clearfix ruleset?

```
 .clearfix::after {
  display: block;
  content: "" "";
  clear: both;
 }
```","One inconsistency with this *clearfix* remains: Margins of floated elements inside won’t collapse to the outside of the clear fixed container; but, margins of non-floated elements will collapse as normal. Some developers prefer to use a modified version of the *clearfix* that will contain all margins because it can be slightly more predictable.

```
 .clearfix::before,
 .clearfix::after {
  display: table;
  content: "" "";
 }

 .clearfix::after {
  clear: both;
 }
```

This version makes use of `display: table` rather than `display: block`. By applying this to both the `::before` and `::after` pseudo-elements, you’ll contain any child elements’ margins at both the top and bottom of the container.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What is the future of the *clearfix*?,"These days, almost 15 years after it was first proposed, the clearfix is losing a bit of relevance. [CSS Grid](https://css-tricks.com/snippets/css/complete-guide-grid/) and [Flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/) are filling in the gaps for advanced layout on the web. In January of 2017, Rachel Andrew wrote an article for her blog titled [“The end of the clearfix hack?”](https://www.rachelandrew.co.uk/archives/2017/01/24/the-end-of-the-clearfix-hack/) In it, she describes a way to replace the clearfix hack with a single line of code using a new display mode rule known as flow-root.

```
.container {
  display: flow-root;
}
```

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/clearfix-a-lesson-in-web-development-evolution/#:~:text=The%20clearfix%2C%20for%20those%20unaware,wreak%20havoc%20on%20a%20layout.)"
What does ***display: flow-root*** do?,"*“The element generates a block container box, and lays out its contents using flow layout. It always establishes a new block formatting context for its contents.”*

The key use of this comes when you have a box with a floated element inside it, and the floated element is taller than the other content inside the box. Default behaviour is that the box will not clear the float, and anything that comes afterwards will also wrap the floated item. The floated element is out of flow causing the box to collapse. The typical way we have solved this issue is to use a [clearfix hack](https://css-tricks.com/clearfix-a-lesson-in-web-development-evolution/#:~:text=The%20clearfix%2C%20for%20those%20unaware,wreak%20havoc%20on%20a%20layout.).

Using `display: flow-root` on an element will perform this clearing for us. Instead of needing to apply the clearfix hack we can use the CSS display property on the container with a value of flow-root.

```
 .container {
   display: flow-root;
 }
```

The border then clears the float and following content displays after our contained floated element.

**NOTE**: support is limited to modern browsers. Check [caniuse](https://caniuse.com/flow-root) before using it.

## Footnote

*Source* [*rachelandrew.co.uk*](https://rachelandrew.co.uk/archives/2017/01/24/the-end-of-the-clearfix-hack/)"
What is a **Block Formatting Context (BFC)**?,"Everything on a page is part of a **formatting context**, or an area which has been defined to lay out content in a particular way. A **block formatting context** (BFC) will lay child elements out according to block layout rules, a **flex formatting context** will lay its children out as [_flex items_](https://developer.mozilla.org/en-US/docs/Glossary/Flex_Item), etc. Each formatting context has specific rules about how layout behaves when in that context.

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flow_Layout/Intro_to_formatting_contexts)"
What are the properties of a **Block Formatting Context (BFC)**?,"A block formatting context (sometimes called a ***BFC***) is a region of the page in which elements are laid out. A block formatting context itself is part of the surrounding document flow, but it isolates its contents from the outside context. This isolation does three things for the element that establishes the BFC:

1. It contains the top and bottom margins of all elements within it. They won’t collapse with margins of elements outside of the block formatting context.
2. It contains all floated elements within it.
3. It doesn’t overlap with floated elements outside the BFC.

Put simply, **the contents inside a block formatting context will not overlap or interact with elements on the outside as you would normally expect**. If you apply `clear` to an element, it’ll only clear floats within its own BFC. And, if you force an element to have a new BFC, it won’t overlap with other BFCs.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
How can you create a **Block Formatting Context (BFC)**?,"Any block-level element can be made to create a BFC by the application of certain CSS properties.
A new BFC is created in the following situations:

* elements made to float using [`float`](https://developer.mozilla.org/en-US/docs/Web/CSS/float)
* [absolutely positioned](https://developer.mozilla.org/en-US/docs/Web/CSS/position#types_of_positioning) elements
* elements with [`display: inline-block`](https://developer.mozilla.org/en-US/docs/Web/CSS/display#inline-block)
* table cells or elements with `display: table-cell`, including anonymous table cells created when using the `display: table-\*` properties
* table captions or elements with `display: table-caption`
* block elements where `overflow` has a value other than `visible`
* elements with `display: flow-root` or `display: flow-root list-item`
* elements with [`contain: layout`](https://developer.mozilla.org/en-US/docs/Web/CSS/contain#layout), `content`, or `strict`
* [*flex items*](https://developer.mozilla.org/en-US/docs/Glossary/Flex_Item)
* grid items
* [multicol containers](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Columns/Basic_Concepts_of_Multicol)
* elements with [`column-span`](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span) set to `all`

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flow_Layout/Intro_to_formatting_contexts)"
Can you describe the media object pattern by Nicolle Sullivan?,"The media object is an image to the left, with descriptive content to the right. The content area on the right can contain any other objects. Text, lists, grids, or even other media objects inside.

Implementation details with flex

The **HTML**:

```
<div class=block"">
  <img src=""https://picsum.photos/200/200/"" alt=""random""/>
  <div>
     <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Nisi voluptate iure nostrum debitis quae nihil, id fugiat consequatur quo, laborum, non eligendi dolore expedita minima voluptates repudiandae</p>
   </div>
</div>
```

The **CSS**:

```
 .block {
  display: flex;
  align-items: flex-start;
  padding: 1rem;
 }

 .block > img {
  margin: 0 1rem 0 0;
  /* Below styles are optional. They will ensure all media object images have the same img and the aspect ration of the img will be preserved */
  width: 5rem;
  height: 5rem; 
  object-fit: cover;
 }

 .block > div {
  flex: 1;
 }
```

## Footnote

*Source* [*www.stubbornella.org*](www.stubbornella.org) *&* [*css-tricks*](https://css-tricks.com/almanac/properties/o/object-fit/)"
What are the css hacks to target old versions of IE?,"The property CSS ""hacks"" used to target specific versions of Internet Explorer.

**Property hacks**

```
 selector { 
   property: value; /* all browsers  */ 
   property: value\9; /* < IE9 */ 
   *property: value; /* < IE8 */ 
   _property: value; /* < IE7 */
 }
```

**Conditional stylesheets**

```
<link rel=""stylesheet"" type=""text/css"" media=""screen"" href=""css/style.css"">
<!--[if IE 7]><link rel=""stylesheet"" type=""text/css"" media=""screen"" href=""css/ie7.css"" \> <![endif]-->
<!--[if IE 6]><link rel=""stylesheet"" type=""text/css"" media=""screen"" href=""css/ie6.css"" \> <![endif]-->
```

Generally speaking you should [_avoid CSS hacks in favor of conditional classes on HTML_](http://www.paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither/).

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
Define a simple 12 column float grid system,"The HTML:

```
<div class=""row"">
 <div class=""column-1"" \>1 column\</div>
 <div class=""column-1"" \>1 column\</div>
 <div class=""column-1"" \>1 column\</div>
 <div class=""column-1"" \>1 column\</div>
 <div class=""column-1"" \>1 column\</div>
 <div class=""column-1"" \>1 column\</div>
 <div class=""column-2"" \>2 column\</div>
 <div class=""column-2"" \>2 column\</div>
 <div class=""column-2"" \>2 column\</div>
</div>
<div class=""row"">
 <div class=""column-4"" \>4 column\</div>
 <div class=""column-8"" \>8 column\</div>
</div>
```

The CSS:

```
 .row::after {
  content: "" "";
  display: block;
  clear: both;
 }

 /* Targets all elements with a class attribute that includes “column-” */
 [class\=""column-""] {
  float: left;
 }

 .column-1 { width: 8.3333%; } /* 1/12 */
 .column-2 { width: 16.6667%; } /* 2/12 */
 .column-3 { width: 25%; } /* 3/12, and so on . . . */
 .column-4 { width: 33.3333%; }
 .column-5 { width: 41.6667%; }
 .column-6 { width: 50%; }
 .column-7 { width: 58.3333%; }
 .column-8 { width: 66.6667%; }
 .column-9 { width: 75%; }
 .column-10 { width: 83.3333%; }
 .column-11 { width: 91.6667% }
 .column-12 { width: 100%; }
```

**NOTE**: The attribute selector ( `[class*=""column-""]` ) casts a wider net than you’ll need, as it also targets something like a `<div class=""column-header"" >`. It’d be best to consider “column” in a class name as a sort of reserved word from here on out so you don’t collide with these rules.

One thing the grid system still lacks is a gutter between each column. You can create gutters by adding left and right padding to each grid column. By adding this to the grid system instead of individual components, you’ll be able to re-use the grid over and over on other pages without worrying about gutters again.

```
 [class\=""column-""] {
  float: left;
  /* Adds .75 em left and right padding to each column element */
  padding: 0 0.75em;
  margin-top: 0; /* Removes top margins from columns */
 }
```

The extra padding in the columns would misalign by 0.75 em with the rest of the content You could solve this issue by stretching the rows on the sides

```
.row {
  margin-left: -0.75em;
  margin-right: -0.75em;
 }
```

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"

Question,Answer
flexbox,flexbox
What is ***flexbox***?,"The Flexible Box Module, usually referred to as *flexbox*, was designed as a one-dimensional layout model, and as a method that could offer space distribution between items in an interface and powerful alignment capabilities. 

 When we describe flexbox as being one dimensional we are describing the fact that flexbox deals with layout in one dimension at a time — either as a row or as a column. This can be contrasted with the two-dimensional model of [_CSS Grid Layout_](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout), which controls columns and rows together.

Flexbox is unlike previous display values (`inline`, `inline-block`, and so on), which only affect the elements they are applied to. Instead, a flex container asserts control over the layout of the elements within.

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox)"
What does ***display: flex;*** do to an element?,"Applying `display: flex;` to an element turns it into a *flex container*, and its direct children turn into *flex items*.

* The flex container fills the available `width` like a block element.
* The flex items may not necessarily fill the `width` of their flex container.
* The flex items are all the same `height`, determined naturally by their contents.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What does ***display: inline-flex*** do to an element?,"`display: inline-flex` creates a flex container that behaves more like an `inline-block` element rather than a `block`. It flows inline with other inline elements, but it won’t automatically grow to 100% width. Flex items within it generally behave the same as with `display: flex`.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
How can you create a **flex container**?,"By applying

```
display: flex;
```

to the container element, it becomes a `fex container`. Its child elements will become the same height by default.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What are the two axes of **flexbox**?,"When working with **flexbox** you need to think in terms of two axes — the ***main axis*** and the ***cross axis***. The main axis is defined by the [_flex-direction_](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction) property, and the cross axis runs perpendicular to it.

## Footnote

*source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox#the_two_axes_of_flexbox)"
How do you define **flexbox**'s main axis?,With the [`flex-direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction) property.
What are the possible values of the **flex-direction** property?,"* `row` - Main axis will run along the row in the inline direction (same as writing mode, left-to-right for english). 
* `row-reverse` - Main axis will run along the row in the reverse inline direction (reverse of writing mode, right-to-left for english).
* `column` - Main axis will run from the top of the page to the bottom — in the block direction.
* `column-reverse` - Main axis will run from the bottom of the page to the top — in the reverse block direction.

## Footnote

Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction#values)"
What is the ***flexbox cross axis*** if you define the main axis with `flex-direction: row/row-reverse;`?,"The *cross axis* runs perpendicular to the main axis, therefore if your `flex-direction` (main axis) is set to `row` or `row-reverse` the cross axis runs down the columns.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What is the ***flexbox cross axis*** if you define fine the main axis with `flex-direction: column/column-reverse;`?,"If your main axis is `column` or `column-reverse` then the cross axis runs along the rows.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What is a ***flex item***?,"The direct children of a [_Flex Container_](https://developer.mozilla.org/en-US/docs/Glossary/Flex_Container) (elements with `display: flex` or `display: inline-flex` set on them) become **flex items**.

Continuous runs of text inside flex containers will also become flex items.

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Glossary/Flex_Item)"
What are the peculiarities of **flexbox start/end** of lines?,"If the **flex-direction** is **row** and I am working in **English**, then the start edge of the main axis will be on the **left**, the end edge on the **right**.

If I were to work in **Arabic**, then the start edge of my main axis would be on the **right** and the end edge on the **left**.

After a while, thinking about start and end rather than left and right becomes natural, and will be useful to you when dealing with other layout methods such as CSS Grid Layout which follow the same patterns.

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox#start_and_end_lines)"
What is a ***flex container***?,"An area of a document laid out using *flexbox* is called a **flex container**. To create a flex container, we set the value of the area's container's `display` property to `flex` or `Inline-flex`.

```
.container {
 display: flex;
}
```

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox#the_flex_container)*"
What does `flex-wrap: wrap` do?,"If you add `flex-wrap` with a value of `wrap` to the flex container. Should your items be too large to all display in one line, they will wrap onto another line. 

**NOTE:** If the `flex-direction` is `column` or `column-reverse`, then `flex-wrap: wrap` will allow the flex items to overflow into a new column. However, this only happens if something constrains the `height` of the container; otherwise, it grows to contain its flex items.

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox#multi-line_flex_containers_with_flex-wrap)"
What does `flex-wrap: nowrap` do?,"If `flex-wrap` is set to `nowrap`, which is also the initial value, and the flex-items will shrink to fit the container because they are using initial flexbox values that allows items to shrink.

**NOTE**: Using `nowrap` would cause an overflow if the items were not able to shrink, or could not shrink small enough to fit.

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox#multi-line_flex_containers_with_flex-wrap)"
What are the possible values of ***flex-wrap***?,"`flex-wrap` accepts the following values:

* `nowrap` - The flex items are laid out in a single line which may cause the flex container to overflow. This is the default value.

* `wrap` - The flex items break into multiple lines.

* `wrap-reverse` - Behaves the same as wrap but `cross-start` and `cross-end` are permuted.

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap)"
What does the ***flex-flow*** property set and what are its default values?,"The `flex-flow` CSS shorthand property specifies the direction of a flex container, as well as its wrapping behaviour.
This property is a shorthand for the following CSS properties:

[flex-direction](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction)
[flex-wrap](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap)

Its initial values are: 

```
flex-direction: row;
flex-wrap: nowrap;
```
example: `flex-flow: row nowrap;`

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-flow)"
What properties can be applied to *flex-items*?,"* [`flex-grow`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-grow) : sets the flex grow factor of a flex item's [main size](https://www.w3.org/TR/css-flexbox/#main-size)
* [`flex-shrink`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-shrink): sets the flex shrink factor of a flex item. If the size of all flex items is larger than the flex container, items shrink to fit according to flex-shrink.
* [`flex-basis`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-basis) : sets the initial [main size](https://www.w3.org/TR/css-flexbox/#main-size) of a flex item. It sets the size of the content box unless otherwise set with [box-sizing](https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing).

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox#properties_applied_to_flex_items)"
What does **flex-basis** property do?,"The `flex-basis` CSS property sets the initial main size of a flex item. Size is calculated with content box rules unless otherwise set with `box-sizing` property.

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-basis)"
What are the possible values of **flex-basis**?,"The `flex-basis` CSS property sets the initial main size of a flex item. It sets the size of the content box unless otherwise set with [`box-sizing`](https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing). Its possible values are:

* `0` (cero) - the flex item initial width will be the width of the content
* `auto` (initial value) - The browser looks to see if the items have a size (width/height). If the items don't have a size then the content's size is used as the `flex-basis`.

* fixed size for example `200px` - the initial width of the component will be whatever size we've set

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-basis)"
What does ***flex-grow*** property do?,"With the `flex-grow` property set to a positive integer, flex items can grow along the main axis from their `flex-basis`. This will cause the item to stretch and take up any available space on that axis, or a proportion of the available space if other items are allowed to grow too.

If we gave all of our items a `flex-grow` value of `1` then the available space in the flex container would be equally shared between our items and they would stretch to fill the container on the main axis.

The `flex-grow` property can be used to distribute space in proportion. If we give our first item a `flex-grow` value of `2`, and the other items a value of `1` each, `2` parts of the available space will be given to the first item, `1` part each the other items.

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox#the_flex-grow_property)"
What are the possible values of ***flex-grow***?,"[`<numbers>`](https://developer.mozilla.org/en-US/docs/Web/CSS/number). Negative values are invalid. Defaults to 0.

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-grow)"
What are the possible values of ***flex-shrink***?,"[`<numbers>`](https://developer.mozilla.org/en-US/docs/Web/CSS/number). Negative values are invalid. Defaults to `1`.

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-shrink)"
what does the ***flex-shrink*** property do?,"The `flex-shrink` property controls how space is taken away. 

If we do not have enough space in the container to lay out our items, and `flex-shrink` is set to a positive integer, then the item can become smaller than the `flex-basis`.

Different values can be assigned in order to cause one item to shrink faster than others — an item with a higher value set for `flex-shrink` will shrink faster than its siblings that have lower values.

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox#the_flex-shrink_property)"
What does the ***flex*** shorthand property set and what are its initial values?,"The `flex` shorthand allows you to set the three values in this order — `flex-grow, flex-shrink, flex-basis`. 
And its initial values are: 

```
 flex-grow: 0;
 flex-shrink: 1;
 flex-basis: auto;
```

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/flex)"
What are the possible values of ***flex*** shorthand property?,"* `initial` - The item is sized according to its width and height properties. It shrinks to its minimum size to fit the container, but does not grow to absorb any extra free space in the flex container. This is equivalent to setting `flex: 0 1 auto`.

* `auto` - The item is sized according to its width and height properties, but grows to absorb any extra free space in the flex container, and shrinks to its minimum size to fit the container. This is equivalent to setting `flex: 1 1 auto`.

* `none` - The item is sized according to its width and height properties. It is fully inflexible: it neither shrinks nor grows in relation to the flex container. This is equivalent to setting `flex: 0 0 auto`.

* `<flex-grow>` - Defines the `flex-grow` of the flex item. Negative values are considered invalid. Defaults to `1` when omitted. (`initial` is `0`)

* `<flex-shrink>` - Defines the `flex-shrink` of the flex item. Negative values are considered invalid. Defaults to `1` when omitted. (`initial` is `1`)

* `<flex-basis`> - Defines the `flex-basis` of the flex item. A preferred size of `0` must have a unit to avoid being interpreted as a flexibility. Defaults to `0` when omitted. (`initial` is `auto`)

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/flex)"
How can you specify the values of ***flex*** shorthand property?,"The flex property may be specified using one, two, or three values.

**One-value syntax**- The value must be one of:

 * a `<number>`: In this case it is interpreted as `flex: <number> 1 0;`
 * a `<width>`: In this case it is interpreted as `flex: 1 1 <width>;` 
 * one of the keywords: `none`, `auto`, or `initial`.

***Two-value syntax:***

The first value must be:

 * a `<number>` and it is interpreted as `flex-grow` value

The second value must be one of:

 * a `<number>`: then it is interpreted as `flex-shrink` value
 * a valid value for `width`: then it is interpreted as `flex-basis` value

***Three-value syntax*** - the values must be in the following order:

 * a `<number>` for `flex-grow`.
 * a `<number>` for `flex-shrink`.
 * a valid value for width for `flex-basis`.

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/flex)"
What does ***align-items*** property do?,"In *flexbox*, it controls the alignment of items on the Cross Axis. In *Grid Layout*, it controls the alignment of items on the Block Axis within their grid area.

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items)"
What are the possible values of ***align-items*** property?,"The align-items property accepts 5 different values:

* **flex-start**: cross-start margin edge of the items is placed on the cross-start line
* **flex-end**: cross-end margin edge of the items is placed on the cross-end line
* **center**: items are centered in the cross-axis
* **baseline**: items are aligned such as their baselines align
* **stretch** (*default*): stretch to fill the container (still respect min-width/max-width)

**Note:** If you check [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items) you'll see that there are other possible values but, the ones listed above are most common ones.

## Footnote

*Source* [*CSS-Tricks*](https://css-tricks.com/almanac/properties/a/align-items/)"
What does CSS ***justify-content*** property do?,"The CSS ***justify-content*** property defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container.

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content)"
What are the possible values of ***justify-content*** property?,"The ***justify-content*** property accepts five different values:

* **flex-start** (**default**): items are packed toward the start line
* **flex-end**: items are packed toward to end line
* **center**: items are centered along the line
* **space-between**: items are evenly distributed in the line; first item is on the start line, last item on the end line
* **space-around**: items are evenly distributed in the line with equal space around them
* **space-evenly**: items are distributed so that the spacing between any two adjacent alignment subjects, before the first alignment subject, and after the last alignment subject is the same

**Note:** If you check [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content#values) you'll see that there are other possible values. But the ones above are the most common ones.

## Footnote

*Source* [*CSS-Tricks*](https://css-tricks.com/almanac/properties/j/justify-content/)"
What sets the base size of a **flex-item**?,"1. Is `flex-basis` set to `auto`, and does the item have a `width` set? If so, the size will be based on that width.
2. Is `flex-basis` set to `auto` or `content` (in a supporting browser)? If so, the size is based on the item size.
3. Is `flex-basis` a length unit, but not zero? If so this is the size of the item.
4. Is `flex-basis` set to `0`? if so then the item size is not taken into consideration for the space-sharing calculation.

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Controlling_Ratios_of_Flex_Items_Along_the_Main_Ax#what_sets_the_base_size_of_the_item)"
How can you control the size and flexibility of the flex-items long the main axis?,"With the following CSS properties:

* [**flex-grow**](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-grow): How much of the positive free space does this item get?
* [**flex-shrink**](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-shrink): How much negative free space can be removed from this item?
* [**flex-basis**](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-basis): What is the size of the item before growing and shrinking happens?

You can use the [**flex**](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) shorthand property to define them all at once.

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Controlling_Ratios_of_Flex_Items_Along_the_Main_Ax#what_sets_the_base_size_of_the_item)"
"What should you keep in mind when working with a **vertical flexbox**?
 (**flex-direction: column/column-reverse**)","In CSS, working with height is fundamentally different than working with widths. A flex container will be 100% the available width, but the height is determined naturally by its contents. This behaviour does not change when you rotate the main axis.

The flex container’s height is determined by its flex items. They fill it perfectly. **In a vertical flexbox,** ***flex-grow*** **and** ***flex-shrink*** **applied to the items will have no effect unless something else forces the height of the flex container to a specific size**.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What does CSS **align-content** property do?,"If you enable wrapping (using `flex-wrap`), this property controls the spacing of each row inside the flex container along the cross axis. 

**Note**: This property has no effect on single line flex containers (i.e. ones with `flex-wrap: nowrap`).

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
what are the possible values of **align-content** property?,"The align-content property most common values are:

* `flex-start`: lines packed to the start of the container
* `flex-end`: lines packed to the end of the container
* `center`: lines packed to the center of the container
* `space-between`: lines evenly distributed; the first line is at the start of the container while the last one is at the end
* `space-around`: lines evenly distributed with equal space between them
* `stretch` (default): lines stretch to take up the remaining space

**NOTE**: According to [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-content) there are other possible values. But the ones above are the most common ones.

## Footnote

*Source* [*CSS-Tricks*](https://css-tricks.com/almanac/properties/a/align-content/)"
What does CSS **order** property do?,"By using the ***order*** property, you can change the order the items are stacked. You may specify any integer, positive or negative. If multiple flex items have the same value, they’ll appear according to source order.

Initially, all flex items have an order of `0`. Specifying a value of `-1` to one item will move it to the beginning of the list, and a value of `1` will move it to the end. The numbers don’t necessarily need to be consecutive.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What are the concerns of **order** property?,"**Accessibility concerns**
Using the order property will create a disconnect between the visual presentation of content and DOM order. This will adversely affect users experiencing low vision navigating with the aid of assistive technology such as a screen reader. If the visual (css) order is important, then screen reader users will not have access to the correct reading order.

**User navigation concerns**
Navigation using the Tab key will still follow the source order in most browsers, which can be confusing.

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/order#accessibility_concerns)"
What is the full-page layout problem **FOUC**?,"As the browser loads content, it progressively renders it to the screen, even as it continues to download the remainder of the page. Assume you have a three-column layout, built using a *flexbox* (`flex-direction: row`). If the content for two of these columns loads, the browser might render them before it loads the content for the third column. Then, when the rest of the content loads, the browser recalculates the sizes of each flex item and renders the page again. The user will see a two-column layout momentarily, then the columns will resize (perhaps drastically), and the third column will appear. 

This effect is also known as FOUC (*Flash of Unstyled Content)*. Jake Archibald, a developer advocate for Google Chrome, has written about this at [_https://jakearchibald.com/2014/dont-use-flexbox-for-page-layout/_](https://jakearchibald.com/2014/dont-use-flexbox-for-page-layout/).

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
***flex-start*** and ***flex-end*** compared to ***start*** and ***end***,"`flex-start` and `flex-end` take into account the flex direction while `start` and `end` take into account the writing mode and script direction

For example:

```
.content {
 display: flex;
 flex-direction: row;
}
```

Both `justify-contents: flex-start;` and `justify-contents: start;` will distribute the flex-item starting from the main axis start edge (left side) . But with the following css.

```
.content {
 display: flex;
 flex-direction: row-reverse;
}
```

`justify-contents: flex-start;` will distribute the flex-item starting from the main axis start edge (right side). While and `justify-contents: start;` will distribute the items from the writing mode and script direction start (left side for english speakers)

**Note**: on reverse direction the order of the items will always be reversed it is just the alignment that will change between flex-start and start.

## Footnote

*Source* [*csslayout.new*](https://csslayout.news/whats-the-difference-between-the-alignment-values-of-start-flex-start-and-self-start/)"

Question,Answer
grid,grid
What is the CSS Grid layout?,"The CSS grid lets you define a two-dimensional layout of columns and rows and then place elements within the grid. Some elements may only fill one cell of the grid; others can span multiple columns or rows; could position themselves so they actually overlap and layer, similar to CSS positioned elements.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What is a grid?,"A grid is a set of intersecting horizontal and vertical lines defining columns and rows. Elements can be placed onto the grid within these column and row lines.

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout#what_is_a_grid)"
What are the properties of a **grid**?,"* **Fixed and flexible track sizes** - using `px`, percentages or the new `fr` units.
* **Item placement -** Items can be placed explicitly using line numbers, names or by targeting an area of the grid implicitly.
* **Creation of additional tracks to hold content** - can add additional rows and columns when needed.
* **Alignment control** - can control how the items align once placed into a grid area, and how the entire grid is aligned.
* **Control of overlapping content -** More than one item can be placed into a grid cell or area and they can partially overlap each other.

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout#what_is_a_grid)"
What is a **grid container**?,"The element on which `display: grid` or `display: inline-grid` is applied. It’s the direct parent of all the grid items. In this example container is the grid container.

```
<div class=""container"">
 <div class=""item item-1""> </div>
 <div class=""item item-2""> </div>
 <div class=""item item-3""> </div>
</div>
```

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/snippets/css/complete-guide-grid/#aa-grid-container)"
What is a ***grid item***?,"The children (i.e. direct descendants) of the grid container. Here the item elements are grid items, but sub-item isn’t.

```
<div class=""container"">
  <div class=""item""></div>
  <div class=""item"">
    <p class=""sub-item""></p>
  </div>
  <div class=""item""></div>
</div>
```

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/snippets/css/complete-guide-grid/#aa-grid-item)"
What is a ***grid line***?,"The dividing lines that make up the structure of the grid. They can be either vertical (“column grid lines”) or horizontal (“row grid lines”) and reside on either side of a row or column. Here the yellow line is an example of a column grid line.

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/snippets/css/complete-guide-grid/#aa-grid-line)"
What is a **grid cell**?,"The space between two adjacent row and two adjacent column grid lines. It’s a single “unit” of the grid. Here’s the grid cell between row grid lines 1 and 2, and column grid lines 2 and 3.

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/snippets/css/complete-guide-grid/#aa-grid-cell)"
What is a ***grid track***?,"The space between two adjacent grid lines. You can think of them as the columns or rows of the grid. Here’s the grid track between the second and third-row grid lines.

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/snippets/css/complete-guide-grid/#aa-grid-track)"
What is a ***grid area***?,"The total space surrounded by four grid lines. A grid area may be composed of any number of grid cells. Here’s the grid area between row grid lines 1 and 3, and column grid lines 1 and 3.

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/snippets/css/complete-guide-grid/#aa-grid-area)"
What does the `fr` unit do?,"The `fr` unit allows you to set the size of a track as a fraction of the free space of the grid container. For example, this will set each item to one third the width of the grid container:

```
.container {
  grid-template-columns: 1fr 1fr 1fr;
 }
```

The free space is calculated after any non-flexible items. In this example the total amount of free space available to the `fr` units doesn’t include the `50px`:

```
.container {
  grid-template-columns: 1fr 50px 1fr 1fr;
}
```

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/snippets/css/complete-guide-grid/#aa-grid-template-columnsgrid-template-rows)"
What properties have no effect on a grid-item?,"`float, display: inline-block, display: table-cell, vertical-align and column-*` properties have no effect on a grid item.

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/snippets/css/complete-guide-grid/#aa-properties-for-the-childrengrid-items)"
What are **fr** units?,"***fr units*** essentially mean “fraction of the remaining space”. So a declaration like:

`grid-template-columns: 1fr 3fr;`

Means, loosely, 25% 75%. Except that those percentage values are much more firm than fractional units are. For example, if you added padding to those percentage-based columns, now you’ve broken 100% width (assuming a `content-box` box model).

## Footnote

*Source [css-tricks](https://css-tricks.com/snippets/css/complete-guide-grid/#aa-fr-units)*"
What is an **explicit grid**?,"An **explicit grid** is a manually defined grid. In other words the part of the grid were you define a fixed number of lines and tracks that form the grid by using the properties `grid-template-rows, grid-template-columns,` and `grid-template-areas`.

Example:

```
.grid {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr 1fr;
  grid-template-rows: 100px 100px;
  grid-gap: 20px;
}
```

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/difference-explicit-implicit-grids/#aa-explicit-grids)"
What is an **implicit grid**?,"If there are more grid items than cells in the grid or when a grid item is placed outside of the explicit grid, the grid container automatically generates grid tracks by adding grid lines to the grid. The explicit grid together with these additional implicit tracks and lines forms the so called **implicit grid**.

## Footnote

*Source [css-tricks](https://css-tricks.com/difference-explicit-implicit-grids/#aa-implicit-grids)*"
What is a ***flexible grid***?,"A grid that doesn’t explicitly declare the number of rows or columns, but automatically creates them based on somewhat loose instructions and the content you provide.

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/books/greatest-css-tricks/flexible-grids/)"
Explain why **grid** together with **fr units** make all CSS layout frameworks obsolete,"**Grid and Fr units** are cool because they **remove the need of float based column layouts**.

For a longer explanation please read the following example.

If we want to have a layout of 3 columns of the same width with float we would set a width of 33.333333% with the question being on how may decimals do we need to set.

```
[class*=""column""] {
  float: left;
}

.column { width: 33.333333%; }
```

What if we want to add a gap between the boxes? let's try to set a gab of 2% in between the columns. We will need 2 gaps therefore gap space will be 4%. To do that we need to remove that space from the column widths. (100% - 4%)/3 = 96%/3 = 32%

```
[class*=""column""] {
  float: left;
  padding 0 1%;
}

.column { width: 32.333333%; }

/* Removes the gaps from the sides of the row */
.row {
  margin-left: -1%;
  margin-right: -1%;
}
```

Ok now wee need to think of big screens 2% may be too small let's increase the gap to 3% for screens wider than 1024px. 
Aaaargh we need to redo the math. (100% - 6%)/3 = 94%/3 = 31.333%

And we now need to use media queries :-(

```
@media only screen and (min-width : 1025px) {
  [class*=""column""] {
    float: left;
    padding 0 1.5%;
  }

  .column { width: 31.333%; }

  /* Removes the gaps from the sides of the row */
  .row {
    margin-left: -1.5%;
    margin-right: -1.5%;
  }
}
```

To be honest what we should really use for the gaps is a relative unit like 2em to have the gaps relatives to the typography.

How do we do that?

It will need to be decided at runtime after the viewport is loaded after the viewport width is known. 
And we will need to use calc to do that….

```
[class*=""column""] {
  float: left;
  padding 0 1em;
}

.column { width: calc(100 - 2*2em)/3)%; }

/* Removes the gaps from the sides of the row */
.row {
  margin-left: -1em;
  margin-right: -1em;
}
```

Ok we finally have what we need and it works as long as we stick to the 3 column layout but lets be honest we will need to change the column layout as the screen size changes from one device to another device. 

You can imagine the headache of media queries and calculations that we will needed to solve this problems. And that is the reason we used prefabricated CSS layout frameworks like Twitter bootstrap.

**But now we have grid and fr units!!!!**

We can use 1fr for each column and set a gap of 2em and let the computer deal with the complicated math.

```
.container {
  display: grid;
  grid-template-columns: repeat(auto-fit, 1fr);
  grid-gap: 2em;
}
```

All the above work can be reduce to 3 lines of css and the best part is that it works no matter the number of columns!

## Footnote

*Source [Jen Simmons - layout land](https://www.youtube.com/@LayoutLand)*"
Are content pseudo-elements `::before` and `::after` treated as grid items?,"Yes, they are.

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/collection-interesting-facts-css-grid-layout/#aa-generated-content-pseudo-elements-before-and-after-are-treated-as-grid-items)"
What are the differences between **grid** and **flexbox**?,"The basic difference between CSS Grid Layout and CSS Flexbox Layout is that flexbox was designed for layout in one dimension - either a row or a column. Grid was designed for two-dimensional layout - rows, and columns at the same time.

**One-dimensional versus two-dimensional layout**

A simple example can demonstrate the difference between one- and two-dimensional layouts.

Given this html

```
<div class=""wrapper"">
  < div>One</div>
  < div>Two</div>
  < div>Three</div>
  < div>Four</div>
  < div>Five</div>
 < /div>
```

If we define a flexbox layout and use the `flex-wrap` property to wrap, so that if the space in the container becomes too narrow to maintain the flex basis, items will wrap onto a new row.

```
.wrapper {
  width: 500px;
  display: flex;
  flex-wrap: wrap;
}

.wrapper > div {
  flex: 1 1 150px;
 }
```

Problem is that the columns won't have the same width. If instead we define a grid layout.

```
.wrapper {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
 }
```

The columns will all have the same with.

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Relationship_of_Grid_Layout#one-dimensional_versus_two-dimensional_layout)"
How do you define a grid container as a containing block?,"Adding `position: relative;` to the grid container, just as you would make a containing block for any other absolutely positioned items.

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Relationship_of_Grid_Layout#grid_and_absolutely_positioned_elements)"
When should you use **grid** or **flexbox**?,"**Content out or layout in?**

Flexbox works from the content out. An ideal use case for flexbox is when you have a set of items and want to space them out evenly in a container. You let the size of the content decide how much individual space each item takes up. If the items wrap onto a new line, they will work out their spacing based on their size and the available space on that line.

Grid works from the layout in. When you use CSS Grid Layout you create a layout and then you place items into it, or you allow the auto-placement rules to place the items into the grid cells according to that strict grid. It is possible to create tracks that respond to the size of the content, however, they will also change the entire track.

Ask yourself when deciding between grid or flexbox is:

* Do I only need to control the layout by row or column – use a flexbox
* Do I need to control the layout by row and column – use a grid

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Relationship_of_Grid_Layout#one-dimensional_versus_two-dimensional_layout)"

Question,Answer
grid related,grid related
What are the **sizing keywords**?,"When sizing rows and columns, you can use all the lengths you are used to, like `px, rem, %`, etc, but you also have keywords:

* `min-content`: the minimum size of the content. Imagine a line of text like “E pluribus unum”, the `min-content` is likely the width of the word “pluribus”.
* `max-content`: the maximum size of the content. Imagine the sentence above, the `max-content` is the length of the whole sentence.
* `auto`: this keyword is a lot like `fr` units, except that they “lose” the fight in sizing against `fr` units when allocating the remaining space.
* `fit-content`: use the space available, but never less than `min-content` and never more than `max-content`.
* `fractional units`: They essentially mean “portion of the remaining space”.

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/snippets/css/complete-guide-grid/#aa-sizing-keywords)"
what is a **subgrid**?,"**Subgrid** allows grid items to have a grid of their own that inherits grid lines from the parent grid.

```
.parent-grid {
  display: grid;
  grid-template-columns: repeat(9, 1fr);
}

.grid-item {
  grid-column: 2 / 7;
  display: grid;
  grid-template-columns: subgrid;
}

.child-of-grid-item {
  /* gets to participate on parent grid! */
  grid-column: 3 / 6;
 }
```

It’s also useful to know about [`display: contents;`](https://developer.mozilla.org/en-US/docs/Web/CSS/display). This is not the same as `subgrid`, but it can be a useful tool sometimes in a similar fashion.

```
<div class=""grid-parent"">
 <div class=""grid-item""></div>
 <div class=""grid-item""></div>
 <ul style=""display: contents;"">
 <!-- These grid-items get to participate on the same grid!-->
 <li class=""grid-item""></li>
 <li class=""grid-item""></li>
 </ul>
</div>
```

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/snippets/css/complete-guide-grid/#aa-subgrid)"
Explain ***min-content*** sizing keyword.,"The `min-content` sizing keyword represents the intrinsic minimum width of the content. For text content this means that the content will take all soft-wrapping opportunities, becoming as small as the longest word.

**Syntax**

```
 /* Used as a length */ 
 width: min-content;
 inline-size: min-content;
 height: min-content;
 block-size: min-content;

/* used in grid tracks */
 grid-template-columns: 200px 1fr min-content;
```

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/min-content)"
Explain ***max-content*** sizing keyword.,"The `max-content` sizing keyword represents the intrinsic maximum `width` or `height` of the content. For text content this means that the content will not wrap at all even if it causes overflows.

**Syntax**

```
 /* Used as a length */
 width: max-content;
 inline-size: max-content;
 height: max-content;
 block-size: max-content;

/* used in grid tracks */
 grid-template-columns: 200px 1fr max-content;
```

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/max-content)*"
Explain ***fit-content*** sizing keyword.,"`fit-content` sizing keyword is essentially a shorthand for the following:

```
box {
  width: auto;
  min-width: min-content;
  max-width: max-content;
 }
```

Thus the box sizes with its containing box, but to a minimum of `min-content` and to a maximum of `max-content`.

## Footnote

*Source* [*quirksmode*](https://www.quirksmode.org/blog/archives/2021/04/fitcontent_and.html)"
What does the ***min()*** CSS function do?,"The `min()` CSS function lets you set the smallest (most negative) value from a list of comma-separated expressions as the value of a CSS property value.

It can be used anywhere a `<length>`, `<frequency>`, `<angle>`, `<time>`, `<percentage>`, `<number>`, or `<integer>` is allowed.

The expressions can be math expressions, literal values, or other expressions, such as `attr()`, that evaluate to a valid argument type (like `<length>`).

You can use different units for each value in your expression, if you wish. You may also use parentheses to establish computation order when needed.

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/min)*"
What does the `max()` CSS function do?,"The `max()` CSS function lets you set the largest (most positive) value from a list of comma-separated expressions as the value of a CSS property value.

It can be used anywhere a `<length>`, `<frequency>`, `<angle>`, `<time>`, `<percentage>`, `<number>`, or `<integer>` is allowed.

The expressions can be math expressions, literal values, or other expressions, such as `attr()`, that evaluate to a valid argument type (like `<length>`).

You can use different units for each value in your expression, if you wish. You may also use parentheses to establish computation order when needed.

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/max)"
What does the ***fit-content()*** CSS function do?,"The `fit-content()` CSS function allows an element's size to be as large as the content it wraps, but not larger than the value passed to the `fit-content()` function.

It clamps a given size to an available size according to the formula

```
min(min(max-content, available-size), max(min-content, argument))
```

**Note**: “available-size"" is the available width in the grid.

The `fit-content()` function accepts a `<length>` or a `<percentage>` as an argument.

For example `fit-content(200px)` is equivalent to:

```
min(min(max-content, available-size), max(min-content, 200px));
```

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/fit-content_function)"
What is the difference between ***auto-fill*** and ***auto-fit*** keywords?,"* `auto-fill` -  FILLS the row with as many columns as it can fit. So it creates implicit columns whenever a new column can fit, because it’s trying to FILL the row with as many columns as it can. The newly added columns can and may be empty, but they will still occupy a designated space in the row.
* `auto-fit` - FITS the CURRENTLY AVAILABLE columns into the space by expanding them so that they take up any available space. The browser does that after FILLING that extra space with extra columns (as with auto-fill ) and then collapsing the empty ones.

A useful tip to remember here is that the columns added in both cases (whether collapsed or not) are not implicit columns — that has specific meaning in the spec. In our case, we are adding/creating columns in the explicit grid in the same way as if we declared you wanted 12 columns, for example. So column number `-1` will work to target the end of this grid, which it doesn’t if you are creating columns in the implicit grid. Props to [Rachel Andrew](https://twitter.com/rachelandrew) for this tip.

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/)"
"What is the use of the **""span"" keyword**?","A grid item by default spans a single cell. If you want to change that, the `span` keyword can be quite convenient. For example setting `grid-column-start: 1` and `grid-column-end: span 2` will make the grid item span two cells, from the first to the third line.

You can also use the span keyword with grid-column-start. If you set `grid-column-end: -1` and `grid-column-start: span 2` the grid-item will be placed at the last line and span 2 cells, from the last to third to last line.

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/collection-interesting-facts-css-grid-layout/#aa-using-the-span-keyword-on-grid-column-row-start-and-grid-column-row-end)"
What does `display: contents;` css declaration do?,"The `contents` value of the `display` property is a new value that is described in the Display specification as follows:

""The element itself does not generate any boxes, but its children and pseudo-elements still generate boxes as normal. For the purposes of box generation and layout, the element must be treated as if it had been replaced with its children and pseudo-elements in the document tree.""

If you set an item to `display: contents`, the box it would normally create disappears and the boxes of the child elements appear as if they have risen up a level. 

**NOTE**: this feature is currently supported by all major browser (not IE) but with bugs. Please check its support in [caniuse](https://caniuse.com/css-display-contents) before using it.

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Relationship_of_Grid_Layout#grid_and_display_contents)"
What happens if you set `display: contents` in a grid item or a flex item?,"If you set an item to `display: contents;`, the box it would normally create disappears and the boxes of the child elements appear as if they have risen up a level. This means that children of a grid/flex item can become grid/flex items.

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Relationship_of_Grid_Layout#grid_and_display_contents)"
How can you adjust the grid items **children** to adjust to the grid track?,"By default, each grid item is stretched to fill the entire grid area, but its child elements are not stretched to fill its height by default, so the grid area can have some unused height.

**Solution**

Make each grid-item a flex container with a direction of column so items stack vertically, atop one another. Then apply a flex grow to the child elements, forcing them to stretch to fill the space.

**Extra step for images**

Stretching an image will change its height-to-width ratio, distorting the picture.

Fortunately, CSS provides a special property for controlling this behaviour, `object-fit`. By default, an `<img>` has an `object-fit` value of `fill`, meaning the entire image will be resized to fill the `<img>` element. You can also set other values to change this.

* To expand the image to fill the box (resulting in part of the image being cut off), use `cover`.
* To resize the image so that it fits entirely in the box (resulting in empty space within the box), use `contain`.

For a more detailed look at this property, see [_https://css-tricks.com/on-object-fit-and-object-position/_.](https://css-tricks.com/on-object-fit-and-object-position/.)

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
How can you check if the browser supports grid box model?,"With `@suppors` feature query.

```
@supports (display: grid) {
  ...
 }
```
The `@supports` rule is followed by a declaration in parentheses. If the browser understands the declaration (in this case, it supports grid), it applies any rulesets that appear between the braces. If it doesn’t understand this, it won’t apply them. This means you can provide one set of styles using older layout technologies like floats. These will not necessarily be ideal styles (you’ll have to make some compromises), but it will get the job done.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What are feature queries?,"Feature queries are created using the CSS at-rule `@supports`, and are useful as they give web developers a way to test to see if a browser has support for a certain feature, and then provide CSS that will only run based on the result of that test.

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Conditional_Rules/Using_Feature_Queries)"
How can you add styles for a browser that doesn't support flex or grid box models?,"With:

```
@supports not(display: grid) or not(display: flex) { . . . }
```"
How do you check for support of a feature using feature queries?,"With `@supports` and the feature you want to test support for within parentheses. For example use:

```
@supports (display: flex)
```

to query for flexbox support. Feature queries may be constructed in a few other ways as well:

* `@supports not()` — Only apply rules in the feature query block if the queried declaration isn’t supported
* `@supports () or ()`—Apply rules if either queried declaration is supported
* `@supports () and ()`—Apply rules only if both queried declarations are supported

These can be combined as well to query for more complex situations. The `or` keyword can be useful to query for support using prefixed properties:

```
@supports (display: grid) or (display: -ms-grid)
```

**WARNING** IE doesn’t support the `@supports` rule. That browser ignores any rules within the feature query block, regardless of the actual feature support. This is usually okay, as you’ll want the older browser to render the fallback layout.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What are the possible ***display*** values to define a grid container?,"* `grid` – generates a block-level grid
* `inline-grid` – generates an inline-level grid

```
.container {
 display: grid | inline-grid;
}
```

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/snippets/css/complete-guide-grid/#aa-properties-for-the-parentgrid-container)"
"What's wrong with this css ruleset?

```
.block-element {
  display: contents;
  background-color: red;
  color: red
}
```","Some of the CSS declarations won't be applied. `display: contents;` makes the html element's box disappear. Therefore, all the css declarations that change the style of the element's box wont be applied. Which means that in this css ruleset:

```
.block-element {
  display: contents;
  background-color: red;
  color: red
}
```

CSS declaration `background-color: red` won't be applied because the element's box won't exist. On the other hand `color: red;` declaration will be applied because it is a style meant for the content of the box.

## Footnote

*Source* [*Kevin Powel YT video*](https://www.youtube.com/watch?v=cs37yx73b1o)"

Question,Answer
grid explicit,grid explicit
What is an **explicit grid**?,"An **explicit grid** is a manually defined grid. In other words the part of the grid were you define a fixed number of lines and tracks that form the grid by using the properties `grid-template-rows, grid-template-columns,` and `grid-template-areas`.

Example:

```
.grid {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr 1fr;
  grid-template-rows: 100px 100px;
  grid-gap: 20px;
}
```

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/difference-explicit-implicit-grids/#aa-explicit-grids)"
What do **grid-template-columns** and **grid-template-rows** properties do?,"Define the columns and rows of the grid with a space-separated list of values. The values represent the track size, and the space between them represents the grid line.

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-rows)"
How can you reference **grid-lines**?,"Grid lines are automatically assigned positive numbers from these assignments (`-1` being an alternate for the very last row).
But you can choose to explicitly name the lines. Note the bracket syntax for the line names:

```
 .container {
  grid-template-columns: [first] 40px [line2] 50px [line3] auto [col4-start] 50px [five] 40px [end];
  grid-template-rows: [row1-start] 25% [row1-end] 100px [third-line] auto [last-line];
 }
```

Note that a line can have more than one name. For example, here the second line will have two names: row1-end and row2-start:

```
 .container {
  grid-template-rows: [row1-start] 25% [row1-end row2-start] 25% [row2-end];
 }
```

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/snippets/css/complete-guide-grid/#aa-grid-template-columnsgrid-template-rows)"
How can you define repeating parts on a grid template?,"If your definition contains repeating parts, you can use the `repeat()` notation to streamline things:

```
.container {
  grid-template-columns: repeat(3, 20px [col-start]);
}
```

Which is equivalent to this:

```
.container {
  grid-template-columns: 20px [col-start] 20px [col-start] 20px [col-start];
}
```

If multiple lines share the same name, they can be referenced by their line name and count.

```
.item {
  grid-column-start: col-start 2;
 }
```

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/snippets/css/complete-guide-grid/#aa-grid-template-columnsgrid-template-rows)"
What does ***grid-template-areas*** property do?,"Defines a grid template by referencing the names of the grid areas which are specified with the [grid-area](https://css-tricks.com/snippets/css/complete-guide-grid/#prop-grid-area) property. Repeating the name of a grid area causes the content to span those cells. A period signifies an empty cell. The syntax itself provides a visualisation of the structure of the grid.

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/snippets/css/complete-guide-grid/#aa-grid-template-areas)"
How do you define a ***grid-area*** and use it in a ***grid-template-area***?,"Example:

```
.item-a {
  grid-area: header;
}
.item-b {
  grid-area: main;
}
.item-c {
  grid-area: sidebar;
}
.item-d {
  grid-area: footer;
}

.container {
  display: grid;
  grid-template-columns: 50px 50px 50px 50px;
  grid-template-rows: auto;
  grid-template-areas: 
  ""header header header header""
  ""main main . sidebar""
  ""footer footer footer footer"";
}
```

That’ll create a grid that’s four columns wide by three rows tall. The entire top row will be composed of the header area. The middle row will be composed of two main areas, one empty cell, and one sidebar area. The last row is all footer.

Each row in your declaration needs to have the same number of cells.

You can use any number of adjacent periods to declare a single empty cell. As long as the periods have no spaces between them they represent a single cell.

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/snippets/css/complete-guide-grid/#aa-grid-template-areas)"
What happens to the ***grid-lines*** names when you define the template using ***grid-areas***?,"When you use the `grid-area`s syntax, the lines on either end of the areas are actually getting named automatically.

If the name of your grid area is `foo`, the name of the area’s starting row line and starting column line will be `foo-start`, and the name of its last row line and last column line will be `foo-end`. This means that some lines might have multiple names, such as when several areas start or end.

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/snippets/css/complete-guide-grid/#aa-grid-template-areas)"
What does ***grid-template*** property do?,"A shorthand for setting `grid-template-rows`, `grid-template-columns`, and `grid-template-areas` in a single declaration.

Values:

* `none` – sets all three properties to their initial values
* `<grid-template-rows> / <grid-template-columns>` – sets `grid-template-columns` and `grid-template-rows` to the specified values, respectively, and sets `grid-template-areas` to `none`.

```
 .container {
  grid-template: none | <grid-template-rows> / <grid-template-columns>; 
 }
```
It also accepts a more complex but quite handy syntax for specifying all three. Here’s an example:

```
.container {
  grid-template:
  [row1-start] ""header header header"" 25px [row1-end]
  [row2-start] ""footer footer footer"" 25px [row2-end]
  / auto 50px auto;
}
```

That’s equivalent to this:

```
.container {
  grid-template-rows: [row1-start] 25px [row1-end row2-start] 25px [row2-end];
  grid-template-columns: auto 50px auto;
  grid-template-areas: 
  ""header header header"" 
  ""footer footer footer"";
}
```

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/snippets/css/complete-guide-grid/#aa-grid-template)"
What is the problem with the ***grid-template*** property?,"Since `grid-template` doesn’t reset the *implicit* grid properties ([grid-auto-columns](https://css-tricks.com/snippets/css/complete-guide-grid/#prop-grid-auto-columns-rows), [grid-auto-rows](https://css-tricks.com/snippets/css/complete-guide-grid/#prop-grid-auto-columns-rows), and [grid-auto-flow](https://css-tricks.com/snippets/css/complete-guide-grid/#prop-grid-auto-flow)), which is probably what you want to do in most cases, it’s recommended to use the [grid](https://css-tricks.com/snippets/css/complete-guide-grid/#prop-grid) property instead of `grid-template`.

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/snippets/css/complete-guide-grid/#aa-grid-template)"
"What do **column-gap, row-gap, grid-column-gap, grid-row-gap** properties do?","Specifies the size of the grid lines. You can think of it like setting the width of the gutters between the columns/rows.

Values:

`<line-size>` – a length value

Example:

```
 .container {
  /* standard */
  column-gap: <line-size>;
  row-gap: <line-size>;

 /* old */
  grid-column-gap: <line-size>;
  grid-row-gap: <line-size>;
 }
```

Note: The gutters are only created *between* the columns/rows, not on the outer edges.

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/snippets/css/complete-guide-grid/#aa-column-gaprow-gapgrid-column-gapgrid-row-gap)"
"What do **gap, grid-gap** do?","A shorthand for `row-gap` and `column-gap`

Values:

`<grid-row-gap> <grid-column-gap>` – length values

Example: 

```
.container {
 /* standard */
 gap: <grid-row-gap> <grid-column-gap>;

/* old */
 grid-gap: < grid-row-gap>\<grid-column-gap>;
}
```

If no `row-gap` is specified, it’s set to the same value as `column-gap`.

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/snippets/css/complete-guide-grid/#aa-gapgrid-gap)"
What does **justify-items** property do?,"Aligns grid items along the inline (row) axis (as opposed to `align-items` which aligns along the block (column) axis). This value applies to all grid items inside the container.

Values:

* `start` – aligns items to be flush with the start edge of their cell
* `end` – aligns items to be flush with the end edge of their cell
* `center` – aligns items in the center of their cell
* `stretch` – fills the whole width of the cell (this is the default)

```
.container {
  justify-items: start | end | center | stretch;
}
```

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/snippets/css/complete-guide-grid/#aa-justify-items)"
What does **align-items** property do?,"Aligns grid items along the block (column) axis (as opposed to `justify-items` which aligns along the inline (row) axis). This value applies to all grid items inside the container.

Values:

* `stretch` – fills the whole height of the cell (this is the default)
* `start` – aligns items to be flush with the start edge of their cell
* `end` – aligns items to be flush with the end edge of their cell
* `center` – aligns items in the center of their cell
* `baseline` – align items along text baseline. There are modifiers to baseline — first baseline and last baseline which will use the baseline from the first or last line in the case of multi-line text.

```
.container {
  align-items: start | end | center | stretch;
}
```

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/snippets/css/complete-guide-grid/#aa-align-items)"
What does **place-items** property do?,"`place-items` sets both the align-items and justify-items properties in a single declaration.

Values:

* `<align-items> <justify-items>` – The first value sets `align-items`, the second value `justify-items`. If the second value is omitted, the first value is assigned to both properties.

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/snippets/css/complete-guide-grid/#aa-place-items)"
What does **justify-content** property do?,"Sometimes the total size of your grid might be less than the size of its grid container. This could happen if all of your grid items are sized with non-flexible units like *px*. In this case you can set the alignment of the grid within the grid container. This property aligns the grid along the inline (row) axis (as opposed to `align-content` which aligns the grid along the block (column) axis).

Values:

* `start` – aligns the grid to be flush with the start edge of the grid container
* `end` – aligns the grid to be flush with the end edge of the grid container
* `center` – aligns the grid in the center of the grid container
* `stretch` – resizes the grid items to allow the grid to fill the full width of the grid container
* `space-around` – places an even amount of space between each grid item, with half-sized spaces on the far ends
* `space-between` – places an even amount of space between each grid item, with no space at the far ends
* `space-evenly` – places an even amount of space between each grid item, including the far ends

```
.container {
  justify-content: start | end | center | stretch | space-around | space-between | space-evenly;
}
```

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/snippets/css/complete-guide-grid/#aa-justify-content)"
What does **align-content** property do?,"Sometimes the total size of your grid might be less than the size of its grid container. This could happen if all of your grid items are sized with non-flexible units like px. In this case you can set the alignment of the grid within the grid container. This property aligns the grid along the block (column) axis (as opposed to `justify-content` which aligns the grid along the inline (row) axis).

Values:

* `start` – aligns the grid to be flush with the start edge of the grid container
* `end` – aligns the grid to be flush with the end edge of the grid container
* `center` – aligns the grid in the center of the grid container
* `stretch` – resizes the grid items to allow the grid to fill the full height of the grid container
* `space-around` – places an even amount of space between each grid item, with half-sized spaces on the far ends
* `space-between` – places an even amount of space between each grid item, with no space at the far ends
* `space-evenly` – places an even amount of space between each grid item, including the far ends

```
.container {
  align-content: start | end | center | stretch | space-around | space-between | space-evenly;
}
```

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/snippets/css/complete-guide-grid/#aa-align-content)"
What does **place-content** property do?,"`place-content` sets both the align-content and justify-content properties in a single declaration.

Values:

`<align-content> / <justify-content>` – The first value sets `align-content`, the second value `justify-content`. If the second value is omitted, the first value is assigned to both properties.

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/snippets/css/complete-guide-grid/#aa-place-content)"
"What do **grid-column-start, grid-column-end, grid-row-start** and **grid-row-end** properties do?","Determines a grid item’s location within the grid by referring to specific grid lines. `grid-column-start/grid-row-start` is the line where the item begins, and `grid-column-end/grid-row-end` is the line where the item ends.

**Note**: If no `grid-column-end/grid-row-end` is declared, the item will span 1 track by default.
 Items can overlap each other. You can use `z-index` to control their stacking order.

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/snippets/css/complete-guide-grid/#aa-grid-column-startgrid-column-endgrid-row-startgrid-row-end)"
What do **grid-column** and **grid-row** properties do?,"Shorthand for `grid-column-start` + `grid-column-end`, and `grid-row-start` + `grid-row-end`, respectively.

Values:

`<start-line> / <end-line>` – each one accepts all the same values as the longhand version, including span

```
.item {
  grid-column: <start-line> / <end-line> | <start-line> / span <value>;
  grid-row: <start-line> / <end-line> | <start-line> / span <value>;
}
```

If no end line value is declared, the item will span 1 track by default.

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/snippets/css/complete-guide-grid/#aa-grid-columngrid-row)"
What does **grid-area** property do?,"Gives an item a name so that it can be referenced by a template created with the `grid-template-areas` property. Alternatively, this property can be used as an even shorter shorthand for `grid-row-start` + `grid-column-start` + `grid-row-end` + `grid-column-end`.

Values:

* `<name>` – a name of your choosing
* `<row-start> / <column-start> / <row-end> / <column-end>` – can be numbers or named lines

```
.item {
  grid-area: <name> | <row-start> / < column-start> / <row-end> / <column-end>;
}
```

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/snippets/css/complete-guide-grid/#aa-grid-area)"
What does **justify-self** property do?,"Aligns a grid item inside a cell along the inline (row) axis (as opposed to `align-self` which aligns along the block (column) axis). This value applies to a grid item inside a single cell.

Values:

* `start` – aligns the grid item to be flush with the start edge of the cell
* `end` – aligns the grid item to be flush with the end edge of the cell
* `center` – aligns the grid item in the center of the cell
* `stretch` – fills the whole width of the cell (this is the default)

```
.item {
  justify-self: start | end | center | stretch;
}
```

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/snippets/css/complete-guide-grid/#aa-justify-self)"
What does **align-self** property do?,"Aligns a grid item inside a cell along the block (column) axis (as opposed to justify-self which aligns along the inline (row) axis). This value applies to the content inside a single grid item.

Values:

* `start` – aligns the grid item to be flush with the start edge of the cell
* `end` – aligns the grid item to be flush with the end edge of the cell
* `center` – aligns the grid item in the center of the cell
* `stretch` – fills the whole height of the cell (this is the default)

```
.item {
  align-self: start | end | center | stretch;
}
```

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/snippets/css/complete-guide-grid/#aa-align-self)"
What does **place-self** property do?,"***place-self*** sets both the align-self and justify-self properties in a single declaration.

Values:

* `auto` – The “default” alignment for the layout mode.
* `<align-self> <justify-self>` – The first value sets align-self, the second value justify-self. If the second value is omitted, the first value is assigned to both properties.

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/snippets/css/complete-guide-grid/#aa-place-self)"
Rewrite this css rule using the repeat function ***grid-template-columns: 1fr 1fr 1fr 1fr;***,"`grid-template-columns: repeat(4, 1fr);`"
What css properties do you use to create an explicit grid?,"When we use `grid-template-columns` and `grid-template-rows` we create an Explicit Grid. However if we try and place an item outside of that grid the browser will create an Implicit Grid line or lines in order to hold that item.

## Footnote

*Source* [*grid by example*](https://gridbyexample.com/examples/example10/)"
What does ***grid-column: 1 / -1;*** do?,"It is the shorthand of `grid-column-start: 1` and `grid-column-end: -1`.
In a nutshell it spans the grid item from the first column to the last one.

You can even use numbers smaller than -1

```grid-column: 1 / -2;```

Spans the grid item from the first column to the second to last column.

## Footnote

*Source [css-tricks](https://css-tricks.com/collection-interesting-facts-css-grid-layout/#aa-negative-values-lower-than-1-may-be-used-for-grid-row-end-and-grid-column-end)*"
Possible values of **grid-template-columns** and **grid-template-rows** properties,"* `none` - Is a keyword meaning that there is no explicit grid.

* `[linename]` - A `<custom-ident>` specifying a name for the line in that location. Lines may have multiple names separated by a space inside the square brackets, for example `[line-name-a line-name-b]`.

* `<length>` - Is a non-negative length.

* `<percentage>` - Is a non-negative `<percentage>` value, relative to the block size of the grid container. If the size of the grid container depends on the size of its tracks, then the percentage must be treated as auto.

* `<fr unit>` - Is a non-negative dimension with the unit fr specifying the track's flex factor.

* `max-content` - Keyword representing the largest maximal content contribution of the grid items occupying the grid track.

* `min-content` - Keyword representing the largest minimal content contribution of the grid items occupying the grid track.

* `minmax(min, max)` - Functional notation that defines a size range, greater than or equal to min, and less than or equal to max.

* `auto` - As a maximum represents the largest `max-content` size of the items in that track.

As a minimum represents the largest minimum size of items in that track (specified by the `min-width`/`min-height` of the items). This is often, though not always, the `min-content` size.

If used outside of `minmax()` notation, `auto` represents the range between the minimum and maximum described above. This behaves similarly to `minmax(min-content,max-content)` in most cases.

Example

```
 .container {
  grid-template-columns: ... ...;
  /* e.g. 
  1fr 1fr
  minmax(10px, 1fr) 3fr
  repeat(5, 1fr)
  50px auto 100px 1fr
  */
  grid-template-rows: ... ...;
  /* e.g. 
  min-content 1fr min-content
  100px 1fr max-content
  */
 }
```

**Note**: `auto` track sizes (and only `auto` track sizes) can be stretched by the `align-content` and `justify-content` properties. Therefore by default, an `auto` sized track will take up any remaining space in the grid container.

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/snippets/css/complete-guide-grid/#aa-grid-template-columnsgrid-template-rows) *and* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-rows)"
Possible values of ***grid-template-areas*** property,"* `<grid-area-name>` – the name of a grid area specified with [grid-area](https://css-tricks.com/snippets/css/complete-guide-grid/#prop-grid-area)
* `.` – a period signifies an empty grid cell
* `none` – no grid areas are defined

```
.container {
  grid-template-areas:
     "" <grid-area-name> | . | none | ...""
     ""..."";
}
```

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/snippets/css/complete-guide-grid/#aa-grid-template-areas)"
"What values can **grid-column-start, grid-column-end, grid-row-start** and **grid-row-end** properties have?","* `<line>` – can be a number to refer to a numbered grid line, or a name to refer to a named grid line
* `span <number>` – the item will span across the provided number of grid tracks
* `span <name>` – the item will span across until it hits the next line with the provided name
* `auto` – indicates auto-placement, an automatic span, or a default span of one

Example:

```
.item-b {
  grid-column-start: 1;
  grid-column-end: span col4-start;
  grid-row-start: 2;
  grid-row-end: span 2;
}
```

**Note**: If no `grid-column-end/grid-row-end` is declared, the item will span 1 track by default.
 Items can overlap each other. You can use z-index to control their stacking order.

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/snippets/css/complete-guide-grid/#aa-grid-column-startgrid-column-endgrid-row-startgrid-row-end)"

Question,Answer
grid implicit,grid implicit
What is an **implicit grid**?,"If there are more grid items than cells in the grid or when a grid item is placed outside of the explicit grid, the grid container automatically generates grid tracks by adding grid lines to the grid. The explicit grid together with these additional implicit tracks and lines forms the so called **implicit grid**.

## Footnote

*Source [css-tricks](https://css-tricks.com/difference-explicit-implicit-grids/#aa-implicit-grids)*"
What do **grid-auto-columns** and **grid-auto-rows** properties do?,"Specifies the size of any auto-generated grid tracks (aka implicit grid tracks). Implicit tracks get created when there are more grid items than cells in the grid or when a grid item is placed outside of the explicit grid.

Values:

`<track-size>` – can be a length, a percentage, or a fraction of the free space in the grid (using the fr unit)

```
.container {
  grid-auto-columns: <track-size> ...;
  grid-auto-rows: <track-size> ...;
}
```

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/snippets/css/complete-guide-grid/#aa-grid-auto-columnsgrid-auto-rows)"
What does **grid-auto-flow** property do?,"If you have grid items that you don’t explicitly place on the grid, the auto-placement algorithm kicks in to automatically place the items. This property controls how the auto-placement algorithm works.

Values:

* `row`– default - tells the auto-placement algorithm to fill in each row in turn, adding new rows as necessary
* `column` – tells the auto-placement algorithm to fill in each column in turn, adding new columns as necessary
* `dense` – tells the auto-placement algorithm to attempt to fill in holes earlier in the grid if smaller items come up later

```
.container {
  grid-auto-flow: row | column | row dense | column dense;
}
```

**Note**: that dense only changes the visual order of your items and might cause them to appear out of order, which is bad for accessibility.

## Footnote

*Source [css-tricks](https://css-tricks.com/snippets/css/complete-guide-grid/#aa-grid-auto-flow)*"
What does **grid** property do?,"A shorthand for setting all of the following properties in a single declaration: `grid-template-rows, grid-template-columns, grid-template-areas, grid-auto-rows, grid-auto-columns,` and `grid-auto-flow`.

**Note**: You can only specify the explicit or the implicit grid properties in a single grid declaration.

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/snippets/css/complete-guide-grid/#aa-grid)"
What do the **sizing** functions do?,"The `minmax()` function sets a minimum and maximum value for what the length is able to be. This is useful for in combination with relative units. Like you may want a column to be only able to shrink so far.

Example:

`grid-template-columns: minmax(100px, 1fr) 3fr;`

The `min()` function lets you set the smallest (most negative) value from a list of comma-separated expressions as the value of a CSS property value.

The `max()` function lets you set the largest (most positive) value from a list of comma-separated expressions as the value of a CSS property value.

## Footnote

*Source [css-tricks](https://css-tricks.com/snippets/css/complete-guide-grid/#aa-sizing-functions)*"
What does the **repeat()** function do?,"The `repeat()` function can save some typing:

`grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;`

```
/* easier: */
grid-template-columns: repeat(8, 1fr);

/* especially when: */
grid-template-columns: repeat(8, minmax(10px, 1fr));
```

But `repeat()` can get extra fancy when combined with keywords:

* `auto-fill`: Fit as many possible columns as possible on a row, even if they are empty.
* `auto-fit`: Fit whatever columns there are into the space. Prefer expanding columns to fill space rather than empty columns.

## Footnote

*Source [css-tricks](https://css-tricks.com/snippets/css/complete-guide-grid/#aa-the-repeat-function-and-keywords)*"
"What does ***grid-template-columns: repeat(auto-fill, 100px);*** do?",It will create as many columns of `100px` as it can possible fit in the grid without overflowing the width of the grid.
"What does this css rule do ***grid-template-columns: repeat(auto-fit, 100px);***?","It will create as many columns (tracks) of width `100px` as needed depending amount of grid items.

The difference between `auto-fit` and `auto-fill` is that with `auto-fit` the empty tracks will colapse while with `auto-fill` they will be created.

**Note**: if a fixed number of vertical tracks is used in the repeat notation and the number of items exceeds this value more rows are added.

## Footnote

*Source [css-tricks](https://css-tricks.com/difference-explicit-implicit-grids/#aa-auto-fitting-tracks)*"
How can we size **implicit tracks**?,"The `grid-auto-rows` and `grid-auto-columns` properties give us control over the size of implicit tracks.

```
 .grid {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  grid-template-rows: 100px 100px;
  grid-gap: 20px;
  grid-auto-columns: 200px;
  grid-auto-rows: 60px;
}
```

Implicit tracks will now always have a width of `200px` and a height of `60px`, no matter if the grid item fits or not.

You can make sized implicit tracks more flexible by specifying a range using the `minmax()` notation.

```
.grid {
  grid-auto-columns: minmax(200px, auto);
  grid-auto-rows: minmax(60px, auto);
}
```

Implicit tracks are now at least `200px` wide and `60px` high, but will expand if the content demands it.

## Footnote

*Source [css-tricks](https://css-tricks.com/difference-explicit-implicit-grids/#aa-sizing-implicit-tracks)*"
What is the ***automatic placement*** of grid-items?,"Implicit tracks are also added if the number of items exceeds the number of cells. By default, the auto-placement algorithm places items by filling each row consecutively, adding new rows as necessary.

## Footnote

*Source [css-tricks](https://css-tricks.com/difference-explicit-implicit-grids/#aa-automatic-placement)*"
How can you change how auto-placed items get flowed into the grid?,"We can specify how auto-placed items get flowed into the grid by using the `grid-auto-flow` property.

```
.grid-container {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  grid-template-rows: 100px 100px;
  grid-gap: 20px;
  grid-auto-flow: column;
}
```

Instead of rows, columns are being filled with items and additional implicit columns are created.

## Footnote

*Source [css-tricks](https://css-tricks.com/difference-explicit-implicit-grids/#aa-automatic-placement)*"
How can you create a flexible grid that expands with new columns and wraps to new rows if there is no space?,"You could do:

```
.grid {
  display: grid;
  gap: 1rem;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
}
```
Note that the minimum value used here is `200px` for each column. That’s just some number that you’d pick that feels good for your content. If you need to consider an alteration that allows it to go smaller if the screen itself is smaller than that wide. You could use: 

```
grid-template-columns: repeat(auto-fill, minmax(min(10rem, 100%), 1fr));
```

That’s saying that if 100% width calculates to less than 10rem (otherwise the minimum), then use that instead, making it safer for small-screen layouts.

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/books/greatest-css-tricks/flexible-grids/)"
"What does this CSS declaration ***grid-template-columns: repeat(12, 1fr);*** do?","It creates a 12 columns grid layout. 

The `1fr` is what tells the browser to distribute the space between the columns so that each column equally gets one fraction of that space.

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/)"
"What is the problem with this CSS declaration `grid-template-columns: repeat( 12, minmax(250px, 1fr) );`?","This will cause overflow in the row. The columns will not wrap into new rows if the viewport width is too narrow to fit them all with the new minimum width requirement, because we’re explicitly telling the browser to repeat the columns 12 times per row.

To achieve wrapping, we can use the `auto-fit` or `auto-fill` keywords.

```
grid-template-columns: repeat( auto-fit, minmax(250px, 1fr));
```

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/)"
"What do `auto-fit` or `auto-fill` keywords tell the browser when passed to a repeat function?

For example: 

`grid-template-columns: repeat( auto-fit, minmax(250px, 1fr));`","These keywords tell the browser to handle the column sizing and element wrapping for us so that the elements will wrap into rows when the width is not large enough to fit them in without any overflow.

In the example, the *fraction unit* used, ensures that in case the *width* allows for a fraction of a column to fit but not a full column, that space will instead be distributed over the column or columns that already fit, making sure we aren’t left with any empty space at the end of the row.

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/)"
How can you change the default ***auto*** size of implicit grid tracks?,"You can size implicit tracks with the `grid-auto-columns` and `grid-auto-rows` properties.

Example:

```
grid-auto-columns: 100px;
```

## Footnote

*Source* [*grid by example*](https://gridbyexample.com/examples/example10/)"
What values does CSS **grid** property have?,"**Syntax**

```
/* <'grid-template'> values */
grid: none;
grid: ""a"" 100px ""b"" 1fr;
grid: [linename1] ""a"" 100px [linename2];
grid: ""a"" 200px ""b"" min-content;
grid: ""a"" minmax(100px, max-content) ""b"" 20%;
grid: 100px / 200px;
grid: minmax(400px, min-content) / repeat(auto-fill, 50px);

/* <'grid-template-rows'> /
   [ auto-flow && dense? ] <'grid-auto-columns'>? values */
grid: 200px / auto-flow;
grid: 30% / auto-flow dense;
grid: repeat(3, [line1 line2 line3] 200px) / auto-flow 300px;
grid: [line1] minmax(20em, max-content) / auto-flow dense 40%;

/* [ auto-flow && dense? ] <'grid-auto-rows'>? /
   <'grid-template-columns'> values */
grid: auto-flow / 200px;
grid: auto-flow dense / 30%;
grid: auto-flow 300px / repeat(3, [line1 line2 line3] 200px);
grid: auto-flow dense 40% / [line1] minmax(20em, max-content);

/* Global values */
grid: inherit;
grid: initial;
grid: revert;
grid: revert-layer;
grid: unset;
```

*Values* 

* `<'grid-template'>` - Defines the grid-template including grid-template-columns, grid-template-rows and grid-template-areas.

* `<'grid-template-rows'> / [ auto-flow && dense? ] <'grid-auto-columns'>?` - Sets up an auto-flow by setting the row tracks explicitly via the grid-template-rows property (and the grid-template-columns property to none) and specifying how to auto-repeat the column tracks via grid-auto-columns (and setting grid-auto-rows to auto). grid-auto-flow is also set to column accordingly, with dense if it's specified.

All other grid sub-properties are reset to their initial values.

* `[ auto-flow && dense? ] <'grid-auto-rows'>? / <'grid-template-columns'>` - Sets up an auto-flow by setting the column tracks explicitly via the grid-template-columns property (and the grid-template-rows property to none) and specifying how to auto-repeat the row tracks via grid-auto-rows (and setting grid-auto-columns to auto). grid-auto-flow is also set to row accordingly, with dense if it's specified.

All other grid sub-properties are reset to their initial values.

*Initial values*

* `grid-template-rows: none`
* `grid-template-columns: none`
* `grid-template-areas: none`
* `grid-auto-rows: auto`
* `grid-auto-columns: auto`
* `grid-auto-flow: row`
* `grid-column-gap: 0`
* `grid-row-gap: 0`
* `column-gap: normal`
* `row-gap: normal`

**Note**: You can only specify the explicit or the implicit grid properties in a single grid declaration

## Footnote

*Source* [*css-tricks*](https://css-tricks.com/snippets/css/complete-guide-grid/#aa-grid)"
Arguments of ***repeat()*** CSS function,"The `repeat()` function takes two arguments:

* `repeat count`: the first argument specifies the number of times that the track list should be repeated. It is specified with an integer value of 1 or more, or with the keyword values *auto-fill* or *auto-fit*. These keyword values repeat the set of tracks as many times as is needed to fill the grid container.
* `tracks`: the second argument specifies the set of tracks that will be repeated. Fundamentally this consists of one or more values, where each value represents the size of that track. Each size is specified using either a [`<track-size>`](https://developer.mozilla.org/en-US/docs/Web/CSS/repeat#track-size) value or a [`<fixed-size>`_](https://developer.mozilla.org/en-US/docs/Web/CSS/repeat#fixed-size) value. You can also specify one or more line names before or after each track, by providing [`<line-names>`](https://developer.mozilla.org/en-US/docs/Web/CSS/repeat#line-names) values before and/or after the track size.

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/repeat#syntax)"
What does the ***repeat()*** CSS function does?,"The `repeat()` CSS function represents a repeated fragment of the track list, allowing a large number of columns or rows that exhibit a recurring pattern to be written in a more compact form.

## Footnote

*Source* [*MDN*](https://developer.mozilla.org/en-US/docs/Web/CSS/repeat)"
"Possible tracks values for `repeat(4, track_value)` CSS function call","This type of repeat calls are called **\< track-repeat \>**, which uses an integer to set the repeat count and one of the following values as track value.

* A [`<length-percentage>`](https://developer.mozilla.org/en-US/docs/Web/CSS/length-percentage) value.
* One of the following size keywords: `min-content`,` max-content`, or `auto`.
* A `<flex>` value (fr unit value).
* A `minmax()` function with:
    * `min` given as a `<length-percentage>` value, or one of the following keywords: min-content, max-content, or auto.
    * `max` given as one of a `<length-percentage>` value, a `<flex>` value (fr unit), or one of the following keywords: `min-content, max-content,` or `auto`
* a `fit-content()` function, passed a `<length-percentage>` value.

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/repeat#syntax)*"
"Possible tracks values for ***repeat(auto-fill | auto-fit, track\_value)*** CSS function call","This type of repeat calls are called`<auto-repeat>`, which uses
`auto-fill` or `auto-fit` to set the repeat count and one of the following values as track value.

* A [`<length-percentage>`](https://developer.mozilla.org/en-US/docs/Web/CSS/length-percentage) value.
* a `minmax()` function with:
    * `min` given as a `<length-percentage>` value
    * `max` given as one of a `<length-percentage>` value, a `<flex>` value (fr unit), or one of the following keywords: `min-content, max-content,` or `auto`
* a `minmax()` function with:
    * `min` given as a `<length-percentage>` value or one of the following keywords: `min-content, max-content,` or `auto`
    * `max` given as a `<length-percentage>` value.

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/repeat#syntax)*"

Question,Answer
positioning and stacking contexts,positioning and stacking contexts
What is the **containing block** of an element and why does it matter?,"The **containing block** of an element is the area that containts the element. Most often, the containing block is the content area of an element's nearest block-level ancestor.

The containing block of an element matters because the size and position of an element are often impacted by its containing block. 

Percentage values that are applied to the `width`, `height`, `padding`, `margin`, and offset properties (`top`, `bottom`, `right`, `left`) of an absolutely positioned element are computed from the element's containing block.

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block)*"
How can you identify the **containing block** of an element?,"The process for identifying the containing block depends entirely on the value of the element's `position` property:

1. If the `position` property is `static`, `relative`, or `sticky`, the containing block is formed by the edge of the content box of the nearest ancestor element that establishes a formatting context (such as a *table container, flex container, grid container*, or the *block container* itself).

2. If the `position` property is `absolute`, the containing block is formed by the edge of the padding box of the nearest ancestor element that has a position value other than `static` (i.e. `fixed`, `absolute`, `relative`, or `sticky`).

3. If the `position` property is `fixed`,  the containing block is established by the viewport (in the case of continuous media) or the page area (in the case of paged media).

4. If the `position` property is `absolute` or `fixed`, the containing block may also be formed by the edge of the padding box of the nearest ancestor element that has the following:
```
I. A `transform` or `perspective` or `fiter` value other than `none`
II. A `will-change` value of `transform` or `perspective` or `filter`
III. A `contain` value of `layout`, `paint`, `strict` or `content` (e.g. `contain: paint;`)
IV. A `container-type` value other than `normal`
V. A `backdrop-filter` other than `none` (e.g. `backdrop-filter: blur(10px);`)
```

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block)*"
What is an ***stacking context***?,"The **stacking context** is a three-dimensional conceptualization of HTML elements along an imaginary z-axis relative to the user, who is assumed to be facing the viewport or the webpage. HTML elements occupy this space in priority order based on element attributes.

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_positioned_layout/Understanding_z-index/Stacking_context)*"
When is an ***stacking context*** formed?,"A *stacking context* is formed, anywhere in the document, by any element in the following scenarios:

* Root element of the document (`<html>`).
* Element with a `position` value of `absolute`, `fixed` or `sticky`
* Element with `position: relative` and `z-index` value other than `auto`.
* A child of a flex container or a grid container, with `z-index` value other than `auto`.
* Element with an `opacity` value less than `1`.
* Element with a `mix-blend-mode` value other than `normal`.
* Element with any of the following properties with value other than `none`: 
    `transform`, `filter`, `backdrop-filter`, `perspective`, `clip-path`, `mask` / `mask-image` / `mask-border`.
* Element with an `isolation: isolate`.
* Element with a `will-change` value specifying any property that would create a stacking context on non-initial value.
* Element with a `contain` value of `layout`, or `paint`, or a `composite` value that includes either of them (i.e. `contain: strict, contain: content`).

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context#the_stacking_context)*"
What does `position` CSS property do?,"The ***position*** CSS property sets how an element is positioned in a document. The *top*, *right*, *bottom*, and *left* properties determine the final location of positioned elements.  
  
Examples:

```
position: static;
position: relative;
position: absolute;
position: fixed;
position: sticky;
```

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/position)*"
What does `position: static` do to an element?,"* The element is positioned according to the normal flow of the document. The `top`, `right`, `bottom`, `left`, and `z-index` properties have no effect. 

* `static` **is the default value**.

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/position#values)*"
What does `position: relative` do to an element?,"* The element is positioned according to the normal flow of the document, and then offset relative to itself based on the values of `top`, `right`, `bottom`, `left`. The offset does not affect the position of any other elements; thus, the space given for the element in the page layout is the same as if position were static.    

* This value creates a new stacking context when the value of `z-index` is not `auto`. 

* Has no effect on `table-*-group`, `table-row`, `table-column`, `table-cell`, and `table-caption` elements.

**NOTE**: Unlike fixed and absolute positioning, you cannot use `top`, `right`, `bottom` and `left` to change the size of a relatively positioned element. Those values will only shift the position of the element up or down, left or right. You can use `top` or `bottom`, but not both together (`bottom` will be ignored); likewise, you can use `left` or `right`, but not both (`right` will be ignored).

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/position#values)*"
What does `position: absolute` do to an element?,"* The element is removed from the normal document flow, and no space is created for the element in the page layout. It is positioned relative to its closest positioned ancestor, if any; otherwise, it is placed relative to the initial containing block. Its final position is determined by the values of `top`, `right`, `bottom`, `left`.  

* This value creates a new stacking context when the value of `z-index` is not `auto`. 
* The margins of **absolutely positioned boxes do not collapse with other margins**.

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/position#values)*"
What does `position: fixed` do to an element?,"* The element is removed from the normal document flow, and no space is created for the element in the page layout. 

* It is positioned relative to the initial containing block established by the viewport, except when one of its ancestors has a [`transform`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform), [`perspective`](https://developer.mozilla.org/en-US/docs/Web/CSS/perspective), or [`filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/filter) property set to something other than `none`, or the [`will-change`](https://developer.mozilla.org/en-US/docs/Web/CSS/will-change) property is set to `transform`, `perspective` or `filter`, in which case that ancestor behaves as the containing block. 

* Its final position is determined by the values of `top`, `right`, `bottom` and `left`.  

* This value always creates a new stacking context. In printed documents, the element is placed in the same position on every page.

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/position#values)*"
What does `position: sticky` do to an element?,"* The element is positioned according to the normal flow of the document, and then offset relative to its nearest scrolling ancestor and containing block (nearest block-level ancestor), including table-related elements, based on the values of  `top`, `right`, `bottom` and `left`. The offset does not affect the position of any other elements.  

* This value always creates a new stacking context. 
* Note that a sticky element ""sticks"" to its nearest ancestor that has a ""scrolling mechanism"" (created when `overflow` is `hidden`, `scroll`, `auto`, or `overlay`), even if that ancestor isn't the nearest actually scrolling ancestor.

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/position#values)*"
What is a ***positioned element***?,"A **positioned elemen**t is an element whose computed `ñposition` value is either `relative`, `absolute`, `fixed`, or `sticky'` (In other words, it's anything except `static`.)

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/position#types_of_positioning)*"
What is the problem with `fixed` or `stiky` content?,"Scrolling elements containing `fixed` or `sticky` content can cause performance and accessibility issues. 
 
As a user scrolls, the browser must repaint the sticky or fixed content in a new location. Depending on the content needing to be repainted, the browser performance, and the device's processing speed, the browser may not be able to manage repaints at 60 fps, causing accessibility concerns for people with sensitivities and jank for everyone.

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/position#performance_accessibility)*"
How can you solve performance issues of `fixed` or `sticky` content?,"Adding 

```
will-change: transform
```

to the positioned elements to render the element in its own layer, improving repaint speed and therefore improving performance and accessibility.

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/position#performance_accessibility)*"
How can you crete a ***modal backdrop*** that fills the entire viewport?,"```
.modal-backdrop {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  background-color: rgba(0, 0, 0, 0.5);
}
```

Using `position: fixed` and setting each of the four sides set to 0 makes the backdrop fill the entire viewport.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What is the *containing block* of a `fixed` positioned element?,"The viewport

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What is the *containing block* of an `absolute` postioned element?,"Its closest ***positioned*** ancestor element.
 
**NOTE**: If none of the element’s ancestors are positioned, then the absolutely positioned element will be positioned based on something called the *initial containing block*. This is an area with dimensions equal to the viewport size, anchored at the top of the page.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What is the *containing block* of an `absolute` postioned element?,"its closest ***positioned*** ancestor element. (An element with `position` value different thatn `static`)

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What is the *containing block element* of a positioned element?,"It is the *block element* the *positioned element* uses to position itself using  `top`, `right`, `bottom` and `left` properties.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What is the render tree?,"As the browser parses HTML into the DOM, it also creates another tree structure called the `render tree`. 

The `render tree` represents the visual appearance and position of each element. It’s also responsible for determining the order in which the browser will paint the elements. This order is important because elements painted later appear in front of elements painted earlier, should they happen to overlap.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
How does the browser paints all the elements in a page?,"The browser first paints all non-positioned elements, then it paints the positioned ones. By default, any positioned element appears in front of any non-positioned elements.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What does `z-index` CSS property do?,"The `z-index` CSS property sets the z-order of a positioned element and its descendants. Overlapping elements with a larger `z-index` cover those with a smaller one.

In other words, elements with a higher `z-index` appear in front of elements with a lower `z-index`. 

Elements with a negative `z-index` appear behind static elements.

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/z-index)*"
What values does `z-index` CSS property accepts?,"* `auto` - Default value - The box does not establish a new local stacking context. The stack level of the generated box in the current stacking context is `0`.

* `<integer>` - This `<integer>` is the stack level of the generated box in the current stacking context. The box also **establishes a local stacking context**. This means that the **z-indexes of descendants are not compared to the z-indexes of elements outside this element**.

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/z-index)*"
What gotchas does `z-index` CSS property have?,"* `z-index` only works on positioned elements. You cannot manipulate the stacking order of static elements. 
* Applying a `z-index` to a positioned element establishes a new stacking context.
* When you add a `z-index` to a positioned element that element becomes the root of a new stacking context. All of its descendant elements are then part of that stacking context.
* No element outside the stacking context can be stacked between any two elements that are inside it.
* If an element on the page is stacked behind a stacking context, no element within that stacking context can be stacked behind that element.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
*Stacking contexts* vs *block formatting contexts*,"* `Stacking contexts` deal with which elements are in front of other elements; 
* `block formatting contexts` deal with the document flow and whether or not elements will overlap.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
In what order are stacked the elements within a stacking context?,"In the following order: 

1. The root element of the stacking context
2. Positioned elements with a negative `z-index` (along with their children)
3. Non-positioned elements
4. Positioned elements with a `z-index` of auto (and their children)
5. Positioned elements with a positive `z-index` (and their children)

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
How can you keep track of `z-index` values?,"It’s easy for a stylesheet to devolve into a z-index war, with no clear order as to the priority of various components. Without clear guidance, developers’ll give it a ridiculously high z-index, like 999999. After this happens a few times, it’s anybody’s guess what the `z-index` for another new component should be.

To prevent this you can use custom properties. That way you can see at a glance what is supposed to appear in front of what:

```
--z-loading-indicator: 100;
--z-nav-menu: 200;
--z-dropdown-menu: 300;
--z-modal-backdrop: 400;
--z-modal-body: 410;
```
Use increments of 10 or 100, so you can insert new values in between should the need arise.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What does sticky postioning (`position: sticky;`) do?,"It’s sort of a hybrid between relative and fixed positioning: The element scrolls normally with the page until it reaches a specified point on the screen, at which point it will “lock” in place as the user continues to scroll.

The element is positioned according to the normal flow of the document, and then offset relative to its nearest scrolling ancestor and [containing block](https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block) (nearest block-level ancestor), including table-related elements, based on the values of `top`, `right`, `bottom`, and `left`. The offset does not affect the position of any other elements.

This value always creates a new [stacking context](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_positioned_layout/Understanding_z-index/Stacking_context). Note that a sticky element ""sticks"" to its nearest ancestor that has a ""scrolling mechanism"" (created when `overflow` is `hidden`, `scroll`, `auto`, or `overlay`), even if that ancestor isn't the nearest actually scrolling ancestor.

Be aware that, It doesn't work in IE

## Footnote

[""position: sticky"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/position#sticky) Retrieved December 18, 2023."

Question,Answer
responsiv,responsive
What are the 3 key priciples of *Responsive Design*?,"1. A mobile first approach to design. This means you build the mobile version before you construct the desktop layout.

2. The `@media` at-rule syntax (also called media queries) lets you write styles that only apply under certain conditions. 
**Note**: You should only apply media queries when the design breaks

3. The use of fluid layouts. This approach allows containers to scale to different sizes based on the width of the viewport.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What is *progressive enhancement*?,"*Progressive enhancement* is a design philosophy that provides a baseline of essential content and functionality to as many users as possible, while delivering the best possible experience only to users of the most modern browsers that can run all the required code.

## Footnote

Source [MDN](https://developer.mozilla.org/en-US/docs/Glossary/Progressive_Enhancement)"
What is *graceful degradation*?,"*Graceful degradation* is a design philosophy that centers around trying to build a modern web site/application that will work in the newest browsers, but falls back to an experience that while not as good still delivers essential content and functionality in older browsers.

## Footnote

Source [MDN](https://developer.mozilla.org/en-US/docs/Glossary/Graceful_degradation)"
When should you use *progressive enhancement* and when *graceful degradatation*?,"Both *progressive enhancement* and *graceful degradation* try to do the same thing: keep our products useful to every user. 

*Progressive enhancement* is a more stable way of assuring that but it takes more time and effort. *Graceful degradation* can be used more easily as a patch for an already existing product; it means harder maintenance later on, but requires less initial work.

## Footnote

*Source [w3.org](https://www.w3.org/wiki/Gracefuldegradationversusprogressiveenhancement#:~:text=Progressive%20enhancement%20is%20a%20more,but%20requires%20less%20initial%20work.)*"
What does the `viewport` HTML metatag do?,"It tells mobile devices you’ve intentionally designed for small screens. Without it, a mobile browser assumes your page is not responsive, and it will attempt to emulate a desktop browser.

Example: 

```
<meta name=""viewport"" content=""width=device-width, initial-scale=1"">
```

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
List the most common `viewport` HTML metatag settings,"```
<meta name=""viewport"" content=""width=device-width, initial-scale=1"">
```

* `width=device-width`  tells the browser to use the device width as the assumed width when interpreting the CSS
* `initial-scale=1` set the zoom level at 100% when the page loads.

There is another common setting `user-scalable=no`, which prohibits the user from using two fingers to zoom in and out on their mobile device. While it is used. Be aware that is very annoying for the users to not be able to zoom images and the like.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What considerations should you take for print styles?,"To help with printing, there are some common steps you can take. It’ll be helpful to apply them inside of a `@media print {…} media query`.

* Use `display: none` to hide non-essential parts of the page, such as navigational menus and footers.

* Globally change font colors to black and remove all background images and colors behind blocks of text. In many cases, a universal selector does the job for this. I use `!important` here so I don’t need to worry about the cascade overriding it:

```
@media print {
  * {
    color: black !important;
    background: none !important;
  }
}
```

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What does CSS property `aspect-ratio` do?,"The CSS property `aspect-ratio` lets you create boxes that maintain proportional dimensions where the `height` and `width` of a box are calculated automatically as a ratio.

In other words, this property helps us to size elements consistently, so the ratio of an element stays the same as it grows or shrinks.

Example:

```
.element {
  aspect-ratio: 2 / 1; /* ↔️ is double the ↕️ */
}

.element {
  aspect-ratio: 1 / 1; /* ⏹ a perfect square */
}
```

## Footnote

*Source [css-tricks](https://css-tricks.com/almanac/properties/a/aspect-ratio/)*"
CSS property `aspect-ratio` syntax and values,"```
aspect-ratio: auto || <ratio>;
```

**Values**:

* `auto`: The default value, Specifies that the element has no preferred aspect ratio and should size itself as it normally would. 

* `<ratio>`: Two positive numeric values separated by a forward slash (`/`) , targeting the width and height of the element. In the case of a single value, the second value is considered to be `1`. Size calculations involving preferred aspect ratio work with the dimensions of the box specified by `box-sizing`.
* `initial`: Applies the property’s default setting, which is auto.
* `inherit`: Adopts the aspect-ratio value of the parent.
* `unset`: Removes the current aspect ratio from the element.

Note: it is not inherited

## Footnote

*Source [css-tricks](https://css-tricks.com/almanac/properties/a/aspect-ratio/)*"
"What does the following CSS ruleset

```
.element {
  aspect-ratio: auto 1 / 1;
}
```

do?","If both `auto` and a `<ratio>` are specified together, the preferred aspect ratio is the specified ratio of `width` divided by `height`, unless it is a replaced element with an intrinsic aspect ratio, in which case that aspect ratio is used instead.

## Footnote

*Source [css-tricks](https://css-tricks.com/almanac/properties/a/aspect-ratio/)*"
When does `aspect-ratio` property gets ignored?,"* When both `width` and `height` are declared on the element
* When content breaks out of the ratio
* When it “loses” to `min-*` and `max-*` properties

## Footnote

*Source [css-tricks](https://css-tricks.com/almanac/properties/a/aspect-ratio/)*"
Common use cases of `aspect-ratio` property?,"* Responsive iFrames that show youtube videos 

```
iframe {
  aspect-ratio: 16 / 9;
  width: 100%;
  height: auto;
}
```

* Hero images

```
.hero {
  aspect-ratio: 4 / 3;
  background: url(background.png);
}
```

* Layout consistency: In a flexbox or a grid layout with `auto-fill` mechanism, you may want items to stay square, but items width and height can shrink or grow based on their content or their parent’s size and as a result it’s most likely that items don’t stay square.

Setting `aspect-ratio` to `1/1` changes the height dynamically while your item’s width scales:

```
grid-container {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
}

.grid-item {
  aspect-ratio: 1 / 1;
}
```

## Footnote

*Source [css-tricks](https://css-tricks.com/almanac/properties/a/aspect-ratio/)*"
What is a *fluid layout*?,"a *fluid layout* (sometimes called *liquid layout*) refers to the use of containers that grow and shrink according to the width of the viewport. 

A *fluid layout* can be slightly narrower than the viewport, but never wider.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What's the problem with `table`s and *fluid layouts*?,"Tables are particularly problematic for fluid layout on mobile devices. If a table has more than a handful of columns, it can easily overflow the screen width.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What can you do when a `table`'s `width` breaks a *fluid layout* design?,"One approach could be to force the table to display as normal block elements.

```
table {
  width: 100%;
}

@media (max-width: 30em) {
  table, thead, tbody, tr, th, td {
    /* Makes all table elements block display */
    display: block;
  }

  thead tr {
    /* Hides the headings row by moving it off the screen */
    position: absolute;
    top: -9999px;
    left: -9999px;
  }

  tr {
    /* Adds a little space between each set of table data */
    margin-bottom: 1em;
  }
}
```

The above styles causes each cell to stack atop one another, then adds a margin between each `<tr>`. This approach makes the `<thead>` row no longer lineup with columns beneath it, so we use some absolute positioning to remove the header row from view. We avoid `display: none` for accessibility

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
How do you deal with images on responsive layouts?,"In responsive design, images need special attention. Not only do you need to fit them on the screen, you must also consider the bandwidth limitations of mobile users.

One approach could be to serve a different image depending on the viewport size:

```
.hero {
  . . .
  /* Uses the smallest image on mobile devices */
  background-image: url(coffee-beans-small.jpg);
}

@media (min-width: 35em) {
  .hero {
    . . .
    /* Uses a larger image on medium-size screens */
    background-image: url(coffee-beans-medium.jpg);
  }
}

@media (min-width: 50em) {
  .hero {
    . . .
    /* Uses the full resolution image on large screens */
    background-image: url(coffee-beans.jpg);
  }
}
```

Although a better approach would be to use the [srcset](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/srcset) attribut of the HTML `img` tag

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"

Question,Answer
modular css,modular css
What does *modular CSS* means?,"*Modular CSS* means breaking the page up into its component parts. These parts should be reusable in multiple contexts, and they shouldn’t directly depend upon one another. The end goal is that changes to one part of your CSS will not produce unexpected effects in another.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What is the problem with context dependent selectors like `.page-header .dropdown`?,"With modular CSS, such selector is strictly forbidden. Because it leads to many problems down the road:

* Where do you place the code on the header styles or on the dropdown styles.
* This approach increases the selector's specificity. To overwrite it we will need to increase the specificity even more. 
* It is not reusable if you later need the same styles outside of the header or somwhere else you will need to add a new selector to the CSS ruleset. A better selector would have been `.dropdown--dark` for example.
* Such practice leads to very long selectors tightly coupled to a specific place on a specific page.
* Rules become hard to find as individual elements are targeted by pieces of code in multiple disparate parts of the stylesheet. 
* It becomes more and more difficult to understand the organization of the stylesheet and how it’s doing what it does to the page. 
* Even the tiniest changes to the page can break a huge portion of its styling. Deleting old code becomes unsafe because nobody knows what it does and whether it’s still important.

**Never use descendant selectors to alter a module based on its location in the page.**

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
How can you write a module's variant styles?,"You could use `--` or `_` if you are using BEM.

For example: 

```
.button { /* . . . */  }
.button--error { /* . . . */  }
.button--success { /* . . . */  }
```

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What is BEM?,"BEM (Block, Element, Modifier) is a component-based approach to web development. The idea behind it is to divide the user interface into independent blocks. This makes interface development easy and fast even with a complex UI, and it allows reuse of existing code without copying and pasting.

## Footnote

*Source [bem.info](https://en.bem.info/methodology/quick-start/#introduction)*"
What is a BEM Block?,"A functionally independent page component that can be reused. In HTML, blocks are represented by the class attribute.

Features:

* The block name describes its purpose (""What is it?"" — menu or button), not its state (""What does it look like?"" — red or big).
* The block shouldn't influence its environment, meaning you shouldn't set the external geometry (`margin`) or positioning for the block.
* You also shouldn't use CSS tag or ID selectors when using BEM.
* Blocks can be nested inside other blocks

This ensures the necessary independence for reusing blocks or moving them from place to place.

## Footnote

*Source [bem.info](https://en.bem.info/methodology/quick-start/#block)*"
What is a BEM Element?,"A composite part of a block that can't be used separately from it.

Features:

* The element name describes its purpose (""What is this?"" — item, text, etc.), not its state (""What type, or what does it look like?"" — red, big, etc.).
* The structure of an element's full name is `block-name``_``_``element-name`. The element name is separated from the block name with a double underscore (`_``_`).

## Footnote

*Source [bem.info](https://en.bem.info/methodology/quick-start/#element)*"
When should I create a block or an element?,"**Create a block**
If a section of code might be reused and it doesn't depend on other page components being implemented.

**Create an element**
If a section of code can't be used separately without the parent entity (the block).

The exception is elements that must be divided into smaller parts – subelements – in order to simplify development. In the BEM methodology, [you can't create elements of elements](https://en.bem.info/methodology/quick-start/#nesting-1). In a case like this, instead of creating an element, you need to create a *service block*.

## Footnote

*Source [bem.info](https://en.bem.info/methodology/quick-start/#should-i-create-a-block-or-an-element)*"
What is a BEM modifier?,"An entity that defines the appearance, state, or behavior of a block or element.

Features:

* The modifier name describes its appearance (""What size?"" or ""Which theme?"" and so on — size_s or theme_islands), its state (""How is it different from the others?"" — disabled, focused, etc.) and its behavior (""How does it behave?"" or ""How does it respond to the user?"" — such as directions_left-top).
* The modifier name is separated from the block or element name by a single underscore (`_`).

## Footnote

*Source [bem.info](https://en.bem.info/methodology/quick-start/#modifier)*"
Types of BEM modifiers,"**Boolean**

* Used when only the presence or absence of the modifier is important, and its value is irrelevant. For example, `disabled`. If a Boolean modifier is present, its value is assumed to be `true`.
* The structure of the modifier's full name follows the pattern:

```
block-name_modifier-name
block-name__element-name_modifier-name
```

**Key-value**

* Used when the modifier value is important. For example, ""a menu with the islands design theme"": `menu_theme_islands`.
* The structure of the modifier's full name follows the pattern:

```
block-name_modifier-name_modifier-value
block-name__element-name_modifier-name_modifier-value
```

## Footnote

*Source [bem.info](https://en.bem.info/methodology/quick-start/#types-of-modifiers)*"
What is a BEM mix?,"A technique for using different BEM entities on a single DOM node.

Mixes allow you to:

* Combine the behavior and styles of multiple entities without duplicating code.
* Create a semantically new UI components based on existing ones.

Example: 

```
<!-- `header` block -->
<div class=""header"">
    <!--
        The `search-form` block is mixed with the `search-form` element
        from the `header` block
    -->
    <div class=""search-form header__search-form""></div>
</div>
```

In this example, we combined the behavior and styles of the `search-form` block and the search-form element from the header block. This approach allows us to set the external geometry and positioning in the `header``_``_search-form` element, while the `search-form` block itself remains universal.

## Footnote

*Source [bem.info](https://en.bem.info/methodology/quick-start/#types-of-modifiers)*"
BEM naming rules,"```
block-name__element-name_modifier-name_modifier-value
```

* Names are written in lowercase Latin letters.
* Words are separated by a hyphen (`-`).
* The *block* name defines the namespace for its elements and modifiers.
* The *element* name is separated from the block name by a double underscore (`_``_`).
* The *modifier* name is separated from the block or element name by a single underscore (`_`).
* The modifier value is separated from the modifier name by a single underscore (`_`).
* For `boolean` modifiers, the value is not included in the name.

## Footnote

*Source [bem.info](https://en.bem.info/methodology/naming-convention/#naming-rules)*"
BEM *Single Responsability* principle,"Every CSS ruleset must have a single responsibility. In other words, It should do one job well and one job only.

Example: 
Correct - Defines external geometry i.e. how the element positions in the block

```
.header__button {
    margin: 30px;
    position: relative;
}
```
Incorrect - Defines external geometry, typography and cosmetics

```
.header__button {
    font-family: Arial, sans-serif;
    position: relative;
    border: 1px solid black;
    margin: 30px;
    color: #ececec
}
```
Single responsibility selectors give the code more flexibility.

## Footnote

*Source [bem.info](https://en.bem.info/methodology/css/#single-responsibility-principle)*"
BEM *Open/closed* principle,"Any HTML element on a page should be open for extension by modifiers, but closed for changes. You should develop new CSS implementations without needing to change existing ones.

## Footnote

*Source [bem.info](https://en.bem.info/methodology/css/#single-responsibility-principle)*"
"BEM *DRY*(""don't repeat yourself"")  principle","DRY (""don't repeat yourself"") is a software development principle aimed at reducing repetitions in code.

In relation to the BEM methodology, the essence of this principle is that each BEM entity must have a single, unambiguous representation within the system.

Example

Don't do this: 

```
.button {
    font-family: Arial, sans-serif;
    text-align: center;
    color: #000;
    background: #fff;
}

.btn {
    font-family: Arial, sans-serif;
    text-align: center;
    color: #000;
    background: rgba(255, 0, 0, 0.4);
}
```

Its better to do create modifier selectors for the button element

```
.button {
    font-family: Arial, sans-serif;
    text-align: center;
}

.button_theme_islands {
    color: #000;
    background: #fff;
}

.button_theme_simple {
    color: #000;
    background: rgba(255, 0, 0, 0.4);
}
```

Note: The above is also a good example of the *Single Responsability* principle

## Footnote

*Source [bem.info](https://en.bem.info/methodology/css/#dry)*"
BEM *Composition instead of inheritance* principle,"Inheritance is a mechanism for defining a new CSS class based on an existing one (a parent or base class). The derived class can add its own properties, as well as use the parent properties.

New CSS implementations are formed in BEM by combining existing ones. This keeps the code uncoupled and flexible."

Question,Answer
gradients linear,gradients linear
What is a `gradient` CSS data type?,"The `<gradient>` CSS data type is a special type of `<image>` that consists of a progressive transition between two or more colors.

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient)*"
Describe the different types of `gradient`s,"The `gradient` data type is defined with one of the function types listed below.

**Linear gradient** - Linear gradients transition colors progressively along an imaginary line. They are generated with the `linear-gradient()` function.

**Radial gradient** - Radial gradients transition colors progressively from a center point (origin). They are generated with the `radial-gradient()` function.

**Repeating gradient** - Repeating gradients duplicate a gradient as much as necessary to fill a given area. They are generated with the `repeating-linear-gradient()` and `repeating-radial-gradient()` functions.

**Conic gradient** - Conic gradients transition colors progressively around a circle. They are generated with the `conic-gradient()` function.

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient#syntax)*"
What does the `linear-gradient()` CSS function do?,"The `linear-gradient()` CSS function creates an image consisting of a progressive transition between two or more colors along a straight line. Its result is an object of the `<gradient>` data type, which is a special kind of `<image>`.

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/linear-gradient)*"
Possible arguments of `linear-gradient()` CSS function,"* `<side-or-corner>` - The position of the gradient line's starting point. If specified, it consists of the word `to` and up to two keywords: one indicates the horizontal side (`left` or `right`), and the other the vertical side (`top` or `bottom)`. If unspecified, it defaults to to `bottom`.

The values `to top`, `to bottom`, `to left`, and `to right` are equivalent to the angles `0deg`, `180deg`, `270deg`, and `90deg`, respectively. The other values are translated into an angle.

* `<angle>` - The gradient line's angle of direction. Increasing values rotate clockwise from there.

* `<linear-color-stop>` - A color-stop's `<color>` value, followed by one or two optional stop positions, (each being either a `<percentage>` or a `<length>` along the gradient's axis).

* `<color-hint>` - An interpolation hint defining how the gradient progresses between adjacent color stops. The length defines at which point between two color stops the gradient color should reach the midpoint of the color transition. If omitted, the midpoint of the color transition is the midpoint between two color stops.

Examples:

```
linear-gradient(45deg, blue, red);
linear-gradient(to left top, blue, red);
linear-gradient(0deg, blue, green 40%, red);
linear-gradient(.25turn, red, 10%, blue);
linear-gradient(45deg, red 0 50%, blue 50% 100%);
```

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/linear-gradient#values)*"
Where can you use the `gradient` data type?,"Because `<gradient>`s belong to the `<image>` data type, they can only be used where `<image>`s can be used. For this reason, `linear-gradient()` won't work on `background-color` and other properties that use the `<color>` data type.

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/linear-gradient#description)*"
What dimensions does a `gradient` have?,"A `gradient` has no intrinsic dimensions; i.e., it has no natural or preferred size, nor a preferred ratio. Its concrete size will match the size of the element it applies to.

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/linear-gradient#description)*"
What is the composition of a `linear gradient`?,"A linear gradient is defined by the `gradient line` and two or more `color-stop points`. Each point on the axis is a distinct color; to create a smooth gradient, the `linear-gradient()` function draws a series of colored lines perpendicular to the gradient line, each one matching the color of the point where it intersects the gradient line.

The `gradient line` is defined by the center of the box containing the gradient image and by an angle. The colors of the gradient are determined by two or more points: the `starting point`, the `ending point`, and, in between, optional `color-stop` points.

The `starting point` is the location on the gradient line where the first color begins. 

The `ending point` is the point where the last color ends. 

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/linear-gradient#composition_of_a_linear_gradient)*"
How do you position a *color-stop*?,"A color-stop's position can be explicitly defined by using a `<length>` or a `<percentage>`. If you don't specify the location of a color, it is placed halfway between the one that precedes it and the one that follows it. The following two gradients are equivalent.

```
linear-gradient(red, orange, yellow, green, blue);
linear-gradient(red 0%, orange 25%, yellow 50%, green 75%, blue 100%);
```

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/linear-gradient#composition_of_a_linear_gradient)*"
Where does the color transtion between two *color-stops* happens by default?,"By default, colors transition smoothly from the color at one color stop to the color at the subsequent color stop, with the midpoint between the colors being the half way point between the color transition.

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/linear-gradient#composition_of_a_linear_gradient)*"
How can you change the middle of a color transtion?,"With a *gradient-hint*. 

You can move the midpoint to any position between two color stops by adding an unlabelled % color hint (aka *gradient-hint*) between the two colors to indicate where the middle of the color transition should be.

For example: 

```
linear-gradient(red 10%, 30%, blue 90%);
```

The previous example is solid red from the start to the 10% mark and solid blue from 90% to the end. Between 10% and 90% the color transitions from red to blue, however the midpoint of the transition is at the 30% mark rather than 50% as would have happened without the 30% color hint.

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/linear-gradient#composition_of_a_linear_gradient)*"
"What is the problem with the linear gradient below?

```
linear-gradient(red 40%, yellow 30%, blue 65%);
```","Color stops should be listed in ascending order. **Subsequent color stops of lower value will override the value of the previous color stop creating a hard transition**. 

The following changes from red to yellow at the 40% mark, and then transitions from yellow to blue over 25% of the gradient

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/linear-gradient#composition_of_a_linear_gradient)*"
How can you create multi-position *color stop*s?,"A color can be declared as two adjacent color stops by including both positions in the CSS declaration. The following three gradients are equivalent:

```
linear-gradient(red 0%, orange 10%, orange 30%, yellow 50%, yellow 70%, green 90%, green 100%);
linear-gradient(red, orange 10% 30%, yellow 50% 70%, green 90%);
linear-gradient(red 0%, orange 10% 30%, yellow 50% 70%, green 90% 100%);
```

By default, if there is no color with a 0% stop, the first color declared will be at that point. Similarly, the last color will continue to the 100% mark, or be at the 100% mark if no length has been declared on that last stop.

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/linear-gradient#composition_of_a_linear_gradient)*"
Propose a CSS rule to generate the following `linear gradient`,"```
background: linear-gradient(45deg, red, blue);
```"
Propose a CSS rule to generate the following `linear gradient`,"```
background: linear-gradient(135deg, orange 60%, cyan);
```"
How can you create a hard line in a `linear gradient`?,"To create a hard line between two colors, creating a stripe instead of a gradual transition, adjacent color stops can be set to the same location.

For example: 

```
.striped {
  background: linear-gradient(to bottom left, cyan 50%, palegoldenrod 50%);
}
```

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Images/Using_CSS_gradients#creating_hard_lines)*"
How can you change the midpoint of a `linear gradient` transition?,"With a *gradient hint.* By default, the gradient transitions evenly from one color to the next. You can include a color-hint to move the midpoint of the transition value to a certain point along the gradient.

In this example, we've moved the midpoint of the transition from the 50% mark to the 10% mark.

```
.color-hint {
  background: linear-gradient(blue, 10%, pink);
}
```

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/linear-gradient)*"
"How can you create a  solid, non-transitioning color area within a gradient?","To include a solid, non-transitioning color area within a gradient, include two positions for the same color stop. Color stops can have two positions, which is equivalent to two consecutive color stops with the same color at different positions.

Example the following CSS rules are equivalent

```
background: linear-gradient(
    to left,
    lime 25%,
    red 25%,
    red 50%,
    cyan 50%,
    cyan 75%,
    yellow 75%
  );
  background: linear-gradient(
    to left,
    lime 25%,  
    red 25% 50%,
    cyan 50% 75%,
    yellow 75%
  );
```

The second color stop for each color is at the same location as the first color stop for the adjacent color, creating a striped effect.

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Images/Using_CSS_gradients#creating_color_bands_stripes)*"
Can you overlay gradients?,"Gradients support transparency, so you can stack multiple backgrounds to achieve some pretty fancy effects. The backgrounds are stacked from top to bottom, with the first specified being on top.

```
.layered-image {
  background: linear-gradient(to right, transparent, mistyrose),
    url(""critters.png"");
}
```

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Images/Using_CSS_gradients#creating_color_bands_stripes)*"
Can you stack gradients?,"Yes, you can stack gradients with other gradients. As long as the top gradients aren't entirely opaque, the gradients below will still be visible.

```
.stacked-linear {
  background: linear-gradient(
      217deg,
      rgba(255, 0, 0, 0.8),
      rgba(255, 0, 0, 0) 70.71%
    ), linear-gradient(127deg, rgba(0, 255, 0, 0.8), rgba(0, 255, 0, 0) 70.71%),
    linear-gradient(336deg, rgba(0, 0, 255, 0.8), rgba(0, 0, 255, 0) 70.71%);
}
```

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Images/Using_CSS_gradients#stacked_gradients)*"

Question,Answer
gradients radial,gradients radial
`radial-gradient()` CSS function,"The `radial-gradient()` CSS function creates an image consisting of a progressive transition between two or more colors that radiate from an origin. Its shape may be a circle or an ellipse. The function's result is an object of the `<gradient>` data type, which is a special kind of `<image>`.

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/radial-gradient)*"
Syntax of `radial-gradient()` CSS function,"A radial gradient is specified by indicating the center of the gradient (where the 0% ellipse will be) and the size and shape of the ending shape (the 100% ellipse).

Example:

```
radial-gradient(circle at center, red 0, blue, green 100%)
```

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/radial-gradient#syntax)*"
Possible arguments of `radial-gradient()` CSS function,"* `<ending-shape>` - The value can be `circle` or `ellipse`. If unspecified, it defaults to `ellipse`.

* `<position>` - Position of the gradient, If unspecified, it defaults to `center`.

* `<size>` - Size of the gradient's ending shape. Defaults to `farthest-corner`. It accepts the following keywords  `closest-side` , `closest-corner`,  `farthest-side` and `farthest-corner`.

 If `<ending-shape>` is specified as `circle`, the size may be given explicitly as a `<length>`, which provides an explicit circle radius. Negative values are invalid.

If `<ending-shape>` is specified as ellipse or is omitted, the size may be given as a `<length-percentage>` with two values to provide an explicit ellipse size. The first value represents the horizontal radius, the second the vertical radius. Percentages values are relative to the corresponding dimension of the gradient box. Negative values are invalid.

* `<linear-color-stop>` - A color-stop's `<color>` value, followed by an one or two optional stop positions (either a `<percentage>` or a `<length>` along the gradient's axis). A percentage of 0%, or a length of 0, represents the center of the gradient; the value 100% represents the intersection of the ending shape with the virtual gradient ray.

* `<color-hint>` - The color-hint is an interpolation hint defining how the gradient progresses between adjacent color stops.

**Formal syntax**

```
<radial-gradient()> = 
  radial-gradient( [ <ending-shape> || <size> ]? [ at <position> ]? , <color-stop-list> )  

<size> = 
  <extent-keyword>              |
  <length [0,∞]>                |
  <length-percentage [0,∞]>{2}  

<position> = 
  [ left | center | right ] || [ top | center | bottom ]  |
  [ left | center | right | <length-percentage> ] [ top | center | bottom | <length-percentage> ]?  |
  [ [ left | right ] <length-percentage> ] && [ [ top | bottom ] <length-percentage> ]  

<color-stop-list> = 
  <linear-color-stop> , [ <linear-color-hint>? , <linear-color-stop> ]#  

<extent-keyword> = 
  closest-corner   |
  closest-side     |
  farthest-corner  |
  farthest-side    

<length-percentage> = 
  <length>      |
  <percentage>  

<linear-color-stop> = 
  <color>               &&
  <length-percentage>?  

<linear-color-hint> = 
  <length-percentage>  

```

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/radial-gradient#values)*"
Propose a rule to generate the following `radial gradient`,"As with linear gradients, all you need to create a radial gradient are two colors. By default, the center of the gradient is at the 50% 50% mark, and the gradient is elliptical matching the aspect ratio of it's box:

```
.radial-gradient {
    background: radial-gradient(red, blue);
}
```

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Images/Using_CSS_gradients#a_basic_radial_gradient)*"
Propose a rule to generate the following `radial gradient`,"Like linear gradients, you can position each radial color stop with a percentage or absolute length.

```
.radial-gradient {
  background: radial-gradient(red 10px, yellow 30%, blue 50%);
}
```

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Images/Using_CSS_gradients#positioning_radial_color_stops)*"
Propose a rule to generate the following `radial gradient`,"You can position the center of the gradient with keyterms, percentage, or absolute lengths, length and percentage values repeating if only one is present, otherwise in the order of position from the left and position from the top.

```
.radial-gradient {
  background: radial-gradient(at 0% 30%, red 10px, yellow 30%, blue 50%);
}
```

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Images/Using_CSS_gradients#positioning_the_center_of_the_gradient)*"
"What image will this CSS rule draw?

```
.radial-ellipse-side {
  background: radial-gradient(
    ellipse closest-side,
    red,
    yellow 10%,
    #1e90ff 50%,
    beige
  );
}
```","This example uses the `closest-side` size value, which means the size is set by the distance from the starting point (the center) to the closest side of the enclosing box.

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Images/Using_CSS_gradients#sizing_radial_gradients)*"
"What image will this CSS rule draw?

```
.radial-circle-close {
  background: radial-gradient(
    circle closest-side at 25% 25%,
    red,
    yellow 10%,
    #1e90ff 50%,
    beige
  );
}
```","This example uses `closest-side`, which makes the circle's radius to be the distance between the center of the gradient and the closest side. In this case the radius is the distance between the center and the bottom edge, because the gradient is placed `25%` from the `left` and `25%` from the `bottom`, and the `div` element's `height` is smaller than the width.

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Images/Using_CSS_gradients#sizing_radial_gradients)*"
Can you stack `radial gradient`s?,"Just like linear gradients, you can also stack radial gradients. The first specified is on top, the last on the bottom.

```
.stacked-radial {
  background: radial-gradient(
      circle at 50% 0,
      rgba(255, 0, 0, 0.5),
      rgba(255, 0, 0, 0) 70.71%
    ), radial-gradient(
      circle at 6.7% 75%,
      rgba(0, 0, 255, 0.5),
      rgba(0, 0, 255, 0) 70.71%
    ),
    radial-gradient(
        circle at 93.3% 75%,
        rgba(0, 255, 0, 0.5),
        rgba(0, 255, 0, 0) 70.71%
      ) beige;
  border-radius: 50%;
}
```

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Images/Using_CSS_gradients#stacked_radial_gradients)*"

Question,Answer
gradients conic,gradients conic
`conic-gradient()` CSS function,"The `conic-gradient()` CSS function creates an image consisting of a gradient with color transitions rotated around a center point (rather than radiating from the center). 

Example conic gradients include pie charts and color wheels. The result of the `conic-gradient()` function is an object of the `<gradient>` data type, which is a special kind of `<image>`.

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/conic-gradient)*"
Syntax of `conic-gradient()` CSS function,"The conic-gradient syntax is similar to the `radial-gradient` syntax, but the color-stops are placed around a gradient arc, the circumference of a circle, rather than on the gradient line emerging from the center of the gradient, and the color-stops are angles in `rad`, `turn`, `grad` or `degrees`: **absolute lengths are not valid**.

Examples:

```
conic-gradient(from 45deg, blue, red);
conic-gradient(from 90deg at 0 0, blue, red);
/* Color wheel */
background: conic-gradient(
    hsl(360, 100%, 50%),
    hsl(315, 100%, 50%),
    hsl(270, 100%, 50%),
    hsl(225, 100%, 50%),
    hsl(180, 100%, 50%),
    hsl(135, 100%, 50%),
    hsl(90, 100%, 50%),
    hsl(45, 100%, 50%),
    hsl(0, 100%, 50%)
);
```

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/conic-gradient)*"
Possible values of `conic-gradient()` CSS function,"`<angle>` - Preceded by the `from` keyterm, and taking an angle as its value, defines the gradient rotation in clockwise direction.

`<position>` - Preceded by the `at` keyterm. Using the same length, order and keyterm values as the `background-position` property, the position defines center of the gradient. If omitted, the default value is center, meaning the gradient will be centered, .

`<angular-color-stop>` - A color-stop's `<color>` value, followed by one or two optional stop positions, (an `<angle>` along the gradient's circumference axis).

`<color-hint>` - An interpolation hint defining how the gradient progresses between adjacent color stops. The length defines at which point between two color stops the gradient color should reach the midpoint of the color transition. If omitted, the midpoint of the color transition is the midpoint between two color stops.

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/conic-gradient#values)*"
Diferences between `conic` and `radial` gradients,"* In a `conic gradient`, the color-stops are placed around a gradient arc, the circumference of a circle. In a `linear and radial gradients` color stops are placed along the gradient line emerging from the center of the gradient. 

* In a `conic gradient`, the colors transition as if spun around the center of a circle, starting at the top and going clockwise. In a `radial gradient`, the colors transition from the center of an ellipse, outward, in all directions.

* In a `conic gradient`, the color stops are specified with an angle. In a `linear or radial gradient` the color-stops are placed by specifying a length. 

**NOTE:** Possible angle units include `deg` for degrees, `grad` for gradients, `rad` for radians, and `turn` for turns. There are 360 degrees, 400 gradians, 2π radians, and 1 turn in a circle.

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/conic-gradient#composition_of_a_conic_gradient)*"
Propose a CSS rule to generate the following `conic gradient`,"```
background-image: conic-gradient(from 40deg, #fff, #000); 
```

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/conic-gradient#gradient_at_40-degrees)*"
Propose a CSS rule to generate the following `conic gradient`,"```
  background: conic-gradient(from 0deg at 0% 25%, blue, green, yellow 180deg);
```

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/conic-gradient#off-centered_gradient)*"

Question,Answer
gradients repeat,gradients repeat
repeating gradient CSS functions,"* `repeating-linear-gradient()` CSS function creates an image consisting of repeating linear gradients.
* `repeating-radial-gradient()` CSS function creates an image consisting of repeating gradients that radiate from an origin.
* `repeating-conic-gradient()` CSS function creates an image consisting of a repeating gradient (rather than a single gradient) with color transitions rotated around a center point (rather than radiating from the center).

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Images/Using_CSS_gradients#using_repeating_gradients)*"
`repeating-linear-gradient()` CSS function,"The `repeating-linear-gradient()` CSS function creates an image consisting of repeating linear gradients.

Takes the same arguments as `linear-gradient` CSS function, but it repeats the color stops infinitely in all directions so as to cover its entire container.

Examples:

```
repeating-linear-gradient(45deg, blue, red 33.3%);
repeating-linear-gradient(to left top, blue, red 20px);
repeating-linear-gradient(0deg, blue, green 40%, red);
repeating-linear-gradient(to right, red 0%, green 10%, red 20%);
```

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/repeating-linear-gradient)*"
`repeating-radial-gradient()`,"The `repeating-radial-gradient()` CSS function creates an image consisting of repeating gradients that radiate from an origin. It is similar to `radial-gradient()` and takes the same arguments, but it repeats the color stops infinitely in all directions so as to cover its entire container.

Examples:

```
repeating-radial-gradient(circle at center, red 0, blue, green 30px);
repeating-radial-gradient(farthest-corner at 20% 20%, red 0, green, red 20%);
```

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/repeating-radial-gradient)*"
`repeating-conic-gradient()` CSS function,"The `repeating-conic-gradient()` CSS function creates an image consisting of a repeating gradient (rather than a single gradient) with color transitions rotated around a center point (rather than radiating from the center).

The `repeating-conic-gradient syntax` is similar to the `conic-gradient()` and `repeating-radial-gradient()` syntax:

* Like the non-repeating `conic-gradient`, the color-stops are placed around a gradient arc. 
* Like the `repeating-radial-gradient`, the size of the repeating section is the first color stop subtracted from the angle of the last color stop.


```
repeating-conic-gradient(from 0deg, red 0deg 30deg, yellow 30deg 60deg, blue 60deg 90deg);

repeating-radial-gradient(red 0 8%, yellow 8% 16%, blue 16% 24%);

conic-gradient(red 120deg, yellow 120deg 240deg, blue 240deg);

radial-gradient(red 33%, yellow 33% 66%, blue 66%);
```

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/repeating-conic-gradient)* "

Question,Answer
background and blend modes,background and blend modes
What does `background-image` CSS property do?,"The `background-image` property in CSS is used to set one or more background images for an element. It allows you to specify an image file (usually in formats like JPEG, PNG, GIF, or SVG) to be displayed as the background of the specified element. The images are layered on top of each other, with the first image in the list displayed on top and the last image at the bottom.

## Footnote

[""background-image - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/background-image) Retrieved April 4, 2023."
What is the syntax of the `background-image` CSS property?,"Each background image is specified either as the keyword `none` or as an [`<image>`](https://developer.mozilla.org/en-US/docs/Web/CSS/image) value.

To specify multiple background images, supply multiple values, separated by a `comma`:

```
background-image: linear-gradient(
    to bottom,
    rgba(255, 255, 0, 0.5),
    rgba(0, 0, 255, 0.5)
  ), url(""catfront.png"");

/* Global values */
background-image: inherit;
background-image: initial;
background-image: revert;
background-image: revert-layer;
background-image: unset;
```

**Values**
`none` - Is a keyword denoting the absence of images.

`<image>` - Is an [`<image>`](https://developer.mozilla.org/en-US/docs/Web/CSS/image)  denoting the image to display. There can be several of them, separated by `commas`, as multiple backgrounds are supported.

## Footnote

[""background-image - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/background-image) Retrieved April 4, 2023."
What does `background-position` CSS property do?,"The `background-position` CSS property is used to specify the initial position of a background image within an element. It determines how the image is aligned within the element, either using keywords, percentages, or length values to define the position.

## Footnote

[""background-position - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/background-position) Retrieved April 4, 2023."
What is the syntax of the `background-position` CSS property?,"The `background-position` property can accept one or two values:

* **One value**: This value sets the horizontal position (`left`, `center`, or `right`) or the vertical position (`top`, `center`, or `bottom`) of the background image. If only one value is provided, the other axis defaults to `center`.

* **Two values**: The first value sets the horizontal position (`left`, `center`, `right`, or a specific length/percentage), and the second value sets the vertical position (`top`, `center`, `bottom`, or a specific length/percentage).

Here's the syntax for the background-position property:

```
background-position: value1 value2;
```

Examples:

1.- Using keywords:

```
/* Position the background image at the center horizontally and top vertically */
div {
  background-position: center top;
}
```

2.- Using percentages:

```
/* Position the background image 50% from the left edge and 25% from the top edge */
div {
  background-position: 50% 25%;
}
```

3.- Using length values:

```
/* Position the background image 20px from the left edge and 10px from the top edge */
div {
  background-position: 20px 10px;
}
```

## Footnote

[""background-position - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/background-position) Retrieved April 4, 2023."
What does the `background-size` CSS property do?,"The `background-size` CSS property is used to specify the size of a background image within an element. It allows you to control how the image is scaled and stretched to fit the element, either using keywords, percentages, or length values to define the dimensions.

Spaces not covered by a background image are filled with the `background-color` property, and the background color will be visible behind background images that have transparency/translucency

To specify the size of multiple background images, separate the value for each one with a comma.

## Footnote

[""background-size - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/background-size) Retrieved April 4, 2023."
What is the syntax of the `background-size` CSS property do?,"The `background-size` property can accept one or two values:

* **One value**: This value sets the width of the background image. The height is then automatically calculated to maintain the image's aspect ratio. If the value is a keyword, it applies to both width and height.

* **Two values**: The first value sets the width, and the second value sets the height of the background image. Providing specific dimensions can distort the image if the aspect ratio is not maintained.

Keywords available for `background-size`:

* `auto`: The image maintains its original size (default).
* `cover`: Scales the image, maintaining its aspect ratio, to cover the entire element. One dimension may be cropped if the aspect ratios of the element and the image differ.
* `contain`: Scales the image, maintaining its aspect ratio, to fit within the element. Empty space may be visible if the aspect ratios of the element and the image differ.

Here's the syntax for the `background-size` property:

```
background-size: value1 value2;
```

Examples:

1.- Using keywords:

```
/* Scale the background image to cover the entire element */
background-size: cover;
```

2.- Using percentages:

```
/* Scale the background image to be 50% of the element's width and 100% of its height */
background-size: 50% 100%;
```

3.- Using length values:

```
/* Set the background image width to 200px and height to 100px */
background-size: 200px 100px;
```

4.- Using one-value syntax

```
/* Set the background image width to 50% (height becomes 'auto') */
background-size: 50%;
```

5.- Setting the size of multiple backgrounds (comma separated)

```
/* Multiple backgrounds */
background-size: auto, auto; /* Not to be confused with `auto auto` */
background-size: 50%, 25%, 25%;
background-size: 6px, auto, contain;
```

## Footnote

[""background-size - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/background-size) Retrieved April 4, 2023."
What does `background-repeat` CSS property do?,"The `background-repeat` property in CSS is used to control the repeating behavior of a background image within an element. By default, background images are tiled (repeated) both horizontally and vertically to fill the entire element.

## Footnote

[""background-repeat - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat) Retrieved April 5, 2023."
What is the syntax of the `background-repeat` CSS property?,"The `background-repea`t property allows you to modify this behavior by specifying whether the image should be repeated, and in which direction(s).

The property accepts the following values:

* `repeat`: The default value. The background image is repeated both horizontally and vertically.
* `repeat-x`: The background image is repeated only horizontally.
* `repeat-y`: The background image is repeated only vertically.
* `no-repeat`: The background image is not repeated, and it will be displayed only once, covering the area according to the `background-size` property.

Example:

```
div {
  background-image: url('path/to/your/image.png');
  background-repeat: no-repeat;
}
```

In this example, the background image will be displayed once, without repeating, within the specified div element.

## Footnote

[""background-repeat - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat) Retrieved April 5, 2023."
What does the `background-origin` CSS property do?,"The `background-origin` CSS property is used to determine the background positioning area, which is the area within an element where the background image is positioned and/or clipped. This property works together with other background-related properties such as `background-position`, `background-clip`, and `background-size`.

## Footnote

[""background-origin - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/background-origin) Retrieved April 5, 2023."
What is the syntax of the `background-origin` CSS property do?,"The `background-origin` property accepts the following values:

* `padding-box` (default): The background position is relative to the element's padding box. The background image will be placed within the padding box, and it will be clipped if it extends beyond the padding.

* `border-box`: The background position is relative to the element's border box. The background image will be placed within the border box, and it will be clipped if it extends beyond the border.

* `content-box`: The background position is relative to the element's content box. The background image will be placed within the content box, and it will be clipped if it extends beyond the content.

Example:

```
div {
  background-image: url('path/to/your/image.png');
  background-origin: content-box;
}
```

In this example, the background image will be positioned within the content box of the specified div element, and it will be clipped if it extends beyond the content box.

## Footnote

[""background-origin - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/background-origin) Retrieved April 5, 2023."
What does the `background-clip` CSS property do?,"The `background-clip` CSS property is used to determine the area within an element where the background image, color, or both, will be clipped or trimmed. In other words, **it defines the area beyond which the background will not be visible**. This property works in conjunction with other background-related properties, such as `background-origin` and `background-position`.

## Footnote

[""background-clip - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/background-clip) Retrieved April 5, 2023."
What is the syntax of the `background-clip` CSS property do?,"The `background-clip` property accepts the following values:

* `border-box` (default): The background is clipped to the element's border box. The background image and/or color will be visible up to the border edges.

* `padding-box`: The background is clipped to the element's padding box. The background image and/or color will be visible up to the padding edges but won't be visible in the border area.

* `content-box`: The background is clipped to the element's content box. The background image and/or color will be visible only within the content area, not extending to the padding or border areas.

Example:

```
div {
  background-image: url('path/to/your/image.png');
  background-color: lightblue;
  background-clip: padding-box;
}
```

In this example, both the background image and the light blue background color will be clipped to the padding box of the specified div element. They will not extend to the border area.

## Footnote

[""background-clip - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/background-clip) Retrieved April 5, 2023."
What does the `background-attachment` CSS property do?,"The `background-attachment` CSS property is used to determine whether a background image should scroll along with the content or remain fixed in the viewport when the user scrolls the page. This property only affects background images and not background colors.

## Footnote

[""background-attachment - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/background-attachment) Retrieved April 5, 2023."
What is the syntax of the `background-attachment` CSS property do?,"The `background-attachment` property accepts the following values:

* `scroll` (default): The background is fixed relative to the element itself and does not scroll with its contents. (It is effectively attached to the element's border.)
* `fixed`: The background image remains fixed in the viewport and does not scroll with the content.
* `local`: The background is fixed relative to the element's contents. If the element has a scrolling mechanism, the background scrolls with the element's contents, and the background painting area and background positioning area are relative to the scrollable area of the element rather than to the border framing them.

Example:

```
div {
  background-image: url('path/to/your/image.png');
  background-attachment: fixed;
}
```

In this example, the background image in the specified div element will remain fixed in the viewport and will not scroll along with the content of the element.

## Footnote

[""background-attachment - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/background-attachment) Retrieved April 5, 2023."
What does the `background-color` CSS property do?,"The `background-colo`r CSS property is used to set the background color of an HTML element. This property defines the color that will be displayed behind the content, padding, and border of the element. The background color can be specified using predefined color names, RGB, RGBA, HSL, HSLA, or hexadecimal color codes.

It's worth noting that if an element has both a background color and a background image, the background color will be displayed underneath the background image. If the background image is partially or fully transparent, the background color will be visible through the transparent areas of the image.

## Footnote

[""background-color - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/background-color) Retrieved April 5, 2023."
What is the syntax of the `background-color` CSS property do?,"The background color can be specified using predefined color names, RGB, RGBA, HSL, HSLA, or hexadecimal color codes.

Example:

```
div {
  background-color: #ff5733;
}
```

In this example, the specified div element will have a background color with the hexadecimal value `#ff5733`, which is a shade of orange.

## Footnote

[""background-color - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/background-color) Retrieved April 5, 2023."
What does the `background-blend-mode` CSS property do?,"The `background-blend-mode` CSS property is used to define how an element's background images or background color should blend with each other. It sets the blending mode of each background layer, except for the bottom-most one, which is always set to `""normal""` blending mode. This allows you to create interesting visual effects by combining multiple background images and colors with different blending modes.

## Footnote

[""background-blend-mode - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/background-blend-mode) Retrieved April 5, 2023."
What is the syntax of the `background-blend-mode` CSS property?,"The `background-blend-mode` property accepts various blending modes as values, including but not limited to:

* `normal`: Default value. No blending occurs between the background layers.
* `multiply`: Multiplies the colors of the background layers, resulting in a darker image.
* `screen`: Inverts, multiplies, and then inverts the colors again, resulting in a lighter image.
* `overlay`: Combines multiply and screen blend modes, darkening the light colors and lightening the dark colors.
* `darken`: Retains the darkest color of the background layers.
* `lighten`: Retains the lightest color of the background layers.
* `color-dodge`: Divides the bottom layer by the inverted top layer, lightening the image.
* `color-burn`: Divides the inverted bottom layer by the top layer and inverts the result, darkening the image.
* `hard-light`: Similar to overlay, but with the layers' roles reversed.
* `soft-light`: A softer version of hard-light, with less contrast.
* `difference`: Subtracts the darker color from the lighter color in the background layers.
* `exclusion`: Similar to difference, but with lower contrast.

**Note**: We can apply several blend modes, separated by commas.

**Syntax**

```
/* One value */
background-blend-mode: normal;

/* Two values, one per background */
background-blend-mode: darken, luminosity;

/* Global values */
background-blend-mode: inherit;
background-blend-mode: initial;
background-blend-mode: revert;
background-blend-mode: revert-layer;
background-blend-mode: unset;
```

Example: 

```
div {
  background-image: url('path/to/your/image.png');
  background-color: #ff5733;
  background-blend-mode: multiply;
}
```
In this example, the specified div element has a background image and a background color. The multiply blend mode is applied, causing the background image and color to blend, resulting in a darker image where they overlap.

## Footnote

[""background-blend-mode - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/background-blend-mode) Retrieved April 5, 2023."
List the 8 properties the `background` CSS shortcut property sets,"* `background-image` — Specifies an image from a file or a generated color gradient image.
* `background-position` — Sets the initial position of the background image.
* `background-size` — Specifies how large to render the background image within the element.
* `background-repeat` — Determines whether to tile the image if necessary to fill the entire element.
* `background-origin` — Determines whether background positioning is relative to the element’s `border-box`, `padding-box` (initial value), or `content-box`.
* `background-clip` — Specifies whether the background should fill the element’s `border-box` (initial value), `padding-box`, or `content-box`.
* `background-attachment` — Specifies whether the background image will `scroll `up and down along with the element (the initial value), or if the image will be `fixed` in place in the viewport. Note that using the value `fixed` can have negative performance implications on the page.
* `background-color` — Specifies a solid background color. This will render behind any background image.

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
Initial values of the `background` CSS shortcut property,"`background-image: none`
`background-position: 0% 0%`
`background-size: auto auto`
`background-repeat: repeat`
`background-origin: padding-box`
`background-clip: border-box`
`background-attachment: scroll`
`background-color: transparent`

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/background#formal_definition)*"
Why should you avoid using `background` CSS shortcut property?,Because it sets 8 CSS properties at the same time. Even if you don't add values for all of them.
What happens when you apply multiple images to a `background-image` CSS property?,"When you apply multiple background images, those listed first render in front of those listed afterward.

Example: 

```
background-image: url(bear.jpg), linear-gradient(to bottom, #57b, #148);
```

In this example, `bear.jpg` will cover the linear gradient. The gradient won’t be visible. To make it visible you will need to apply a blend mode with `background-blend-mode` CSS property

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
How can you blend 2 different images in the same `background`?,"You could: 

```
.blend {
  min-height: 400px;
  /* A comma separates two background images. */
  background-image: url(images/bear.jpg), url(images/bear.jpg);
  /* Specifies one value to apply to both background images */
  background-size: cover;
  background-repeat: no-repeat;
  /* Applies different background positions to each image */
  background-position: -30vw, 30vw;
  /* Applies the blend mode */
  background-blend-mode: multiply;
}
```

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What does `mix-blend-mode` CSS property do?,"The `mix-blend-mode` CSS property sets how an element's content should blend with the content of the element's parent and the element's background.

In other words, it lets you blend multiple images but, it’s limited to the background colors or images of one element.

## Footnote

[""mix-blend-mode - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode) Retrieved April 10, 2023."
What is the syntax of the `mix-blend-mode` CSS property?,"The `mix-blend-mode` CSS property accepts a [blend-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/blend-mode) keyword.

Here's an example of using mix-blend-mode:

```
<!DOCTYPE html>
<html>
<head>
<style>
  .container {
    position: relative;
  }

  .image1, .image2 {
    position: absolute;
    width: 300px;
    height: 200px;
  }

  .image1 {
    background-image: url('image1.png');
  }

  .image2 {
    background-image: url('image2.png');
    mix-blend-mode: multiply;
  }
</style>
</head>
<body>
  <div class=""container"">
    <div class=""image1""></div>
    <div class=""image2""></div>
  </div>
</body>
</html>
```

In this example, there are two elements with background images (`image1.png` and `image2.png`) stacked on top of each other inside a container. The `mix-blend-mode property` is set to ""multiply"" for the second element (image2), which means that the content and background of the second element will be blended with the content and background of the first element using the ""multiply"" blending mode.

## Footnote

[""mix-blend-mode - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode) Retrieved April 10, 2023."
"Given the following html:

```
<div class=""blend"">
  <h1>Ursa Major</h1>
</div>
```
Propose CSS rulesets to generate the following image","```
.blend {
  background-image: url(""images/bear.jpg"");
  background-size: cover;
  background-position: center;
  padding: 5em 0 10em;
}

.blend > h1 {
  margin: 0;
  font-family: Helvetica, Arial, sans-serif;
  font-size: 6rem;
  text-align: center;
  /* Uses hard-light blend mode */
  mix-blend-mode: hard-light;
  /* Sets text and background color for the foreground element */
  background-color: #c33;
  color: #808080;
  border: 0.1em solid #ccc;
  border-width: 0.1em 0;
}
```

## Footnote

*Source: Keith J. Grant (2018). CSS in Depth. Manning Publications.*"
What are the differences between `background-blend-mode` and `mix-blend-mode` CSS properties?,"The `background-blend-mode` and `mix-blend-mode` CSS properties are related to blending in CSS, but they serve different purposes and apply to different aspects of an element:

1.- `background-blend-mode`:

* Blends an element's background images and background color within the element itself.
* Sets the blending mode of each background layer, except for the bottom-most one.
* Affects only the blending of background layers within a single element.
* Does not impact how the element blends with other elements or its parent.

2.- `mix-blend-mode`:

* Blends an element's content and background with the content and background of the element's parent and elements stacked below it.
* Affects the blending of the entire element (content and background) with other elements in the stacking context.
* Creates interesting visual effects and image composition techniques by blending the current element with the elements beneath it in the stacking order.

## Footnote

[""mix-blend-mode - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode)
[""background-blend-mode - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/background-blend-mode)
Retrieved April 10, 2023."

Question,Answer
shadows,shadows
Which CSS properties can create shadows?,"The CSS properties that can create shadows are:

* `box-shadow`: used to apply a shadow effect to block-level elements or boxes.
* `text-shadow`: used to apply a shadow effect to text content.

## Footnote

[""box-shadow - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow) and [""text-shadow - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow) Retrieved April 12, 2023."
What does the `box-shadow` CSS property do?,"The `box-shadow` property enables you to cast a drop shadow from the frame of almost any element. If a `border-radius` is specified on the element with a box shadow, the box shadow takes on the same rounded corners.  You can set multiple effects separated by commas. 

A box shadow is described by X and Y offsets relative to the element, blur and spread radius, and color.

## Footnote

[""box-shadow - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow) Retrieved April 12, 2023."
Syntax of `box-shadow` CSS property,"You can specify a single `box-shadow` using:

* Two, three, or four `<length>` values.
    - If only two values are given, they are interpreted as `<offset-x>` and `<offset-y>` values.
    - If a third value is given, it is interpreted as a `<blur-radius>`.
    - If a fourth value is given, it is interpreted as a `<spread-radius>`.
* Optionally, the inset keyword.
* Optionally, a `<color>` value.

**Note**: To specify multiple shadows, provide a comma-separated list of shadows.

## Footnote

[""box-shadow - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow) Retrieved April 12, 2023."
Possible values of `box-shadow` CSS property,"* `inset` - if not specified, the shadow is assumed to be a drop shadow (as if the box were raised above the content). The presence of the `inset` keyword changes the shadow to one inside the frame (as if the content was debossed inside the box). Inset shadows are drawn inside the border (even transparent ones), above the background, but below content.

* `<offset-x>` - The `<length>` value specifies the horizontal distance. Negative values place the shadow to the left of the element.

* `<offset-y>` - The `<length>` values specifies the vertical distance. Negative values place the shadow above the element.

* `<blur-radius>` - This is a third `<length>` value. The larger this value, the bigger the blur. Negative values are not allowed. If not specified, it will be 0 (the shadow's edge is sharp).

* `<spread-radius>` - This is a fourth `<length>` value. Positive values will cause the shadow to expand and grow bigger, negative values will cause the shadow to shrink. If not specified, it will be 0 (the shadow will be the same size as the element).

* `<color>` - See [`<color>`](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value) values for possible keywords and notations. If not specified, it defaults to current color.

**Note:** If both `<offset-x>` and `<offset-y>` are set to 0, the shadow is placed behind the element (and may generate a blur effect if `<blur-radius>` and/or `<spread-radius>` is set).

## Footnote

[""box-shadow - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow) Retrieved April 12, 2023."
"What happens when the values `x-offset`, `y-offset`, and `blur` of `box-shadow` CSS property are all zero?","The box shadow will be a solid-colored outline of equal-size on all sides. The shadows are drawn back to front, so the first shadow sits on top of subsequent shadows.

For example: 

HTML

```
<div><p>Hello World</p></div>
```

CSS

```
p {
  box-shadow: 0 0 0 2em #f4aab9, 0 0 0 4em #66ccff;
  margin: 4em;
  padding: 1em;
}
```

## Footnote

[""box-shadow - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow#setting_zero_for_offset_and_blur) Retrieved April 12, 2023."
Difference between `box-shadow` and `filter: drop-shadow()`,"The difference between `box-shadow` and `filter: drop-shadow()` really boils down to the CSS box model. One sees it and the other disregards it. There are other differences that distinguish the two in terms of browser support, performance and such, but the way the two treat the box model is the key difference.

## Footnote

*Source [css-tricks](https://css-tricks.com/breaking-css-box-shadow-vs-drop-shadow/#aa-wrapping-up)*"
`drop-shadow()` CSS function,"The `drop-shadow()` CSS function applies a drop shadow effect to the input image. Its result is a [filter-function](https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function).

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/drop-shadow)*"
List the types of shadows that can occure when a light shines on an object,"There are two kinds of shadows that occur when a light shines on an object, a `drop shadow` and a `form shadow`.

* A `drop shadow` is cast when an object blocks a light source. A drop shadow can vary in tone and value. 

* A `form shadow`, on the other hand, is the side of an object facing away from the light source. A form shadow has softer, less defined edges than a drop shadow. Form shadows illustrate the volume and depth of an object.

## Footnote

*Source [css-tricks](https://css-tricks.com/getting-deep-into-shadows/#aa-light-sources-and-color)*"
How are `box-shadow` comma separated shadow values stacked,"Shadows stack on top of one another, in the order they are declared where the top shadow is the first one in the list.

## Footnote

*Source [css-tricks](https://css-tricks.com/getting-deep-into-shadows/#aa-layering-shadows)*"
What does the `text-shadow` CSS property do?,"The `text-shadow` CSS property adds shadows to text. It accepts a comma-separated list of shadows to be applied to the text and any of its decorations. Each shadow is described by some combination of X and Y offsets from the element, blur radius, and color.

## Footnote

[""text-shadow - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow) Retrieved April 12, 2023."
What is the syntax of the `text-shadow` CSS property?,"`text-shadow` property is specified as a comma-separated list of shadows.

Each shadow is specified as two or three `<length>` values, followed optionally by a `<color>` value. The first two `<length>` values are the `<offset-x>` and `<offset-y>` values. The third, optional, `<length>` value is the `<blur-radius>`. The `<color>` value is the shadow's color.

When more than one shadow is given, shadows are applied front-to-back, with the first-specified shadow on top.

Example: 

```
/* offset-x | offset-y | blur-radius | color */
text-shadow: 1px 1px 2px black;

/* color | offset-x | offset-y | blur-radius */
text-shadow: #fc0 1px 0 10px;

/* offset-x | offset-y | color */
text-shadow: 5px 5px #558abb;

/* color | offset-x | offset-y */
text-shadow: white 2px 5px;

/* offset-x | offset-y
/* Use defaults for color and blur-radius */
text-shadow: 5px 10px;

/* Global values */
text-shadow: inherit;
text-shadow: initial;
text-shadow: revert;
text-shadow: revert-layer;
text-shadow: unset;
```

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow)*"
`text-shadow` CSS property values,"* `<color>` - Optional. The color of the shadow. It can be specified either before or after the offset values. If unspecified, the color's value is left up to the user agent.

* `<offset-x>` `<offset-y>` - Required. These `<length>` values specify the shadow's distance from the text. `<offset-x>` specifies the horizontal distance; a negative value places the shadow to the left of the text. `<offset-y>` specifies the vertical distance; a negative value places the shadow above the text. If both values are 0, the shadow is placed directly behind the text, although it may be partly visible due to the effect of `<blur-radius>`.

* `<blur-radius>` - Optional. This is a `<length>` value. The higher the value, the bigger the blur; the shadow becomes wider and lighter. If not specified, it defaults to 0.

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow#values)*"
What is a *drop shadow*?,"A *drop shadow* is effectively a blurred, offset version of the input image's alpha mask, drawn in a specific color and composited below the image.

You create them using the  `drop-shadow()` CSS function

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/drop-shadow)*"
Reasons why shadows can help improve accessibility,"[Google conducted a study with low-vision participants](https://material.io/design/environment/light-shadows.html#research)  and concluded that using shadows and outlines:

* Increases the ease and speed of finding a component when scanning pages, and
* Improves one’s ability to determine whether or not a component is interactive.


 W3C says in it’s guidelines for [WCAG 2.0 standards](https://www.w3.org/WAI/WCAG21/Techniques/general/G18):

```[…] the designer might darken the background behind the letter, or add a thin black outline (at least one pixel wide) around the letter in order to keep the contrast ratio between the letter and the background above 4.5:1.```

## Footnote

*Source [css-tricks](https://css-tricks.com/getting-deep-into-shadows/#aa-shadows-and-accessibility)*"

Question,Answer
filter function,filter function
Explain the `filter-function` CSS data type?,"The `<filter-function>` CSS [data type](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Types) represents a graphical effect that can change the appearance of an input image. It is used in the `filter` and `backdrop-filter` CSS properties.

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function)*"
Explain the `blur()` CSS *filter-function*,"The `blur()` CSS function applies a Gaussian blur to the input image. Its result is a `<filter-function>`.

**Syntax**

```
blur(radius)
```
**Parameters**

* *radius* - The radius of the blur, specified as a `<length>`. A larger value will create more blur. 

Examples:

```
blur(0)        /* No effect */
blur(8px)      /* Blur with 8px radius */
blur(1.17rem)  /* Blur with 1.17rem radius */
```

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/blur)*"
Explain the `brightness()` CSS *filter-function*,"The `brightness()` CSS function applies a linear multiplier to the input image, making it appear brighter or darker. Its result is a `<filter-function>`.

**Syntax**

```
brightness(amount)
```

**Parameters**

* *amount* - The brightness of the result, specified as a `<number>` or a `<percentage>`. A value under 100% darkens the image, while a value over 100% brightens it. 

Examples:

```
brightness(0%)   /* Completely black */
brightness(0.4)  /* 40% brightness */
brightness(1)    /* No effect */
brightness(200%) /* Double brightness */
```

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/brightness)*"
Explain the `contrast()` CSS filter-function,"The `contrast()` CSS function adjusts the contrast of the input image. Its result is a `<filter-function>`.

**Syntax**

```
contrast(amount)
```

**Parameters**

* *amount* - The contrast of the result, specified as a `<number>` or a `<percentage>`. A value under 100% decreases the contrast, while a value over 100% increases it. A value of 0% will create an image that is completely gray, while a value of 100% leaves the input unchanged. 

Examples:

```
contrast(0)     /* Completely gray */
contrast(65%)   /* 65% contrast */
contrast(1)     /* No effect */
contrast(200%)  /* Double contrast */
```

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/contrast)*"
Explain the `drop-shadow()` CSS filter-function,"The `drop-shadow()` CSS function applies a drop shadow effect to the input image. Its result is a `<filter-function>.`

**Syntax**

```
drop-shadow(offset-x offset-y blur-radius color)
```

**Parameters**

* **offset-x** (required) - The horizontal offset for the shadow, specified as a `<length>` value. Negative values place the shadow to the left of the element.

* **offset-y** (required) - The vertical offset for the shadow, specified as a `<length>` value. Negative values place the shadow above the element.

* **blur-radius** (optional) - The shadow's blur radius, specified as a `<length>`. The larger the value, the larger and more blurred the shadow becomes. If unspecified, it defaults to 0, resulting in a sharp, unblurred edge. Negative values are not allowed.

* **color** (optional) - The color of the shadow, specified as a `<color>`. If unspecified, the value of the color property is used.

Examples:

```
/* Black shadow with 10px blur */
drop-shadow(16px 16px 10px black);

/* Reddish shadow with 1rem blur */
drop-shadow(.5rem .5rem 1rem #e23)
```

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/drop-shadow)*"
Explain the `grayscale()` CSS filter-function,"The `grayscale()` CSS function converts the input image to grayscale. Its result is a `<filter-function>`.

**Syntax**

```
grayscale(amount)
```

**Parameters**

* *amount* - The amount of the conversion, specified as a `<number>` or a `<percentage>`. A value of 100% is completely grayscale, while a value of 0% leaves the input unchanged. 

Examples:

```
grayscale(0)     /* No effect */
grayscale(.7)    /* 70% grayscale */
grayscale(100%)  /* Completely grayscale */
```

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/grayscale)*"
Explain the `hue-rotate()` CSS filter-function,"The `hue-rotate()` CSS function rotates the [hue](https://en.wikipedia.org/wiki/Hue) of an element and its contents. Its result is a `<filter-function>`.

**Syntax**

```
hue-rotate(angle)
```
**Parameters**

* *angle* - The relative change in hue of the input sample, specified as an `<angle>`. A value of 0deg leaves the input unchanged. A positive hue rotation increases the hue value, while a negative rotation decreases the hue value. 

Examples:

```
hue-rotate(-90deg)  /* Same as 270deg rotation */
hue-rotate(0deg)    /* No effect */
hue-rotate(90deg)   /* 90deg rotation */
hue-rotate(.5turn)  /* 180deg rotation */
hue-rotate(405deg)  /* Same as 45deg rotation */
```

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/hue-rotate)*"
Explain the `invert()` CSS filter-function,"The `invert()` CSS function inverts the color samples in the input image. Its result is a `<filter-function>`.

**Syntax**

```
invert(amount)
```
**Parameters**

* *amount* - The amount of the conversion, specified as a `<number>` or a `<percentage>`. A value of 100% is completely inverted, while a value of 0% leaves the input unchanged. The initial value for interpolation is 0. 

Examples:

```
invert(0)     /* No effect */
invert(.6)    /* 60% inversion */
invert(100%)  /* Completely inverted */
```

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/invert)*"
Explain the `opacity()` CSS filter-function,"The `opacity()` CSS function applies transparency to the samples in the input image. Its result is a `<filter-function>`.

**Syntax**

```
opacity(amount)
```
**Parameters**

* *amount* - The amount of the conversion, specified as a `<number>` or a `<percentage>`. A value of `0%` is completely transparent, while a value of `100%` leaves the input unchanged. The initial value for interpolation is `1`.

Examples:

```
opacity(0%)   /* Completely transparent */
opacity(50%)  /* 50% transparent */
opacity(1)    /* No effect */
```

**Note:**  This function is similar to the more established [opacity](https://developer.mozilla.org/en-US/docs/Web/CSS/opacity) property. The difference is that with filters, some browsers provide hardware acceleration for better performance.

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/opacity)*"
Explain the `saturate()` CSS filter-function,"The `saturate()` CSS function super-saturates or desaturates the input image. Its result is a `<filter-function>`.

**Syntax**

```
saturate(amount)
```

**Parameters**

* *amount* - The amount of the conversion, specified as a `<number>` or a `<percentage>`. A value of `0%` is completely unsaturated, while a value of `100%` leaves the input unchanged. The initial value for interpolation is `1`.

Examples:

```
saturate(0)     /* Completely unsaturated */
saturate(.4)    /* 40% saturated */
saturate(100%)  /* No effect */
saturate(200%)  /* Double saturation */
```

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/saturate)*"
Explain the `sepia()` CSS filter-function,"The `sepia()` CSS function converts the input image to sepia, giving it a warmer, more yellow/brown appearance. Its result is a `<filter-function>`.

**Syntax**

```
sepia(amount)
```

**Parameters**

* *amount* - The amount of the conversion, specified as a `<number>` or a `<percentage>`. A value of `100%` is completely sepia, while a value of `0%` leaves the input unchanged. The initial value for interpolation is `0`.

Examples:

```
sepia(0)     /* No effect */
sepia(.65)   /* 65% sepia */
sepia(100%)  /* Completely sepia */
```

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/sepia)*"

Question,Answer
colours,colours
How can you specify a `<color>` CSS data type?,"A `<color>` can be defined in any of the following ways:

* Using a keyword (such as `blue` or `transparent`). 
* Using `#-hexadecimal` or `rgb()`, `hsl()`, `hwb()` functional notations to specify a color in the [sRGB color space](https://en.wikipedia.org/wiki/SRGB).

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value)*"
What does the `currentColor` keyword represent?,"The `currentcolor` keyword represents the value of an element's CSS `color` property. This lets you use the `color` value on properties that do not receive it by default.

Example:

```
<div style=""color: blue; border: 1px dashed currentcolor;"">
  The color of this text is blue.
  <div style=""background: currentcolor; height:9px;""></div>
  This block is surrounded by a blue border.
</div>
```

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#currentcolor_keyword)*"
What is the *RGB color model*?,"The *RGB color model* defines a given color in the sRGB color space according to its *red*, *green*, and *blue* components. An optional alpha component represents the color's transparency.

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb_color_model)*"
How can you specify an *RGB color model*?,"RGB colors can be expressed through both `hexadecimal` (prefixed with `#`) and functional (`rgb()`, `rgba()`) notations.

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb_color_model)*"
What is the `contrast ratio`?,"The `contrast ratio` explains the difference between the lightest color brightness and the darkest color brightness in a given range.

## Footnote

*Source [css-trics](https://css-tricks.com/understanding-web-accessibility-color-contrast-guidelines-and-ratios/#aa-what-does-the-ratio-mean)*"
Why is the `contrast ratio` important?,"A good contrast between text or graphics against the background color makes the content of your site readable.

It is particularly beneficial to users with certain types of color blindness and other similar conditions, who experience low contrast, and have trouble differentiating between similar colors.

It is good to have a cool design on your website, but the design is worthless if your users can't read your content.

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/Accessibility/Understanding_WCAG/Perceivable/Color_contrast)*"
What are the recomended constrast rations in WCAG guidelines?,"## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/Accessibility/Understanding_WCAG/Perceivable/Color_contrast)*"
How can you check the contrast ratio of 2 colors?,Using online tool such as [contrast-ratio.com](https://contrast-ratio.com/).
What does CSS `color-scheme` property do?,"The CSS `color-scheme` property lets the browser use (or choose) to display certain elements with its dark or light default styling.

The `color-scheme` property is defined in the [CSS Color Adjustment Module Level 1 specification](https://w3c.github.io/csswg-drafts/css-color-adjust/#color-scheme-prop), where it is called the “*Opting Into a Preferred Color Scheme*” property.

## Footnote

*Source [css-tricks](https://css-tricks.com/almanac/properties/c/color-scheme/)*"
Syntax of CSS `color-scheme` property,"**Syntax**

```
color-scheme: normal;
color-scheme: light;
color-scheme: dark;
color-scheme: light dark;
color-scheme: only light;
```

The `color-scheme` property's value must be one of the following keywords:

* **normal** - Indicates that the element isn't aware of any color schemes, and so should be rendered using the browser's default color scheme.
* **light** - Indicates that the element can be rendered using the operating system light color scheme.
* **dark** - Indicates that the element can be rendered using the operating system dark color scheme.
* **only** - Forbids the user agent from overriding the color scheme for the element.


Can be used to turn off color overrides caused by [Chrome's Auto Dark Theme,](https://developer.chrome.com/blog/auto-dark-theme/#per-element-opt-out) by applying `color-scheme: only light;` on a specific element or `:root`.

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme)*"
How can we apply a *dark theme* or a *light theme* depending on the user’s system or browser preferences?,"With the `prefers-color-scheme` CSS media feature.

The `prefers-color-scheme` CSS media feature is used to detect if a user has requested `light` or `dark` color themes. A user indicates their preference through an operating system setting (e.g. `light` or `dark` mode) or a user agent setting.

It takes two values:

* `light`: When a user has selected that they prefer a light theme or has no active preferences
* `dark`: When a user has selected a dark display in their settings

Example:

```
body {
  --bg-color: white; 
  --text-color: black;

  background-color: var(--bg-color);
  color: var(--text-color);
}

@media screen and (prefers-color-scheme: dark) {
  body {
    --bg-color: black;
    --text-color: white;
  }
}
```

## Footnote

[""A Complete Guide to CSS Media Queries | CSS-Tricks"" (CSS-Tricks).](https://css-tricks.com/a-complete-guide-to-css-media-queries/#aa-prefers-color-scheme) Retrieved February 8, 2024."
What are the differences between `color-scheme` and `prefers-color-scheme`?,"`color-scheme` is all about default appearances. It tells the browser to update the colors in its stylesheet.

Meanwhile, `prefers-color-scheme` is all about applying the styles we write in our own stylesheet, and only when that condition is met. In other words, any style rules we write inside the media query are applied — it has nothing to do with the browser’s default styles.

## Footnote

[""color-scheme | CSS-Tricks"" (CSS-Tricks).](https://css-tricks.com/almanac/properties/c/color-scheme/#aa-color-scheme-is-different-than-prefers-color-scheme) Retrieved February 8, 2024."
What is a `color` CSS data type?,"The `<color>` CSS data type represents a color. 

A `<color>` may also include an alpha-channel transparency value, indicating how the color should composite with its background.

## Footnote

*Source [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value)*"

Question,Answer
color notation,color notation
What is the **Hex color notation** for colors in CSS?,"Hexadecimal notation represents colors using 6 digits (3 pairs), consisting of numbers (0-9) and letters (A-F). Each pair represents the red, green, and blue (RGB) components of the color.

 It is also possible to add an extra alpha pair of digits indicating its transparency, as a case-insensitive hexadecimal number between 0 and ff (255)).
 
It can be used everywhere a `<color>` type is allowed.

For example:

```
#RGB        // The three-value syntax
#RGBA       // The four-value syntax
#RRGGBB     // The six-value syntax
#RRGGBBAA   // The eight-value syntax
```

## Footnote

[""`<hex-color>` - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/hex-color) Retrieved April 13, 2023."
What is the syntax of **Hex color notation** in CSS?,"**Syntax**

```
#RGB        // The three-value syntax
#RGBA       // The four-value syntax
#RRGGBB     // The six-value syntax
#RRGGBBAA   // The eight-value syntax
```

**Values**
**R** or **RR** - The red component of the color, as a case-insensitive hexadecimal number between `0` and `ff` (`255`)). If there is only one number, it is duplicated: `1` means `11`.

**G** or **GG** - The green component of the color, as a case-insensitive hexadecimal number between `0` and `ff` (`255`)). If there is only one number, it is duplicated: `c` means `cc`.

**B** or **BB**- The blue component of the color, as a case-insensitive hexadecimal number between `0` and `ff` (`255`)). If there is only one number, it is duplicated: `9` means `99`.

**A** or **AA** Optional - The alpha component of the color, indicating its transparency, as a case-insensitive hexadecimal number between `0` and `ff` (`255`)). If there is only one number, it is duplicated: `e` means `ee`. `0` represents a fully transparent color, and `ff` a fully opaque one.

## Footnote

[""`<hex-color>` - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/hex-color) Retrieved April 13, 2023."
What does the `rgb()` functional notation do?,"The `rgb()` functional notation expresses a color according to its red, green, and blue components. An optional alpha component represents the color's transparency.

It can be used everywhere a `<color>` type is allowed.

**Note**: The legacy `rgba()` syntax is an alias for `rgb()`, accepting the same parameters and behaving in the same way.

## Footnote

[""rgb() - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/rgb) Retrieved April 14, 2023."
What is the syntax of the `rgb()` functional notation?,"```
/* Syntax with space-separated values */
rgb(255 255 255)
rgb(255 255 255 / .5)

/* Syntax with comma-separated values */
rgb(255, 255, 255)
rgb(255, 255, 255, .5)
```

The `rgb()` function accepts three space-separated values, representing respectively values for red, green, and blue. Optionally it may also be given a slash `/` followed by a fourth value, representing alpha.

The function also accepts a legacy syntax in which all values are separated with commas.

**Values**

* `red, green, blue` - These values represent color channels and may each be a `<number>` clamped between 0 and 255, or a `<percentage>`, or the keyword `none`. You can't mix percentages and numbers.
* `alpha` - [Optional] A `<number>` clamped between 0 and 1, or a `<percentage>`. This value represents opacity, where the number 1 corresponds to 100% (full opacity). It defaults to 100%.

## Footnote

[""rgb() - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/rgb#syntax) Retrieved April 14, 2023."
What does the `hsl()` functional notation do?,"The `hsl()` functional notation expresses an sRGB color according to its hue, saturation, and lightness components. An optional alpha component represents the color's transparency.

It can be used everywhere a `<color>` type is allowed.

**Note**: The legacy `hsla()` syntax is an alias for `hsl()`, accepting the same parameters and behaving in the same way..

## Footnote

[""hsl() - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hsl) Retrieved April 14, 2023."
What is the syntax of the `hsl()` functional notation?,"```
/* Syntax with space-separated values */
hsl(hue saturation lightness)
hsl(hue saturation lightness / alpha)

/* Syntax with comma-separated values */
hsl(hue, saturation, lightness)
hsl(hue, saturation, lightness, alpha)
```
The `hsl()` function accepts three space-separated values, representing respectively hue, saturation, and lightness. Optionally it may also be given a slash `/` followed by a fourth value, representing alpha.

The function also accepts a legacy syntax in which all values are separated with commas.

**Values**

* `hue` -  An `<angle>` of the color wheel given in one of the following units: *deg*, *rad*, *grad*, or *turn*. When written as a unitless <`number>`, it is interpreted as degrees.
* `saturation` - A `<percentage>` where 100% is completely saturated, while 0% is completely unsaturated (gray).
* `lightness` - A `<percentage>` where 100% is white, 0% is black, and 50% is ""normal"".
* `alpha` - [Optional]  A `<percentage>` or a `<number>` between 0 and 1, where the number 1 corresponds to 100% and means full opacity, while 0 corresponds to 0% and means fully transparent.

## Footnote

[""hsl() - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hsl#syntax) Retrieved April 14, 2023."
What does the `hwb()` functional notation do?,"The `hwb()` functional notation expresses a given color according to its hue, whiteness, and blackness. An optional alpha component represents the color's transparency.

## Footnote

[""hwb() - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hwb) Retrieved April 14, 2023."
What is the syntax of the `hwb()` functional notation?,"```
hwb(194 0% 0%) /* #00c3ff */
hwb(194 0% 0% / .5) /* #00c3ff with 50% opacity */
```

**Note**: The HWB function does not use commas to separate its values as with other color functions and the optional alpha value needs to be preceded with a forward slash (`/`) if specified.

**Values**

* `hue` -  An `<angle>` of the color wheel given in one of the following units: *deg*, *rad*, *grad*, or *turn*. When written as a unitless <`number>`, it is interpreted as degrees.
* `W` - (whiteness) specifies the amount of white to mix in, as a percentage from 0% (no whiteness) to 100% (full whiteness).
* `B` -  (blackness) specifies the amount of black to mix in, also from 0% (no blackness) to 100% (full blackness).
* `alpha` - [Optional]  A `<percentage>` or a `<number>` between 0 and 1, where the number 1 corresponds to 100% and means full opacity, while 0 corresponds to 0% and means fully transparent.

## Footnote

[""hwb() - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hwb#syntax) Retrieved April 14, 2023."
When is it recommended to use **Hex color notation**?,It is recommended to use **Hex color notation** when you want to define colors in a shorter and more compact format. It is commonly used for simple colors and is widely supported by browsers.
When is it recommended to use **RGB functional notation**?,"It is recommended to use **RGB functional notation** when you want to define colors using the Red, Green, and Blue channels. This is especially useful when working with colors in a digital context, as it allows for easy manipulation of individual color channels and direct input from color pickers."
When is it recommended to use **HSL functional notation**?,"It is recommended to use **HSL functional notation** when you want to define colors based on Hue, Saturation, and Lightness. This color model is more intuitive for designers, as it allows them to control the color hue and adjust saturation and lightness independently."
When is it recommended to use **HWB functional notation**?,"It is recommended to use **HWB functional notation** when you want to define colors using the Hue, Whiteness, and Blackness channels. This color model is useful for making color adjustments in a more intuitive manner, as it separates the hue from the brightness and saturation, allowing for easier manipulation. However, it is not as widely supported as the other color models."

Question,Answer
color theory,color theory
What is **color theory**?,"**Color theory** is the collection of rules and guidelines which designers use to communicate with users through appealing color schemes in visual interfaces. To pick the best colors every time, designers use a color wheel and refer to extensive collected knowledge about human optical ability, psychology, culture and more.

## Footnote

[""What is Color Theory?"" (The Interaction Design Foundation).](https://www.interaction-design.org/literature/topics/color-theory) Retrieved April 14, 2023."
What is a **color wheel**?,"The **color wheel** is a circular diagram that organizes colors based on their relationship to one another. It typically consists of 12 colors, with *primary*, *secondary*, and *tertiary* colors.

## Footnote

[""Color wheel - MDN Web Docs Glossary: Definitions of Web-related terms | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Glossary/Color_wheel) Retrieved April 17, 2023."
What are **primary colors**?,"**Primary colors** are the foundational colors that cannot be created by mixing other colors. In the RGB color model, these are `red`, `green`, and `blue` (RGB). In the traditional color wheel, they are `red`, `yellow`, and `blue` (RYB).

## Footnote

[""Color wheel - color theory and calculator | Canva Colors"" (Canva's Design Wiki).](https://www.canva.com/colors/color-wheel/) Retrieved April 17, 2023."
What are **secondary colors**?,"**Secondary colors** are created by mixing equal parts of two primary colors. In the RGB model, these are `cyan`, `magenta`, and `yellow` (CMY). In the traditional color wheel, they are `green`, `orange`, and `purple`.

## Footnote

[""Color wheel - color theory and calculator | Canva Colors"" (Canva's Design Wiki).](https://www.canva.com/colors/color-wheel/) Retrieved April 17, 2023."
What are **tertiary colors**?,"**Tertiary colors** are created by mixing equal parts of a primary and a secondary color. 

Examples include `red-orange`, `yellow-green`, and `blue-purple`.

## Footnote

[""Color wheel - color theory and calculator | Canva Colors"" (Canva's Design Wiki).](https://www.canva.com/colors/color-wheel/) Retrieved April 17, 2023."
What are **complementary colors**?,"**Complementary colors** are pairs of colors that sit opposite each other on the color wheel. When used together, they create a strong visual contrast. 

Examples include `red` and `green`, `blue` and `orange`, and `yellow` and `purple`.

## Footnote

[""Color wheel - color theory and calculator | Canva Colors"" (Canva's Design Wiki).](https://www.canva.com/colors/color-wheel/) Retrieved April 17, 2023."
What are **analogous colors**?,"**Analogous colors** are groups of colors that are adjacent to each other on the color wheel. 

Examples include `red`, `orange`, and `yellow` or `blue`, `green`, and `purple`.

## Footnote

[""Color wheel - color theory and calculator | Canva Colors"" (Canva's Design Wiki).](https://www.canva.com/colors/color-wheel/) Retrieved April 17, 2023."
What are **monochromatic colors**?,"**Monochromatic colors** are groups of colors created using various shades, tints, and tones of a single color.

## Footnote

[""Color wheel - color theory and calculator | Canva Colors"" (Canva's Design Wiki).](https://www.canva.com/colors/color-wheel/) Retrieved April 18, 2023."
What is the **color context**?,"The perception of a color can change based on its surrounding colors. The same color might appear darker when placed next to a light color and lighter when placed next to a dark color. Understanding the context in which a color is used is essential to creating effective and visually appealing designs.

For example red appears more brilliant against a black background and somewhat duller against the white background. In contrast with orange, the red appears lifeless; in contrast with blue-green, it exhibits brilliance.
## Footnote

[""Basic Color Theory"" (colormatters.com).](https://www.colormatters.com/color-and-design/basic-color-theory) Retrieved April 18, 2023."
What is a **shade** in color theory?,"In color theory, a **shade** refers to a variation of a color that has been darkened by adding black to the original `hue`. When black is mixed with a hue, it reduces the color's lightness and creates a darker version of the color.

## Footnote

[""Finally, COLOR EXPLAINED by an expert in a way that everyone can understand"" (Sensational Color).](https://www.sensationalcolor.com/color-wheel/) Retrieved April 18, 2023."
What is a **tint** in color theory?,"In color theory, a **tint** refers to a variation of a color that has been lightened by adding white to the original `hue`. When white is mixed with a hue, it increases the color's lightness and creates a paler or more pastel version of the color.

## Footnote

[""Finally, COLOR EXPLAINED by an expert in a way that everyone can understand"" (Sensational Color).](https://www.sensationalcolor.com/color-wheel/) Retrieved April 18, 2023."
What is a **tone** in color theory?,"In color theory, a **tone** refers to a variation of a color that has been modified by adding `gray` to the original `hue`. When `gray` is mixed with a hue, it changes the color's intensity or chroma without significantly altering its lightness or darkness. 

This is different from **tint** and shade, where a tint is created by adding white to a hue (lightening the color) and a **shade** is created by adding black to a hue (darkening the color).

## Footnote

[""Finally, COLOR EXPLAINED by an expert in a way that everyone can understand"" (Sensational Color).](https://www.sensationalcolor.com/color-wheel/) Retrieved April 18, 2023."
What is a **hue** in color theory?,"A **hue** refers to the pure, unmodified color that represents a specific wavelength of light in the visible spectrum. Hue is a degree on the color wheel (from 0 to 360 degrees) — 0 (or 360) is red, 120 is green, 240 is blue. It is formally defined as “the degree to which a stimulus can be described as similar to or different from stimuli that are described as red, green, blue, and yellow”

## Footnote

[Justin Baker ""The Ultimate UX Guide to Color Design"" (Medium).](https://medium.muz.li/the-ultimate-ux-guide-to-color-design-4d0a18a706ed) Retrieved April 21, 2023."
What is **brightness/lightness** in color theory?,"**Brightness** is the relative lightness or darkness of a particular color, from `black` (no brightness) to `white` (full brightness). Lightness is a percentage; 0% is black, 100% is white.

## Footnote

[Justin Baker ""The Ultimate UX Guide to Color Design"" (Medium).](https://medium.muz.li/the-ultimate-ux-guide-to-color-design-4d0a18a706ed) Retrieved April 21, 2023."
What is **intensity** in color theory?,"**Intensity** refers to the purity of a hue.The highest intensity or purity of a hue is the hue as it appears in the spectrum or on the color wheel. A hue reduced in intensity is called a **tone**.

## Footnote

[Justin Baker ""The Ultimate UX Guide to Color Design"" (Medium).](https://medium.muz.li/the-ultimate-ux-guide-to-color-design-4d0a18a706ed) Retrieved April 21, 2023."
What is **luminosity** in color theory?,"**Luminosity**, also known as **value** or **lightness**, describes the perceived brightness of a color. It is one of the three main dimensions of color, along with **hue** (the basic color) and **saturation** (the intensity of the color). **Luminosity** is often represented on a scale from `0` (`black`) to `100` (`white`), with various shades of gray in between.

## Footnote

[Justin Baker ""The Ultimate UX Guide to Color Design"" (Medium).](https://medium.muz.li/the-ultimate-ux-guide-to-color-design-4d0a18a706ed) Retrieved April 21, 2023."
What is **saturation** in color theory?,"**Color saturation** refers to the intensity of color in an image. When color is fully saturated, the color is considered its purest (truest) version. Saturation is a percentage value: `0%` means a shade of gray and `100%` is the full color. Pure colors are fully saturated.

## Footnote

[Justin Baker ""The Ultimate UX Guide to Color Design"" (Medium).](https://medium.muz.li/the-ultimate-ux-guide-to-color-design-4d0a18a706ed) Retrieved April 21, 2023."
What are **achromatic or neutral colors** in color theory?,"In color theory, a **neutral color** refers to colors that have no hue or chromatic content. They are neither warm nor cool and are created by mixing varying amounts of `black` and `white`, resulting in different shades of `gray`. Neutral colors include `pure black`, `pure white`, and all the `gray`s in between.

They are often used as backgrounds, base colors, or to create contrast, depth, and focus on other elements in a design or artwork.

In the `HSL (Hue, Saturation, Lightness)` color model, neutral colors have a saturation value of `0%`, indicating the absence of chromatic content. The lightness value determines the specific shade of gray, with `0%` being `black`, `100%` being `white`, and values in between representing different shades of `gray`.

## Footnote

[Justin Baker ""The Ultimate UX Guide to Color Design"" (Medium).](https://medium.muz.li/the-ultimate-ux-guide-to-color-design-4d0a18a706ed) Retrieved April 20, 2023."
What are **near-neutral colors** in color theory?,"In color theory, **near-neutral colors** are those colors that have a low chromatic content or saturation, meaning they are very close to being neutral but still have a hint of hue. These colors appear almost gray but have a subtle presence of color, giving them a slightly warm or cool appearance depending on the hue.

To create near-neutral colors, you can mix a small amount of a hue with a larger proportion of gray or mix complementary colors in nearly equal parts, resulting in a subdued, low-saturation color. In the `HSL` color model, near-neutral colors have a low saturation value, typically ranging from just above `0%` to around `20-30%`, depending on the specific color and its intended use.

## Footnote

[Justin Baker ""The Ultimate UX Guide to Color Design"" (Medium).](https://medium.muz.li/the-ultimate-ux-guide-to-color-design-4d0a18a706ed) Retrieved April 20, 2023."
What is a **chroma** in color theory?,"In color theory, **chroma** refers to the intensity, saturation, or purity of a color. A color with high chroma is vivid and strong, while a color with low chroma is more muted and subdued. Chroma describes the degree to which a color is free from the influence of white, black, or gray, which can dilute or desaturate the color's appearance.

**Chroma** is an important aspect of color because it helps to differentiate between colors that have the same hue but varying levels of saturation. For instance, a bright, pure red has a high chroma, whereas a dull, desaturated red has a low chroma. In artwork and design, manipulating chroma can create contrast, mood, and visual interest by adding depth and complexity to a color palette.

## Footnote

[""Finally, COLOR EXPLAINED by an expert in a way that everyone can understand"" (Sensational Color).](https://www.sensationalcolor.com/hue-value-chroma/) Retrieved April 18, 2023."
What is a **color family** in color theory?,"In color theory, a **color family** refers to a group of colors that are related to each other and share common properties such as hue, saturation, and brightness.

For example, the color family of blue may include shades of navy, sky blue, baby blue, and royal blue. Similarly, the color family of red may include shades of burgundy, scarlet, and crimson.

Color families are often used in design and art to create harmony and balance in a composition. By using colors from the same family, designers can create a cohesive and unified visual experience. On the other hand, using colors from different families can create contrast and draw attention to specific elements in a composition.

## Footnote

[""Finally, COLOR EXPLAINED by an expert in a way that everyone can understand"" (Sensational Color).](https://www.sensationalcolor.com/color-wheel/) Retrieved April 18, 2023."

Question,Answer
monochromatic color scheme,monochromatic color scheme
What is a **monochromatic color scheme**?,"A **monochromatic color scheme** in color theory is a palette that uses different shades, tints, and tones of a single hue or color. 

To create a monochromatic color scheme, you can start with a base color (hue) and then adjust its brightness, saturation, and contrast to generate various shades (darker versions), tints (lighter versions), and tones (mixtures with gray) of the same hue."
What is a **analogous color scheme**?,"An **analogous color scheme** in color theory is a palette that uses colors that are adjacent to each other on the color wheel. 

Typically, an analogous color scheme includes three or more colors that are situated next to each other on the color wheel.
"
What is a **complementary color scheme**?,"A **complementary color scheme** in color theory refers to a combination of two colors that are opposite each other on the color wheel. This pairing creates a high contrast and visually striking effect, making the colors appear more vibrant when used together.
"
What is a **split-complementary color scheme**?,"A **split-complementary color scheme** in color theory is a variation of the complementary color scheme. It involves choosing one base color and then using the two colors that are adjacent to its direct complement on the color wheel. This creates a combination of three colors that still provides strong contrast and visual interest, but with less tension than a standard complementary color scheme."
What is a **triad color scheme**?,"A **triad color scheme** in color theory refers to a combination of three colors that are evenly spaced around the color wheel. 

To create a triad color scheme, you can start by selecting one color as your base, and then count four steps along the color wheel in either direction to find the other two colors."
What is a **tetrad color scheme**?,"A **tetrad color scheme** in color theory refers to a combination of four colors that are evenly spaced around the color wheel, creating a harmonious and balanced palette. In a tetrad color scheme, two sets of complementary colors are used, which means each color in the scheme has a direct opposite on the color wheel.

There are two common types of tetrad color schemes.

* **Square Tetrad**: In a square tetrad, the four colors are evenly spaced, forming a square on the color wheel.

* **Rectangle Tetrad**: In a rectangle (double-complementary) tetrad, two pairs of complementary colors are chosen, but the spacing between them is not equal. This forms a rectangle on the color wheel."

Question,Answer
color psychology,color psychology
What is **color psychology**?,"**Color psychology** is the study of how colors can influence human behavior, emotions, and perceptions. It is a branch of color theory, which is a broader field that encompasses the principles and guidelines for using colors in various disciplines.

## Footnote

[""Color psychology - Wikipedia"" (en.wikipedia.org).](https://en.wikipedia.org/wiki/Color_psychology) Retrieved April 25, 2023."
What are **warm and cool colors**,"Colors are often categorized as *warm* or *cool* based on their psychological impact. **Warm colors** (e.g., `red`, `orange`, and `yellow`) evoke feelings of energy and warmth, while **cool colors** (e.g., `blue`, `green`, and `purple`) are associated with calmness and tranquility.

## Footnote

[""Color wheel - color theory and calculator | Canva Colors"" (Canva's Design Wiki).](https://www.canva.com/colors/color-wheel/) Retrieved April 18, 2023."
What is **color harmony**?,"**Color harmony** refers to the arrangement of colors in a way that is visually pleasing and balanced. This can be achieved using different color schemes, such as complementary, analogous, or monochromatic.

## Footnote

[""Harmony (color) - Wikipedia"" (en.wikipedia.org).](https://en.wikipedia.org/wiki/Harmony_(color)) Retrieved April 18, 2023."
Psychology of **red** color,"`Red` is often associated with strong emotions like love, passion, and anger. It can also evoke a sense of urgency or excitement. In some cultures, red symbolizes good luck and prosperity.

## Footnote

[Justin Baker ""The Ultimate UX Guide to Color Design"" (Medium).](https://medium.muz.li/the-ultimate-ux-guide-to-color-design-4d0a18a706ed) Retrieved April 25, 2023."
Psychology of **blue** color,"`Blue` is typically linked with calmness, trust, and stability. It is often used in corporate settings and is considered to convey professionalism and reliability. However, darker shades of blue can sometimes be associated with sadness or depression.

## Footnote

[Justin Baker ""The Ultimate UX Guide to Color Design"" (Medium).](https://medium.muz.li/the-ultimate-ux-guide-to-color-design-4d0a18a706ed) Retrieved April 25, 2023."
Psychology of **green** color,"`Green` is often related to nature, growth, and freshness. It can evoke feelings of tranquility and is frequently associated with environmentalism and sustainability. Green is also thought to have a calming effect and may help reduce stress.

## Footnote

[Justin Baker ""The Ultimate UX Guide to Color Design"" (Medium).](https://medium.muz.li/the-ultimate-ux-guide-to-color-design-4d0a18a706ed) Retrieved April 25, 2023."
Psychology of **yellow** color,"`Yellow` is a bright and energetic color that is often associated with happiness, optimism, and warmth. However, in some contexts, yellow can also represent caution or be perceived as overly stimulating.

## Footnote

[Justin Baker ""The Ultimate UX Guide to Color Design"" (Medium).](https://medium.muz.li/the-ultimate-ux-guide-to-color-design-4d0a18a706ed) Retrieved April 25, 2023."
Psychology of **orange** color,"`Orange` is a vibrant and energetic color that combines the warmth of red and the cheerfulness of yellow. It is often associated with creativity, enthusiasm, and excitement. In some cultures, orange can signify spirituality or healing.

## Footnote

[Justin Baker ""The Ultimate UX Guide to Color Design"" (Medium).](https://medium.muz.li/the-ultimate-ux-guide-to-color-design-4d0a18a706ed) Retrieved April 25, 2023."
Psychology of **purple** color,"`Purple` has been associated with royalty, luxury, and sophistication. It can evoke feelings of creativity, mystery, and spirituality. Lighter shades of purple, such as lavender, are often associated with softness and femininity.

## Footnote

[Justin Baker ""The Ultimate UX Guide to Color Design"" (Medium).](https://medium.muz.li/the-ultimate-ux-guide-to-color-design-4d0a18a706ed) Retrieved April 25, 2023."
Psychology of **black** color,"`Black` can represent power, sophistication, and elegance. It is often used in formal settings and can convey a sense of authority. However, black can also be associated with negativity, such as grief, fear, or death.

## Footnote

[Justin Baker ""The Ultimate UX Guide to Color Design"" (Medium).](https://medium.muz.li/the-ultimate-ux-guide-to-color-design-4d0a18a706ed) Retrieved April 25, 2023."
Psychology of **white** color,"`White` typically symbolizes purity, innocence, and cleanliness. It is often used to convey a sense of simplicity and minimalism. In some cultures, white is associated with mourning or rebirth.

## Footnote

[Justin Baker ""The Ultimate UX Guide to Color Design"" (Medium).](https://medium.muz.li/the-ultimate-ux-guide-to-color-design-4d0a18a706ed) Retrieved April 25, 2023."

Question,Answer
typography concepts,typography concepts
What is a **typeface**?,"A **typeface** is a collection of letters. While each letter is unique, certain shapes are shared across letters. A typeface represents shared patterns across a collection of letters.

## Footnote

*Source [material.io](https://m2.material.io/design/typography/understanding-typography.html#type-properties)*"
What are the differences between a **typeface** and a **font**?,"A **typeface** is the underlying visual design that can exist in many different typesetting technologies, and a **font** is one of these implementations.

In other words, a typeface is what you see and a font is what you use.

## Footnote

*Source [fonts.google.com](https://fonts.google.com/knowledge/glossary/typeface)*"
What is a **point size** or **pt**,"A **point** is a unit of measurement for type and has been employed for hundreds of years. On the web, we tend to think of pixels, but in print design, points remain the standard unit of measuring font size.

## Footnote

*Source [fonts.google.com](https://fonts.google.com/knowledge/glossary/point_size)*"
What is a **baseline**?,"The **baseline** is the invisible line upon which a line of text rests.

## Footnote

*Source [material.io](https://m2.material.io/design/typography/understanding-typography.html#type-properties)*"
What does **cap height** refers to?,"**Cap height** refers to the height of a typeface’s flat capital letters (such as M or I) measured from the baseline. 

## Footnote

*Source [material.io](https://m2.material.io/design/typography/understanding-typography.html#type-properties)*"
What does **X-height** refers to?,"**X-height** refers to the height of the lowercase x for a typeface, and it indicates how tall or short each glyph in a typeface will be.

Typefaces with tall **x-heights** have better legibility at small font sizes.

## Footnote

*Source [material.io](https://m2.material.io/design/typography/understanding-typography.html#type-properties)*"
What are **ascenders** and **descenders**?,"**Ascenders** are an upward vertical stroke found in certain lowercase letters that extend beyond either the cap height or baseline. 

**Descenders** are the downward vertical stroke in these letters. In some cases, a collision between these strokes can occur when the *line height* (the vertical distance between baselines) is too tight.

## Footnote

*Source [material.io](https://m2.material.io/design/typography/understanding-typography.html#type-properties)*"
What is **weight** in typography?,"**Weight** refers to the relative thickness of a font’s stroke. A typeface can come in many weights; and four to six weights is a typical number available for a typeface.

Common weights:
1. Light
2. Regular
3. Medium
4. Bold

## Footnote

*Source [material.io](https://m2.material.io/design/typography/understanding-typography.html#type-properties)*"
what is **readability**?,"**Readability** refers to how easy it is to read words or blocks of text, which is affected by the style of a typeface.

## Footnote

*Source [material.io](https://m2.material.io/design/typography/understanding-typography.html#type-properties)*"
What is **letter-spacing**?,"**Letter-spacing**, also called tracking, refers to the uniform adjustment of the space between letters in a piece of text.

For smaller type sizes, looser letter spacing can improve readability as more space between letters increases contrast between each letter shape.

## Footnote

*Source [material.io](https://m2.material.io/design/typography/understanding-typography.html#type-properties)*"
What are **tabular-figures** good for?,"Use **tabular figures** (also known as monospaced numbers), rather than proportional digits, in tables or places where values may change often.

Tabular figures keep values optically aligned for better scanning.

## Footnote

*Source [material.io](https://m2.material.io/design/typography/understanding-typography.html#readability)*"
What are the recommended **line lengths**?,"**Line lengths** for body text are usually between 40 to 60 characters. In areas with wider line lengths, such as desktop, longer lines that contain up to 120 characters will need an increased line height from 20sp to 24sp.

The ideal line length is 40-60 characters per line for English body text.

The ideal line length for short lines of English text is 20-40 characters per line.

## Footnote

*Source [material.io](https://m2.material.io/design/typography/understanding-typography.html#readability)*"
What is a **line height**?,"**Line height**, also known as leading, controls the amount of space between baselines in a block of text. A text’s line height is proportional to its type size.

## Footnote

*Source [material.io](https://m2.material.io/design/typography/understanding-typography.html#readability)*"
What value should we use for **Paragraph spacing**?,"Keep **paragraph spacing** in the range between .75x and 1.25x of the type size.

## Footnote

*Source [material.io](https://m2.material.io/design/typography/understanding-typography.html#readability)*"
What are the 3 types of alignments?,"* **Left-aligned**: when text is aligned to the left margin
* **Right-aligned**: when text is aligned to the right margin
* **Centered**: when text is aligned to the center of the area it is set in

## Footnote

*Source [material.io](https://m2.material.io/design/typography/understanding-typography.html#readability)*"
What is a **point size** or **pt**,"A **point** is a unit of measurement for type and has been employed for hundreds of years. On the web, we tend to think of pixels, but in print design, points remain the standard unit of measuring font size.

## Footnote

*Source [fonts.google.com](https://fonts.google.com/knowledge/glossary/point_size)*"

Question,Answer
typography types,typography types
What is a ***Serif***?,"A ***serif*** is a small shape or projection that appears at the beginning or end of a stroke on a letter. Typefaces with serifs are called serif typefaces. 

## Footnote

*Source [material.io](https://m2.material.io/design/typography/understanding-typography.html#type-classification)*"
List the different types of ***serif*** fonts,"**Old-Style** serifs resemble writing in ink, with:

* Low contrast between thick and thin strokes
* Diagonal stress in the strokes
* Slanted serifs on lower-case ascenders

**Transitional** serifs have:

* High contrast between thick and thin strokes
* Medium-High x-height
* Vertical stress in the strokes
* Bracketed serifs

**Didone** or **neoclassical** serifs have:

* Very high contrast between thick and thin strokes
* Vertical stress in the strokes
* “Ball” terminal strokes.

**Slab** serifs have:

* Heavy serifs with imperceptible differences between the stroke weight
* Minimal or no bracketing

## Footnote

*Source [material.io](https://m2.material.io/design/typography/understanding-typography.html#type-classification)*"
When should you use ***serif*** fonts?,"Use ***serif*** fonts if you: 

* Want to be seen as trustworthy, established, and reliable.
* Want your reader to stick with you longer because you have a large amount of printed text.
* Your printed text will be small

It is favored by publications like books and newspapers or long stablished news papers that go digital like the [The New York Times](https://www.nytimes.com/subscription?campaignId=7UXFY&ds_c=71700000074690139&gclid=CjwKCAiAr4GgBhBFEiwAgwORrSH4HimX3LR768deExR6xpxPep3ngfbwda4GsE2kT76Z8ztdiOKnNRoCnrEQAvD_BwE&gclsrc=aw.ds)

## Footnote

*Source [ethos3.com](https://ethos3.com/when-to-use-serif-and-sans-serif-fonts/)*  & [masterclass.com](https://www.masterclass.com/articles/serif-vs-sans-serif-compared)"
What are ***sans serif*** fonts?,"A typeface without serifs is called a ***sans serif*** typeface, from the French word “sans” that means ""without.""

## Footnote

*Source [material.io](https://m2.material.io/design/typography/understanding-typography.html#type-classification)*"
List the different types of ***sans serif*** fonts,"* **Grotesque**: Low contrast between thick and thin strokes, vertical or no observable stress
* **Humanist**: Medium contrast between thick and thin strokes, slanted stress
* **Geometric**: Low contrast between thick and thin strokes, with vertical stress, and circular round forms

## Footnote

*Source [material.io](https://m2.material.io/design/typography/understanding-typography.html#type-classification)*"
When should you use ***sans serif*** fonts?,"Use ***sans serif*** fonts if

* If your audience has less time to read, like on a website or app.
* [DeCotes](https://www.adobe.com/creativecloud/design/discover/serif-vs-sans-serif.html?trackingid=VG52KJ7V&mv=email) also says that sans serifs work great for signage or having to read large letters from a distance.

## Footnote

*Source [ethos3.com](https://ethos3.com/when-to-use-serif-and-sans-serif-fonts/)*"
What are ***monospaced*** fonts?,"***Monospace*** typefaces display all characters with the same width.

## Footnote

*Source [material.io](https://m2.material.io/design/typography/understanding-typography.html#type-classification)*"
When should we use ***monospaced*** fonts?,"Use ***monospaced*** fonts:

* To display code blocks
* To help users find what they are looking for, quickly and easily on any device. ***Monospaced*** fonts are incredibly easy to read, on all screen sizes. 
* To display *tabular figures* in tables, for finance results and mathematic formulas.

## Footnote

*Source [imaginated.com](https://www.imaginated.com/blog/what-is-monospaced-font/) and  [pumpkinwebdesign.com](https://www.pumpkinwebdesign.com/web-design-manchester/advantages-of-monospaced-typeface-in-web-design/)*"
What are ***handwriting*** fonts?,"***Handwriting*** typefaces are unconventional with a natural, handwritten feel. These typically are used as H1 - H6 in your type scale. T

## Footnote

*Source [material.io](https://m2.material.io/design/typography/understanding-typography.html#type-classification)*"
List the different types of ***handwriting*** fonts,"* **Black letter**: High contrast, narrow, with straight lines and angular curves
* **Script**: Replication of calligraphic styles of writing (more formal)
* **Handwriting**: Replication of handwriting (less formal)

## Footnote

*Source [material.io](https://m2.material.io/design/typography/understanding-typography.html#type-classification)*"
When should we use ***handwriting*** fonts?,"Use ***handwriting*** fonts if you:

* Want to give a personal touch or a unique character to your project
* What the user to focus and try to read the text.
* If you want to evoke a handmade character to your logo.
* If you are writing a short note and want to increase the possibility that the user will read it.

## Footnote

*Sources [naldzgraphics.net](https://naldzgraphics.net/handwriting-fonts-benefits/#:~:text=Handwriting%20fonts%20are%20effective%20for%20short%20notes.,the%20eyes%20of%20the%20readers.) and [editorx.com](https://www.editorx.com/shaping-design/article/handwritten-fonts-web-design) and [blog.designcrowd.com](https://blog.designcrowd.com/article/808/where-to-use-handwritten-fonts)*"
What are ***display*** fonts?,"A miscellaneous category for all classification types that are only suitable for use at large point sizes. ***Display*** fonts typically are used as H1 - H6 in your type scale.

## Footnote

*Source [material.io](https://m2.material.io/design/typography/understanding-typography.html#type-classification)*"
When should we use ***display*** fonts?,"***display*** fonts are intended for use in display type (display copy) at large sizes for titles, headings, pull quotes, and other eye-catching elements, rather than for extended passages of body text.

## Footnote

*Source [wikipedia](https://en.wikipedia.org/wiki/Display_typeface#:~:text=A%20display%20typeface%20is%20a,extended%20passages%20of%20body%20text.)*"
How many fonts should a website have?,"In general, limit the number of font families to a minimum (two is plenty, one is often sufficient) and stick to the same ones through the entire website.

## Footnote

*Source [Nick Babish at https://uxplanet.org/](https://uxplanet.org/10-tips-on-typography-in-web-design-13a378f4aa0d)*"
List the diferent ranks of fonts you should add to a website if necessary,"* **Primary font**: this will be the most visible font on your page, your primary font should be most synonymous with your brand identity. Primary fonts are mostly used for larger text, such as headings.

* **Secondary font**: use this font for your body copy. This means that any article or description on your page is going to be in your secondary font. Above all else, your secondary font should be clean and easy to read. 

* **Tertiary (accent) font**: this one is entirely optional. Accent fonts can be used for specific website elements such as a *call-to-action* or a *navigation menu*. They should be prominent enough in order to quickly catch the eye of your visitors. 

**Note:**  keep in mind that pairing two fonts is hard enough, without throwing a third into the mix.

## Footnote

*Source [qodeinteractive.com](https://qodeinteractive.com/magazine/how-to-choose-website-fonts/)*"
Why does the project scope (length) matters when you choose a font?,"A long-term project (like a periodical or newsletter) will have a variety of different typographic needs over time. Your best bet for covering those different needs is to choose a large type family that includes a variety of weights, styles, and variants like small caps and ligatures. 

A short-term project (like a poster, album cover, or logo) might not need extra weights, or the condensed and extended versions of a font. You could even choose a font with a single weight if you think it’s right for this particular task.

## Footnote

*Sources [design.google](https://design.google/library/choosing-web-fonts-beginners-guide/)*"
What fonts should you choose for headlines and subheads?,"For headlines and subheads, you can choose an expressive, unique, even idiosyncratic font—including [Display, Decorative, Handwritten, and Script](https://fonts.google.com/?category=Display,Handwriting) styles. These unconventional, high contrast designs tend to work well in this context because their details and visual complexity help to attract the eye.

If you’d like to use a sans serif font for short bits of text, especially in large sizes, the regular weight tends to look a little out of place. Consider using the bold and compressed styles instead. If you prefer serifs, hairline serif fonts like [Playfair Display](https://www.google.com/fonts/specimen/Playfair+Display) or [Rufina](https://www.google.com/fonts/specimen/Rufina) tend to work well in short lines because their high stroke contrast tends to grab the reader’s attention.

## Footnote

*Sources [design.google](https://design.google/library/choosing-web-fonts-beginners-guide/)*"
What fonts should you choose for medium-length text?,"Medium-length text, defined loosely as three to four paragraphs, is pretty flexible.

If you’re leaning toward a serif font, opt for something in the old style like [Quattrocento](https://fonts.google.com/specimen/Quattrocento), a transitional style like [Libre Baskerville](https://design.google/library/choosing-web-fonts-beginners-guide/#:~:text=transitional%20style%20like-,Libre%20Baskerville,-%2C%20or%20a%20slab), or a slab serif like [Arvo](https://fonts.google.com/specimen/Arvo). 

If you prefer a sans serif? Then the best choice would be something in the humanist or grotesque style like [Cabin](https://fonts.google.com/specimen/Cabin) or [Raleway](https://fonts.google.com/specimen/Raleway), but even some geometric styles like [Montserrat](https://fonts.google.com/specimen/Montserrat) will work. Experiment by trying out a few of these and see what works best in layout.

## Footnote

*Sources [design.google](https://design.google/library/choosing-web-fonts-beginners-guide/)*"
What fonts should you choose for longer sections of text --exceding fire paragraphs--,"For longer sections of text—exceeding five paragraphs—a serif typeface is recommended. 

Old Style or Transitional serif fonts like [EB Garamond](https://fonts.google.com/specimen/EB+Garamond) or [Libre Baskerville](https://fonts.google.com/specimen/Libre+Baskerville), tend to be easy on the eyes for longer reading like news and magazine articles.

## Footnote

*Sources [design.google](https://design.google/library/choosing-web-fonts-beginners-guide/)*"
What fonts should you chose for small sizes (up to 16pt)?,"For small font sizes it is usually recomended to use a sans serif fonts like [Roboto](https://fonts.google.com/specimen/Roboto), [Montserrat](https://fonts.google.com/specimen/Montserrat) and [Raleway](https://fonts.google.com/specimen/Raleway).

Sans serifs fonts tend to have a taller ‘x-height’ which makes a design more legible at small sizes.

## Footnote

*Source [design.google](https://design.google/library/choosing-web-fonts-beginners-guide/)*"
What fonts should you choose for medium sizes (from 16pt to 24pt),"At medium sizes—such as subheads, pull quotes, or smaller titles ranging from 16pt to 24pt—consider using a sans serif font in the geometric, grotesque, or humanist style. [Montserrat](https://fonts.google.com/specimen/Montserrat), [Lato](https://fonts.google.com/specimen/Lato), and [Quattrocento Sans](https://fonts.google.com/specimen/Quattrocento+Sans) are good examples. Avoid extreme weights, neither too thick nor too thin, to keep text easy to read at-a-glance. 

If instead you’d like a Serif font that’s contemporary and not too bookish, look for something without too much stroke contrast, like the Slab serif fonts [Arvo](https://fonts.google.com/specimen/Arvohttp://), [Sanchez](https://fonts.google.com/specimen/Sanchez), and [Slabo](https://fonts.google.com/specimen/Slabo+27px).

## Footnote

*Source [design.google](https://design.google/library/choosing-web-fonts-beginners-guide/)*"
What language considerations should you take when choosing a font?,"Even if you’re providing content in a single language, many people use a translate feature in browser so that content appears in their native language.

In other words, if the font you’ve chosen has only basic Latin letters, auto-translate takes the typography of your project out of your hands—shifting your layout into some other font for those letters, giving it a “ransom note effect” where individual, accented letters change and stick out. Choosing a font that includes characters for other languages, guarantees that the design of your site will remain consistent for a broader swath of your readership. This may sound like a losing battle, but there are plenty of font families that include multiscript support.

## Footnote

*Source [design.google](https://design.google/library/choosing-web-fonts-beginners-guide/)*"
What is a *ransom note effect*?,"In typography, the **ransom note effect** is the result of using an excessive number of juxtaposed typefaces. It takes its name from the appearance of a stereotypical ransom note, with the message formed from words or letters cut randomly from a magazine or newspaper in order to avoid using recognizable handwriting.

## Footnote

*Source [wikipedia](https://en.wikipedia.org/wiki/Ransom_note_effect#:~:text=In%20typography%2C%20the%20ransom%20note,to%20avoid%20using%20recognizable%20handwriting.)*"

Question,Answer
typography language support,typography language support
Why should you care about the length of words in different languages?,"Word length can vary greatly across languages, even those that use similar glyphs, such as English and German.

## Footnote

*Source [material.io](https://m2.material.io/design/typography/language-support.html#language-considerations)*"
What is the problem with alignment on different languages,"Some writing systems, like Arabic and Hebrew, are displayed with characters appearing from right to left. Those fonts may appear smaller than Latin ones at the same font-size, requiring adjustments to line spacing and alignment so that the typography works well in that UI for all languages.

## Footnote

*Source [material.io](https://m2.material.io/design/typography/language-support.html#language-considerations)*"
Why is vertical space important for a font?,"Many writing systems require more ***vertical space*** than English, so your UI should provide sufficient vertical space for these different systems.

## Footnote

*Source [material.io](https://m2.material.io/design/typography/language-support.html#language-considerations)*"
List all three writing systems categories,"* ***English-like*** - The languages of Western, Central, and Eastern Europe and much of Africa are typically written in the Latin alphabet. Vietnamese is a notable exception in that, while it uses a localized form of the Latin writing system, its accented glyphs can be much taller than those found in Western European languages. The Greek and Cyrillic writing systems are very similar to Latin.

* ***Tall*** - Language scripts that require extra line height to accommodate larger glyphs, including South and Southeast Asian and Middle-Eastern languages, like Arabic, Hindi, Telugu, Thai, and Vietnamese.

* ***Dense*** - Language scripts that require extra line height to accommodate larger glyphs, including Chinese, Japanese, and Korean.

## Footnote

*Source [Material.io](https://m2.material.io/design/typography/language-support.html#language-considerations)*"
What is `noto`?,"`Noto` is a collection of high-quality fonts with multiple weights and widths in sans, serif, mono, and other styles. The Noto fonts are perfect for harmonious, aesthetic, and typographically correct global communication, in more than 1,000 languages and over 150 writing systems.

""Noto"" means ""I write, I mark, I note"" in Latin. The name is also short for ""no tofu"", as the project aims to eliminate 'tofu': blank rectangles shown when no font is available for your text.

## Footnote

*Source [fonts.google.com/noto](https://fonts.google.com/noto)*"

Question,Answer
typography font pairin,typography font pairing
What should you ask yourself before doing font pairing?,"Do we really need a secondary typeface? 
 
 Have we explored all of the possibilities on offer in our primary one, such as the various [weights](https://fonts.google.com/knowledge/glossary/weight), [styles](https://fonts.google.com/knowledge/glossary/style), [widths](https://fonts.google.com/knowledge/glossary/width/), and [optical sizes](https://fonts.google.com/knowledge/glossary/optical_sizes)? Even typefaces that contain just one [font](https://fonts.google.com/knowledge/glossary/font) can be adjusted—with [size](https://fonts.google.com/knowledge/glossary/point_size), [case](https://fonts.google.com/knowledge/glossary/uppercase_lowercase), and [tracking](https://fonts.google.com/knowledge/glossary/tracking_letter_spacing) values—to create contrast in our [text](https://fonts.google.com/knowledge/glossary/text_copy).

## Footnote

*Source [fonts.google.com](https://fonts.google.com/knowledge/choosing_type/pairing_typefaces)*"
Reasons to do font pairing,"* **Changing context** - If we need to display data alongside editorial text, or perhaps set an aside or footnote, we might benefit from employing a secondary typeface that’s notably different—perhaps even notably different in tone.

* **Augmenting a brand’s personality** - When the brand’s primary typeface is too serious, it may need combining with a more friendly typeface to more accurately capture the accessible feel of a brand.

* **Adding additional weights, widths, or styles** - It could be that the primary typeface doesn’t offer enough variation, perhaps being limited in the number of weights, widths, or styles—which could be as simple as not having a different weight to use as a heading.

* **Accounting for missing features** - If our primary character is missing features, such as support for international characters, a secondary typeface can be used in body copy, where encountering these characters is most likely.

In a nutshell, **we should only introduce a secondary typeface if it can do something our primary typeface cannot**.

## Footnote

*Source [fonts.google.com](https://fonts.google.com/knowledge/choosing_type/pairing_typefaces)*"
Why is the tone of the pairing fonts important?,"Consider the spirit of who or what a website will be representing. A bubbly typeface might work for a toy company but will look out of place on a law firm’s website. On the flip side, a web design for something lighthearted will get bogged down by the most serious of serifs.

One of the biggest considerations is what typography you’re going to use for the headers and the body copy. Headings offer more freedom in using stylized typefaces due to their larger scale. For body copy, you need a font that’s easy on the eyes in smaller text sizes.

## Footnote

*Source [webflow.com](https://webflow.com/blog/font-pairing)*"
How much contrast should your font pairs have?,"Font pairs should be noticeably different — for example, don’t use a sans serif typeface in a header that’s strikingly similar to a sans serif that you’re using in the body copy. You want distinct combinations with typefaces that are visually different but still complement each other."
What are font superfamilies?,"A superfamily is the collective grouping of several explicitly related [type](https://fonts.google.com/knowledge/glossary/type) [families](https://fonts.google.com/knowledge/glossary/family_or_type_family_or_font_family)—such as a [serif](https://fonts.google.com/knowledge/glossary/serif), [sans](https://fonts.google.com/knowledge/glossary/sans_serif), and [slab](https://fonts.google.com/knowledge/glossary/slab_serif_egyptian_clarendon)—that all share the same underlying structure to their design.

It’s common for a [typeface](https://fonts.google.com/knowledge/glossary/typeface) to be made up of several variants—usually [weight](https://fonts.google.com/knowledge/glossary/weight)s—and this is referred to as a “family.” When the variants are more plentiful, especially when the family includes variants across typeface genres (e.g. serif and sans), it can be referred to as a “superfamily.” Variable fonts make it possible to deploy an entire superfamily as a single font file.

Examples of superfamilies include *Source (Sans, Serif, Code), IBM Plex (Sans, Sans Condensed, Serif, Mono),* and *Roboto (Sans, Sans Condensed, Serif, Slab, Mono)*.

## Footnote

*Source [fonts.google.com](https://fonts.google.com/knowledge/glossary/superfamily)*"
Why is font weight constrast important when pairing fonts?,"A sure-fire way to muddy your typographic hierarchy is to fail to distinguish elements in the hierarchy from one another. In addition to variations in size, **make sure you are creating clear differences in font weights to help guide the reader’s eye around your design**.

## Footnote

*Source [smashingmagazine.com](https://www.smashingmagazine.com/2010/11/best-practices-of-combining-typefaces/#contrast-font-weights)*"
Why should you assign distinct roles to each font?,"One very easy way to combine multiple fonts from several typefaces is to design a role-based scheme for each font or typeface, and stick to it.

For example we could define one font's role for attention-getting headlines, and another font role to display medium-size text that it is easy to read.

## Footnote

*Source [smashingmagazine.com](https://www.smashingmagazine.com/2010/11/best-practices-of-combining-typefaces/#assign-distinct-roles)*"
What benefits do we get from using [*superfamilies*](https://fonts.google.com/knowledge/glossary/superfamily) on font pairing?,"[superfamilies](https://fonts.google.com/knowledge/glossary/superfamily) share the same underlying structure to their design. 
 
 Using *superfamilies* allows us to swap fonts without disrupting our layouts, which saves us time and complexity.

## Footnote

*Source [fonts.google.com](https://fonts.google.com/knowledge/choosing_type/pairing_typefaces_within_a_family_superfamily)*"

Question,Answer
typography css applied,typography css applied
How can you change the ***baseline*** of a font with CSS?,"You can change the [baseline](https://fonts.google.com/knowledge/glossary/baseline) of a font using the `vertical-align` CSS property. Here's how:

1.- Select the element you want to modify the font baseline for.
2.- Set the `vertical-align` property to the desired value. For example, if you want to lower the baseline of the font, you can set `vertical-align: sub;`. If you want to raise the baseline of the font, you can set `vertical-align: super;`.

Here's an example of how you can use `vertical-align` to lower the baseline of a font:

```
<p style=""font-size: 24px; vertical-align: sub;"">This text has a lowered baseline.</p>
```

In this example, the text in the paragraph element will appear slightly lower than the default baseline for the font. You can experiment with different values for `vertical-align` to achieve the desired effect.

**Note**: `vertical-align` CSS property only works on `inline`, `inline-block` or `table-cell` box formatting contexts.

## Footnote

[""vertical-align - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align) Retrieved March 31, 2023."
How can you change the ***cap height*** of a font face with CSS?,"You can't directly change the ***cap height*** of a font face using CSS, as it's a property of the font itself. You can only choose a font that has your desired *cap height*.

## Footnote

[ ""Material Design"".](https://m2.material.io/design/typography/understanding-typography.html#type-properties) Retrieved April 3, 2023."
How can you simulate ***cap height***  change with CSS?,"You can't directly change the ***cap height*** of a font face using CSS but, you can use a combination of CSS properties to scale and position the text to create a similar effect. Here's a workaround that involves transforming the text:

1. Choose a font that has a similar cap height to your desired cap height.
2. Scale the `font-size` to match your desired cap height.
3. Adjust the `line-height` and `vertical-align` properties to position the text correctly.

Example

``` 
.adjusted-cap-height {
  font-size: 24px; /* Set your desired font-size */
  line-height: 1; /* Adjust line-height to fit the new cap height */
  display: inline-block;
  vertical-align: middle; /* Center the text vertically */
  transform-origin: bottom; /* Set the transform origin to the bottom */
  transform: scaleY(0.8); /* Set the scaleY property to scale the text vertically */
}
```   

It's important to note that this method doesn't directly change the font's cap height, but rather, it scales and positions the text to create a similar effect. Here's a detailed explanation of the CSS properties used in this ruleset:

1. `font-size: 24px;`: This sets the desired font size for the text. You can change this value to adjust the overall size of the text.
2. `line-height: 1;`: This sets the line-height of the text. By using a unitless value, the line height is calculated as a multiple of the font size. In this case, we set it to 1 so the line height is equal to the font size, which helps accommodate the adjusted cap height.
3. `display: inline-block;`: By setting the display to inline-block, the text element can have a width and height determined by its content, and it will be placed inline with the surrounding text. This also allows us to use the vertical-align property.
4. `vertical-align: middle;`: This vertically aligns the text within the .adjusted-cap-height element relative to the surrounding content. In this case, it centers the text vertically.
5. `transform-origin: bottom;`: The transform-origin property sets the origin for the transformation applied to the element. In this case, it's"
How can you change the ***x-height*** of a font with CSS?,"You can't directly change the ***x-height*** of a font face using CSS, as it's a property of the font itself. You can only  choose a font that has your desired *x-height*.

## Footnote

[ ""Material Design"".](https://m2.material.io/design/typography/understanding-typography.html#type-properties) Retrieved April 3, 2023."
is it possible to change the ***ascenders*** and ***descenders*** of a font?,"Changing the ***ascenders*** and ***descenders*** of a font is not directly possible using CSS, as these are properties of the font's design.

## Footnote

[ ""Material Design"".](https://m2.material.io/design/typography/understanding-typography.html#type-properties) Retrieved April 3, 2023."
How can you change the **weight** of a font with CSS?,"With the `font-weight property`. This property allows you to set the weight, or boldness, of the text. The values for `font-weight` can be either keywords or numeric values.

Example: 

```
/* Using a keyword value */
p {
  font-weight: bold;
}

/* Using a numeric value (100 to 900, in increments of 100) */
h1 {
  font-weight: 700;
}
```

The most common keyword values are:

* `thin`: equivalent to `100`
* `normal`: equivalent to `400`
* `bold`: equivalent to `700`
* `heavy`: equivalent to `900`

Keep in mind that for a specific font weight to be displayed, the font family you're using should include that specific weight. If it doesn't, the browser will try to mimic the desired weight, which may not produce the best result visually.

## Footnote

[""font-weight - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight) Retrieved April 11, 2023."
"How can you change the font **type** (*serif*, *sans-serif*) with CSS?","With the `font-family` property. This property allows you to specify a prioritized list of font family names and/or generic family names. The browser will use the first available font in the specified list.

Here's an example of how to change the font type using CSS:

```
@font-face {
  font-family: ""MyCustomFont"";
  src: url(""path/to/your/font-file.woff2"") format(""woff2""),
       url(""path/to/your/font-file.woff"") format(""woff"");
}

p {
  font-family: ""MyCustomFont"", Arial, sans-serif;
}
```

In this example, `""MyCustomFont""` will be used for `<p>` elements if the font files are available; otherwise, the browser will fall back to `""Arial""` or the default sans-serif font.

## Footnote

[""font-family - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/font-family) Retrieved April 11, 2023."
How can you change the **letter-spacing** with CSS?,"With `letter-spacing` property. This property allows you to control the amount of space between individual characters in a text element. The value can be set using various units, such as `px`, `em`, `rem`, or `%`. Positive values will increase the space between characters, while negative values will decrease it.

Example:

```
p {
  letter-spacing: 2px;
}

h1 {
  letter-spacing: 0.1em;
}
```

In this example, the `<p>` elements will have a `letter-spacing` of 2 pixels, and the `<h1>` elements will have a `letter-spacing` of 0.1 times the font size (due to the use of `em`).

## Footnote

[""letter-spacing - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/letter-spacing) Retrieved April 11, 2023."
How can you create **tabular figures** with CSS?,"With the `font-variant-numeric` property with the `tabular-nums` value. This value forces the numbers to use a fixed width, allowing them to align properly in tabular contexts.

Example:

```
table {
  font-variant-numeric: tabular-nums;
}
```

Keep in mind that this property relies on the font family supporting tabular figures. If the font you're using doesn't support them, the property won't have any effect.

As a fallback you can use a monospaced font family to set your tabular figures.

Example: 

```
table {
  font-family: ""Courier New"", Courier, monospace;
}
```

Keep in mind that using a monospaced font family will make all characters have the same width, not just the numbers.

## Footnote

[""font-variant-numeric - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-numeric) Retrieved April 11, 2023."
How can you change the **line height** of a font with CSS,"You can change the line height of a font using the `line-height` CSS property. This property sets the distance between lines of text within an element, making it more readable and visually balanced. 

You can set `line-height` using different units such as a number (unitless), pixels (`px`), ems (`em`), or percentages (`%`).

Examples:

```
p {
  line-height: 1.5; /* unitless */
}

p {
  line-height: 24px; /* pixels */
}

p {
  line-height: 1.5em; /* ems */
}

p {
  line-height: 150%; /* percentage */
}
```

In this example, the `p` element will have its line height adjusted according to the specified value.

## Footnote

[""line-height - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/line-height) Retrieved April 12, 2023."
How can you change the **paragraph spacing** with CSS?,"You can change the paragraph spacing with CSS by adjusting the `margin` or `padding` properties of the paragraph elements. Typically, you would modify the margin-top and margin-bottom properties to control the spacing between paragraphs.

For example:

```
p {
  margin-top: 16px; /* spacing above the paragraph */
  margin-bottom: 16px; /* spacing below the paragraph */
}
```

Alternatively, you can use the shorthand margin property:

```
p {
  margin: 16px 0; /* top and bottom margins are 16px, left and right margins are 0 */
}
```

In these examples, the `p` elements will have a 16-pixel spacing above and below each paragraph. Note that padding can also be used to create spacing within the paragraph element's boundaries, but it's more common to use margin for spacing between paragraphs.

## Footnote

[""margin - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/margin) and [""padding - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/padding) Retrieved April 12, 2023."
How can you change the **type alignment** of a `font` with CSS?,"You can change the type alignment of a font with CSS using the `text-align` property. The possible values are `left`, `right`, `center`, and `justify`. For example:

```
p {
  text-align: start | center | left | right | justify;
}
```

## Footnote

[""text-align - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align) Retrieved April 13, 2023."


fluid fonts,fluid fonts
How can you make a font fluid?,"Using viewport units on the `font-size` property. The following CSS ruleset makes the heading font size 13% of the viewport width:

```
h1 {
  font-size: 13vw;
}
```

**Note**: if you are going to support hand held devices you may prefer to use [`vmin`](https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units) viewport unit that way your font will always be calculated using the the viewport's smaller dimension in both portrait and landscape modes.

## Footnote

*Source [24ways.org](https://24ways.org/2016/responsive-display-text/)*"
How can you give a minimum size to a fluid font?,"We can use the CSS `calc()` function to calculate a `font size` simultaneously based on both `rem`s and viewport units. For example:

```
h2 {
  font-size: calc(0.5rem + 2.5vmin);
}
```

For a 320 px wide screen, the font size will be 16 px, calculated as follows:

`(0.5 × 16) + (320 × 0.025) = 8 + 8 = 16px`

For a 768 px wide screen, the font size will be 27 px:

`(0.5 × 16) + (768 × 0.025) = 8 + 19 = 27px`

## Footnote

*Source [24ways.org](https://24ways.org/2016/responsive-display-text/)*"
How can you give a maximun size to a fluid font?,"With a media query:

```
@media screen and (min-width: 80rem) {
  :root {
    font-size: 1.375rem;
  }
}
```

Fonts won'g grow above `1.375rem` even if the with of the screen is above `80rem`

## Footnote

*Sources [madebymike.com.au](https://www.madebymike.com.au/writing/fluid-type-calc-examples/)*"
"How can you create a perfect smooth scaling between any 2 font sizes over any viewport range?

The font needs to start start scaling and stop scaling exactly where you want.","```
:root {
--min-offset: 0.875rem;
--max-offset: 1.375rem;
--min-width: 20rem;
--max-width: 80rem;
--growth-factor: 0.5;  /* var(--max-offset) - var(--min-offset); with units stripped */
--growth-units: 60;	/* var(--max-width) - var(--min-width) with units stripped */

font-size: calc(var(--min-offset) + 
	(var(--growth-factor)  * ( (100vw - var(--min-width)) / var(--growth-units))));
}
```

1.- The first code block defines a set of custom properties:

* `--min-offset`: the minimum font-size offset (0.875rem).
* `--max-offset`: the maximum font-size offset (1.375rem), but it's not used in this snippet.
* `--min-width`: the minimum viewport width (20rem) taken into account for font-size scaling.
* `--max-width`: the maximum viewport width (80rem) taken into account for font-size scaling, but it's not used in this snippet.
* `--growth-factor`: the growth factor (0.5) which determines how fast the font-size scales with the viewport width. The comment suggests that it should be calculated as `var(--max-offset) - var(--min-offset)`.
* `--growth-units`: the range of viewport width in which the font size should scale (`60rem`), as mentioned in the comment it is intended to be `var(--max-width) - var(--min-width)`.

2.- The `font-size` property is set using the `calc()` function which performs a calculation to be used as the property value:

* `var(--min-offset)` is the base font-size (0.875rem).
* `(var(--growth-factor) * ( (100vw - var(--min-width)) / var(--growth-units)))` is the scaling factor based on the viewport width.
* `100vw` represents the full width of the viewport in viewport units.
* `(100vw - var(--min-width))` calculates how much the viewport width is above the minimum width.
* Dividing by `var(--growth-units)` normalizes this value.
* Multiplying by `var(--growth-factor)` scales the font size.

Or the equivalent without css variables:

```
:root {
    font-size: calc(0.875rem + 0.5 * ((100vw - 20rem) / 60));
  }
```

## Footnote

*Source [madebymike.com.au](https://www.madebymike.com.au/writing/precise-control-responsive-typography/#heading-precise-control-with-calc())*"
"Define a fluid font with a minum/maximum size? 
Note: print font should be fixed to `0.875rem`","```
:root {
  font-size: 0.875rem;
}

@media screen and (min-width: 20rem) {
  :root {
    font-size: calc(0.875rem + 0.5 * ((100vw - 20rem) / 60));
  }
}

@media screen and (min-width: 80rem) {
  :root {
    font-size: 1.375rem;
  }
}
```

The only catch is that all unit types must be the same for the `calc()` equation to work.

## Footnote

*Source [madebymike.com.au](https://www.madebymike.com.au/writing/fluid-type-calc-examples/)*"

Question,Answer
variable fonts,variable fonts
What are *variable fonts*?,"*Variable fonts*—or, more specifically, *[OpenType](https://fonts.google.com/knowledge/glossary/open_type) Font Variations*—are a relatively new font format introduced in 2016 that allow one font file to contain multiple stylistic variations, and thus break down the strict delineations of “traditional” (static) fonts. Weight, width, style, optical size, etc. can then be manipulated by the designer or adjusted based on contextual rules.

## Footnote

[Google Fonts Glossary: Variable Fonts](https://fonts.google.com/knowledge/glossary/variable_fonts). Retrieved March 23, 2023"
"Q: What are the differences between *typeface*, *font face*, *font family*, *variable fonts*,  and a *style* in Typography?","* **Typeface**: A typeface is a design of lettering that can include variations, but not size or weight. It’s the creative work itself, the design.

* **Font Face**: In digital typography, font face refers to a set of characters, symbols, and glyphs that share the same design and attributes. Typically, it's a specific variation within a typeface, such as `'bold'` or `'italic'`.

* **Font Family (Typography context)**: In typography, font family refers to a collection of fonts that are designed and intended to be used together, often sharing common design traits. A font family can consist of multiple weights (`light, regular, bold`) and styles (`italic, oblique`).

* **Font Family (CSS context)**: In CSS, font-family refers to a prioritized list of font family names and/or generic family names. It helps browsers select an appropriate font from those available on the system or through `@font-face`. E.g., `font-family: Arial, sans-serif;`.

* **Variable Fonts**: Variable fonts are a relatively new font format that allows designers to use a single font file for a variety of styles. It contains a continuous range of styles and attributes within the same file. It can be controlled in CSS using properties such as font-weight, font-stretch, and custom-defined axes.

* **Style**: In typography, style refers to attributes such as italics, boldness, and underlining. In CSS, you can control these attributes through properties like `font-style`,  or `font-weight`"
Anatomy of a variable font,"**Variable fonts** are a single font file with an inbuilt spectrum of styles. They consist of a 'default' style, usually 'Regular', and additional styles connected through 'axes'. *Weight*, *Width*, *Slant*, and *Optical Size* are common axes. Along each axis, an 'instance' represents a specific style, and a variable font can have countless instances. Instances can be unnamed or named (e.g. SemiBold).

Example: In Roboto Flex, the Weight axis encompasses styles from light to heavy, with the Regular style in the middle, allowing selection among 900 different weights.

## Footnote

[""Anatomy of a variable font #""(web.dev).](https://web.dev/variable-fonts/#anatomy-of-a-variable-font) Retrieved March 28, 2023."
What is an *axis* in *variable fonts*?,"In variable fonts, “axis” usually refers to a single aspect of a typeface’s design that can be altered by the user.

Common axes include `Italic, Optical Size, Slant, Weight`, and `Width`, all five of which are registered (defined) in the OpenType file format specification.

## Footnote

[Google Fonts Glossary: Axis in Variable Fonts](https://fonts.google.com/knowledge/glossary/axis_in_variable_fonts). Retrieved March 23, 2023"
What does the *Italic axis* (`ital`) do in variable fonts?,"“Italic” (`ital` in CSS) is an axis found in some variable fonts. It controls the font file’s italic parameter, with italics either turned “off” or “on”, rather than gradually changing over a range.

Possible values according to [Google Fonts CSS v2 API](https://developers.google.com/fonts/docs/css2):

* `0` (default) - off
* `1` - on

## Footnote

[Google Fonts Glossary: Italic Axis](https://fonts.google.com/knowledge/glossary/italic_axis) Retrieved March 23, 2023"
What does the *Optical Size axis* (`opsz`) do in variable fonts?,"“Optical Size” (controlled with `font-optical-sizing` or `font-variation-setting: ‘opsz’` VALUE in CSS) is an axis found in some variable fonts. It controls the font file’s optical size optimizations.

Possible values according to [Google Fonts CSS v2 API](https://developers.google.com/fonts/docs/css2): 

* `14` default
* `6` - min
* `144` max

With step of size 0.1

Examples: 

```
body {
  font-variation-settings: 'opsz' 16;
}
h1 {
  font-variation-settings: 'opsz' 48;
}
```

## Footnote

[Google Fonts Glossary: Optical Size Axis](https://fonts.google.com/knowledge/glossary/optical_size_axis). Retrieved March 23, 2023"
What is the problem with the Optical Size axis in browsers,"The Optical Size axis in variable fonts is meant to adjust the font’s appearance for readability at different sizes. Ideally, the Optical Size should correlate with the physical size of the text in print (measured in points).

However, browsers lack the concept of physical size and rely on CSS pixels (px), which don't necessarily equate to physical points. As a result, the Optical Size axis doesn't align with the actual printed size.

CSS introduces `font-optical-sizing` to help control this behavior. By default, it is set to `auto`, allowing the browser to adjust the Optical Size. However, if needed, developers can disable this feature by setting it to none or explicitly set Optical Size using font-variation-settings:

```
/* Allow the browser to adjust Optical Size */
body {
  font-optical-sizing: auto;
}

/* Disable automatic adjustment of Optical Size */
body {
  font-optical-sizing: none;
}

/* Explicitly set Optical Size */
body {
  font-variation-settings: 'opsz' 16;
}
h1 {
  font-variation-settings: 'opsz' 48;
}
```

This allows for greater control, though it does not solve the discrepancy between CSS pixels and physical points.

## Footnote

[Google Fonts Glossary: Optical Size Axis](https://fonts.google.com/knowledge/glossary/optical_size_axis). Retrieved March 23, 2023"
What does the *Optical Slant axis* (`slnt`) do in variable fonts?,"""Slant"" (`slnt` in CSS) is an axis found in some variable fonts. It controls the font file’s slant parameter for [oblique styles](https://fonts.google.com/knowledge/glossary/oblique).

Possible values according to [Google Fonts CSS v2 API](https://developers.google.com/fonts/docs/css2): 

* `0` default
* `-90` - min
* `90` max

With step of size 1

Examples: 

```
body {
  font-variation-settings: 'slnt' 16;
}

h1 {
  font-variation-settings: 'slnt' 48;
}
```

## Footnote

[fonts.google.com ""Slant axis (slnt)"".](https://fonts.google.com/knowledge/glossary/slant_axis) Retrieved 2023-03-27."
What does the *Optical Weight axis* (`wght`) do in variable fonts?,"“Weight” (`wght` in CSS) is an axis found in many variable fonts. It controls the font file’s weight parameter.

Possible values according to [Google Fonts CSS v2 API](https://developers.google.com/fonts/docs/css2): 

* `400` default
* `1` - min
* `1000` max

With step of size 1

Examples: 

```
body {
  font-variation-settings: 'wght' 450;
}

h1 {
  font-variation-settings: 'wght' 810;
}
```

## Footnote

[fonts.google.com ""Weight axis (wght)"".](https://fonts.google.com/knowledge/glossary/weight_axis) Retrieved 2023-03-27."
What does the *Optical Width axis* (`wdht`) do in variable fonts?,"“Width” (wdth in CSS) is an axis found in some variable fonts. It controls the font file’s width parameter.

Possible values according to [Google Fonts CSS v2 API](https://developers.google.com/fonts/docs/css2): 

* `100` default
* `25` - min
* `200` max

With step of size 0.1

""Width"" is the result of how much horizontal space is taken up by a typeface’s characters. A condensed face takes up considerably less space than a wide one.

In CSS, we can assign a variable width to an element of our choosing using the `font-stretch` property. (Despite the name, note that the type is never literally “stretched” by browsers. 

Examples: 

```
p {
  font-stretch: 50%;
}
strong {
  font-stretch: 193%;
}

body {
  font-variation-settings: 'wdht' 450;
}

h1 {
  font-variation-settings: 'wdht' 810;
}
```


## Footnote

[""Width axis (wdth) – Fonts Knowledge - Google Fonts"" (Google Fonts).](https://fonts.google.com/knowledge/glossary/width_axis) Retrieved 2023-03-27."
How do you load a *variable font* file?,"*Variable fonts* are loaded with the same `@font-face` mechanism as traditional static web fonts, but with two new enhancements:

```
@font-face {
	font-family: 'Roboto Flex';
	src: url('RobotoFlex-VF.woff2') format('woff2') tech('variations'),
	     url('RobotoFlex-VF.woff2') format('woff2-variations');
	font-weight: 100 1000;
	font-stretch: 25% 151%;
}
```

1. **Source Formats**: We don't want the browser to download the font if it doesn't support variable fonts, so we add `format` and `tech` descriptions: once in the future syntax (`format('woff2') tech('variations')`), once in the deprecated but supported among browsers syntax (`format('woff2-variations')`). If the browser supports variable fonts and supports the upcoming syntax, it will use the first declaration. If it supports variable fonts and the current syntax, it will use the second declaration. They both point to the same font file.

2. **Style Ranges**: You'll notice we're supplying two values for `font-weight` and `font-stretch`. Instead of telling the browser which specific weight this font provides (for example `font-weight: 500;`), we now give it the range of weights supported by the font. For `Roboto Flex`, the **Weight** axis ranges from 100 to 1000, and CSS directly maps the axis range to the `font-weight` style property. By specifying the range in `@font-face`, any value outside this range will be ""capped"" to the nearest valid value. The *Width* axis range is mapped in the same way to the `font-stretch` property.

## Footnote

[""Loading variable font files""(web.dev).](https://web.dev/variable-fonts/#loading-variable-font-files) Retrieved March 28, 2023."
How can you change the **weight** (`wght`) axis?,"The `wght` axis can be changed widh `font-weight`.

Traditionally, you would set `font-weight` as a keyword (`light`, `bold`) or as a numerical value between `100` and `900`, in steps of `100`. With variable fonts, you can set any value within the font's weight range:

```
.kinda-light {
  font-weight: 125;
}

.super-heavy {
  font-weight: 1000;
}
```

## Footnote

[""Using weights and widths""(web.dev).](https://web.dev/variable-fonts/#using-weights-and-widths) Retrieved March 29, 2023."
How can you cange the **width** (`wdht`) axis?,"The `wdth` axis can be changed with `font-stretch`.

We can set `font-stretch` with keywords (`condensed`, `ultra-expanded`) or with percentage values:

```
.kinda-narrow {
  font-stretch: 33.3%;
}

.super-wide {
  font-stretch: 151%;
}
```

## Footnote

[""Using weights and widths""(web.dev).](https://web.dev/variable-fonts/#using-weights-and-widths) Retrieved March 29, 2023."
How do you use the **italics** (`ital`) axis?,"The `ital` axis is intended for fonts that contain both a regular style, and an italic style. The axis is meant to be an on/off switch: value `0` is off and will show the regular style, value `1` will show the italics. Unlike other axes, there's no transition. A value of `0.5` won't give you ""half italics"".

```
i, em, .italic {
	font-variation-settings: 'ital' 1;
}
```

## Footnote

[""Using italics and obliques #""(web.dev).](https://web.dev/variable-fonts/#using-italics-and-obliques) Retrieved March 29, 2023."
How do you use the **obliques** (`slnt`) axis?,"The `slnt` axis is different from italics in that it's not a new style, but just slants the regular style. By default its value is `0`, which means the default upright letter shapes. Roboto Flex has a maximum slant of -10 degrees, meaning the letters will lean to the right when going from 0 to -10.

```
.slanted {
	font-variation-settings: 'slnt' 10;
}
```

## Footnote

[""Using italics and obliques"" (web.dev).](https://web.dev/variable-fonts/#using-italics-and-obliques) Retrieved March 29, 2023."
How do you use the **optical** (`opsz`) axis?,"A new CSS property has been introduced for this axis: `font-optical-sizing`. By default it's set to `auto`, which makes the browser set the axis value based on the `font-size`. This means the browser will pick the best optical size automatically, but if you wish to turn this off you can set `font-optical-sizing` to `none`.

You can also set a custom value for the `opsz` axis, if you deliberately want an optical size that doesn't match the font size. The following CSS would cause text to be displayed at a large size, but at an optical size as if it were printed in `8pt`:

```
.small-yet-large {
  font-size: 100px;
  font-variation-settings: 'opsz' 8;
}
```

## Footnote

[""Using optical sizes"" (web.dev).](https://web.dev/variable-fonts/#using-optical-sizes) Retrieved March 30, 2023."
How do you use custom axis?,"Unlike registered axes, custom axes will not be mapped to an existing CSS property, so you will always have to set them through `font-variation-settings`. Tags for custom axes are always in uppercase, to distinguish them from registered axes.

## Footnote

[""Using custom axes"" (web.dev).](https://web.dev/variable-fonts/#using-custom-axes) Retrieved March 30, 2023."
What is the problem with `font-variation-settings` CSS property?,"There is a little gotcha with `font-variation-settings`. Every property you don't explicitly set will automatically be reset to its default. Previously set values aren't inherited! This means the following will not work as expected:

```
<span class=""slanted grade-light"">
	I should be slanted and have a light grade
</span>
```

First the browser will apply `font-variation-settings: 'slnt' 10` from the `.slanted` class. Then it will apply `font-variation-settings: 'GRAD' -200` from the `.grade-light` class. But this will reset the `slnt` back to its default of `0`! The result will be text in a light grade, but not slanted.

Luckily, we can work around this by using CSS variables:

```
/* Set the default values */
:root {
	--slnt: 0;
	--GRAD: 0;
}

/* Change value for these elements and their children */
.slanted {
	--slnt: 10;
}

.grade-light {
	--GRAD: -200;
}

.grade-normal {
	--GRAD: 0;
}

.grade-heavy {
	--GRAD: 150;
}

/* Apply whatever value is kept in the CSS variables */
.slanted,
.grade-light,
.grade-normal,
.grade-heavy {
	font-variation-settings: 'slnt' var(--slnt), 'GRAD' var(--GRAD);
}
```

CSS variables will cascade, so if an element (or one of its parents) will have set the `slnt` to `10`, it will keep that value, even if you set `GRAD` to something else.

## Footnote

[""Font-variation-settings inheritance"" (web.dev).](https://web.dev/variable-fonts/#font-variation-settings-inheritance) Retrieved March 30, 2023."
How can you fallback support to variable fonts?,"All [modern browsers support variable fonts](https://caniuse.com/#feat=variable-fonts). In case you need to support older browsers, you can choose to build your site with static fonts, and use variable fonts as progressive enhancement:

```
/* Set up Roboto for old browsers, only regular + bold */
@font-face {
  font-family: Roboto;
  src: url('Roboto-Regular.woff2');
  font-weight: normal;
}

@font-face {
  font-family: Roboto;
  src: url('Roboto-Bold.woff2');
  font-weight: bold;
}

body {
  font-family: Roboto;
}

.super-bold {
  font-weight: bold
}

/* Set up Roboto for modern browsers, all weights */
@supports (font-variation-settings: normal) {
  @font-face {
    font-family: 'Roboto';
    src: url('RobotoFlex-VF.woff2') format('woff2 supports variations'),
         url('RobotoFlex-VF.woff2') format('woff2-variations');
    font-weight: 100 1000;
    font-stretch: 25% 151%;
  }

  .super-bold {
    font-weight: 1000;
  }
}
```

For older browsers, text with the class `.super-bold` will get rendered in the normal bold, as that's the only bold font we have available. When variable fonts are supported, we can actually use the heaviest weight of `1000`.

## Footnote

[""Fallbacks and browser support"" (web.dev).](https://web.dev/variable-fonts/#fallbacks) Retrieved March 30, 2023."
How can you change the caps of a variant font?,"With the `font-variant-caps` CSS property that controls the use of alternate glyphs for capital letters.

The `font-variant-caps` property is specified using a single keyword value from the list below. In each case, if the font doesn't support the OpenType value, then it synthesizes the glyphs.

**Values**

* `normal` - Deactivates of the use of alternate glyphs.
* `small-caps` - Enables display of small capitals (OpenType feature: `smcp`). Small-caps glyphs typically use the form of uppercase letters but are reduced to the size of lowercase letters.
* `all-small-caps` - Enables display of small capitals for both upper and lowercase letters (OpenType features: `c2sc, smcp`).
* `petite-caps` - Enables display of petite capitals (OpenType feature: `pcap`).
* `all-petite-caps` - Enables display of petite capitals for both upper and lowercase letters (OpenType features: `c2pc, pcap`).
* `unicase` - Enables display of mixture of small capitals for uppercase letters with normal lowercase letters (OpenType feature: `unic`).
* `titling-caps` - Enables display of titling capitals (OpenType feature: `titl`). Uppercase letter glyphs are often designed for use with lowercase letters. When used in all uppercase titling sequences they can appear too strong. Titling capitals are designed specifically for this situation.

## Footnote

[""font-variant-caps - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-caps) Retrieved March 31, 2023."

Question,Answer
transitions,transitions
What does the `transition-property` CSS property do?,"The `transition-property` CSS property specifies which CSS properties should have transition effects applied to them when their values change.

## Footnote

[""transition-property - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/transition-property) Retrieved April 26, 2023."
What is the syntax of the `transition-property` CSS property?,"```
transition-property: property-1, property-2, ...;
```

**Values**

* `all`: Applies transitions to all properties that can be animated.
* `none`: No transitions are applied.

Example values: `all`, `width`, `background-color`, `none`.

## Footnote

[""transition-property - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/transition-property) Retrieved April 26, 2023."
What does the `transition-duration` CSS property do?,"The `transition-duration` CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.

## Footnote

[""transition-duration - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/transition-duration) Retrieved April 26, 2023."
What is the syntax of the `transition-duration` CSS property?,"```
transition-duration: time-1, time-2, ...;
```

**Values**

* The time values can be given in seconds (e.g., `2s`) or milliseconds (e.g., `2000ms`).* 

Example values: 0.5s, 300ms

## Footnote

[""transition-duration - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/transition-duration) Retrieved April 26, 2023."
What does the `transition-timing-function` CSS property do?,"The `transition-timing-function` CSS property specifies how the intermediate values of a CSS transition are calculated, essentially defining the ""easing"" function for the transition.

## Footnote

[""transition-timing-function - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function) Retrieved April 26, 2023."
What is the syntax of the `transition-timing-function` CSS property?,"```
transition-timing-function: function-1, function-2, ...;
```

**Values**

* `linear`: Transition occurs at a constant speed.
* `ease`: Starts slow, accelerates, then ends slowly.
* `ease-in`: Starts slow and accelerates.
* `ease-out`: Starts fast and decelerates.
* `ease-in-out`: Starts slow, accelerates, then decelerates.
* `cubic-bezier(n,n,n,n)`: Define a custom easing function using a cubic Bézier curve with control points.
* `step-start, step-end, steps(n, jump)`: Define a step function with a specified number of steps and jump behavior.

Example values: 
`linear, ease, ease-in, ease-out, ease-in-out, cubic-bezier(n,n,n,n), step-start, step-end, steps(n, jump)`

## Footnote

[""transition-timing-function - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function) Retrieved April 26, 2023."
What does the `transition-delay` CSS property do?,"The `transition-delay` CSS property specifies the time to wait before starting a CSS transition when the specified property changes.

## Footnote

[""transition-delay - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/transition-delay) Retrieved April 26, 2023."
What is the syntax of the `transition-delay` CSS property?,"```
transition-delay: time-1, time-2, ...;
```

**Values**

* The time values can be given in seconds (e.g., `1s`) or milliseconds (e.g., `1000ms`).

Example values: `0s, 200ms`

## Footnote

[""transition-delay - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/transition-delay) Retrieved April 26, 2023."
What does the `transition` CSS shorthand property do?,"The `transition` CSS property is a shorthand for setting the `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay` properties in a single declaration.

## Footnote

[""transition - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/transition) Retrieved April 26, 2023."
What is the syntax of the `transition` CSS shorthand property?,"```
transition: property duration timing-function delay;
```

**Values**

* Order of values is important: property (required), duration (required), timing-function (optional, default is  ease), delay (optional, default is 0s).
* Multiple transitions can be specified, separated by commas: `transition: width 0.5s ease-out 100ms, height 0.3s linear;`

Example: 

```transition: width 0.5s ease-out 100ms;```

## Footnote

[""transition - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/transition) Retrieved April 26, 2023."
How can you apply CSS transitions using pseudo-classes?,"To apply CSS transitions when an element is in a specific state, use the `:hover`, `:focus`, `:active`, or `:checked` pseudo-classes. Add the transition properties to the base state of the element and define the property changes within the pseudo-class rule."
Example of using CSS transitions with the :hover pseudo-class,"```
button {
  background-color: blue;
  transition: background-color 0.3s ease-in-out;
}

button:hover {
  background-color: red;
}

```"
How can you set different durations and delays for multiple properties?,Specify separate durations and delays for each property by listing them in the same order as the properties in the `transition-property` rule. Use commas to separate values for different properties.
Example of setting different durations and delays for multiple properties,"```
.box {
  transition-property: width, height, background-color;
  transition-duration: 0.5s, 1s, 0.3s;
  transition-delay: 0s, 100ms, 200ms;
}
```

In this example, the `width` transition has a `0.5s` duration and no delay, the height transition has a `1s` duration and a `100ms` delay, and the `background-color` transition has a `0.3s` duration and a `200ms` delay."
"Create a CSS rule that applies a transition to the `background-color` property, with a duration of 0.8 seconds, an `ease-in-out` timing function, and a delay of 300 milliseconds.","```
{
  transition-property: background-color;
  transition-duration: 0.8s;
  transition-timing-function: ease-in-out;
  transition-delay: 300ms;
}
```"
"Create a CSS rule that applies a transition to both the `width` and `height` properties, with a duration of 1 second and a `linear` timing function.","```
{
  transition-property: width, height;
  transition-duration: 1s;
  transition-timing-function: linear;
}
```"
"Using the `transition` shorthand property, create a CSS rule that applies a transition to the `opacity` property, with a duration of 0.6 seconds, a `cubic-bezier(0.25, 0.1, 0.25, 1)` timing function, and no delay.","```
  transition: opacity 0.6s cubic-bezier(0.25, 0.1, 0.25, 1) 0s;
```"
"Create a CSS rule that applies a transition to the `font-size` property, with a duration of 0.3 seconds, an `ease-in` timing function, and a delay of 100 milliseconds. Apply this transition to a paragraph element when it is being hovered.","```
p {
  transition: font-size 0.3s ease-in 100ms;
}

p:hover {
  font-size: 1.5em;
}
```"
"Create a CSS rule that applies a transition to the `border-radius` property, with a duration of 1.5 seconds and a `linear` timing function. Use the `transition` shorthand property for this rule.","```
div { transition: border-radius 1.5s linear; }
```"
"Create a CSS rule that applies a transition to both the `color` and `background-color` properties of a `button` element. The transition for the color property should have a duration of 0.4 seconds and an `ease-out` timing function, while the transition for the `background-color` property should have a duration of 0.6 seconds and a `cubic-bezier(0.42, 0, 0.58, 1)` timing function. Apply this transition when the button is focused.","```
button {
  transition-property: color, background-color;
  transition-duration: 0.4s, 0.6s;
  transition-timing-function: ease-out, cubic-bezier(0.42, 0, 0.58, 1);
}

button:focus {
  color: white;
  background-color: green;
}
```"
"Create a CSS rule that applies transitions to the `width`, `height`, and `opacity` properties of a div element. The transitions should have the following properties:

* `width`: 0.8s duration, ease-in-out timing function, 0s delay
* `height`: 1.2s duration, ease timing function, 200ms delay
* `opacity`: 0.5s duration, linear timing function, no delay

Use the `transition` shorthand property for this rule.","```
div { transition: width 0.8s ease-in-out 0s, height 1.2s ease 200ms, opacity 0.5s linear; }
```"
What is the `linear` timing function usually used for?,"The `linear` timing function is often used when you want a simple, predictable, and uniform transition. It's suitable for scenarios where the change in the property doesn't require any emphasis or gradual speed adjustments.

For example, it can be used for:

* Moving an element at a constant speed across the screen.
* Changing the background color of an element uniformly.
* Progress bars or loading indicators with a steady pace.

Example:

```
.element {
  /* Initial state */
  background-color: blue;
  transition: background-color 2s linear;
}

.element:hover {
  /* Final state */
  background-color: red;
}
```

In this example, the background color of the .element will change from blue to red uniformly over 2 seconds when hovered over, without any acceleration or deceleration.

## Footnote

[""transition-timing-function - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function) Retrieved May 3, 2023."
What is the `ease-in` timing function usually used for?,"`ease-in`  timing function is used when you want a transition to start slowly and then accelerate towards the end. It is ideal for situations where you want to draw attention to the change or create an impression of momentum. Examples of `ease-in use` cases include:

* **Revealing a hidden element**, such as a tooltip or a dropdown menu.
* **Expanding a collapsible panel or an accordion**.
* **Moving an element onto the screen** from an off-screen position.

## Footnote

[""transition-timing-function - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function) Retrieved May 3, 2023."
What is the `ease-out` timing function usually used for?,"`ease-out` timing function is used when you want a transition to start quickly and then decelerate towards the end. It is suitable for situations where you want a smooth, gentle exit of the transition or a more natural-feeling movement. Examples of ease-out use cases include:

* **Hiding an element**, such as a tooltip or a dropdown menu.
* **Collapsing a panel or an accordion**.
* **Moving an element off the screen** or to another position.

## Footnote

[""transition-timing-function - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function) Retrieved May 3, 2023."
What is the `ease-in-out` timing function usually used for?,"The `ease-in-out` timing function is used for creating CSS transitions that start slowly, accelerate in the middle, and then decelerate towards the end. This timing function combines the characteristics of both `ease-in` and `ease-out`, making it suitable for situations where you want a smooth and natural transition for elements that appear and disappear or change their state in response to user interactions.

Some common use cases for the ease-in-out timing function include:

* **Hover effects**: When an element's properties change on hover (such as size, color, or position), the ease-in-out function ensures a smooth transition both when the element is hovered over and when the hover state is removed.
* **Show and hide elements**: For elements that appear and disappear, like modals or side menus, the ease-in-out function creates a more natural, less abrupt transition.
* **Accordion or collapsible panels**: When expanding and collapsing panels, the ease-in-out function ensures that the opening and closing animations feel balanced and consistent.

## Footnote

[""transition-timing-function - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function) Retrieved May 3, 2023."
What is the `ease` timing function usually used for?,"The `ease` timing function is used for creating CSS transitions with a smooth and natural speed curve. This function starts slowly, accelerates in the middle, and then decelerates towards the end. 

Some common scenarios where the ease timing function can be applied include:

* **Hover effects**: When changing an element's properties on hover (such as color, size, or position), the ease function provides a smooth and gentle transition that is visually pleasing.
* **Fading elements**: When fading elements in or out using opacity, the ease function creates a more natural transition, making the change less abrupt.
* **Resizing or repositioning elements**: When resizing or repositioning elements in response to user interaction or as part of an animation, the ease function ensures a balanced and smooth motion.

## Footnote

[""transition-timing-function - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function) Retrieved May 3, 2023."
What does the `steps` timing function do?,"The `steps` timing function is used for creating CSS transitions or animations that progress in a series of discrete steps instead of a continuous, smooth motion. It is particularly useful when you want to create a stepped or frame-based animation, where the property values change abruptly at specific intervals.

The steps function takes two arguments:

* `n`: The number of intervals or steps the transition should be divided into. This should be a positive integer.
* `start` or `end`: This optional argument specifies when the step change should occur within each interval. If set to `start`, the change happens at the beginning of the interval. If set to `end`, the change happens at the end of the interval. The default value is end.

Example:

```
@keyframes sprite-animation {
  from {
    background-position: 0;
  }
  to {
    background-position: -500px;
  }
}

.sprite {
  background-image: url('sprite-sheet.png');
  animation: sprite-animation 1s steps(5, end) infinite;
}
```

In this example, a `sprite` animation is created using a sprite sheet with 5 frames. The steps function divides the transition into 5 discrete steps, ensuring that the background position jumps to each frame without any interpolation between them. The end keyword specifies that the change should occur at the end of each step interval.

## Footnote

[""transition-timing-function - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function) Retrieved May 3, 2023."
Can you animate all CSS properties?,"No. Some CSS properties cannot be animated using CSS transitions or animations, either because they don't have intermediate values between their initial and final states or because animating them would create undesirable side effects or performance issues.

Here's a list of some CSS properties that cannot be animated:

* `display`: This property defines the display type of an element, and there are no intermediate states between its different values (e.g., block, inline, none).
* `position`: The position property specifies the positioning scheme of an element, and there are no intermediate values between its different values (e.g., static, relative, absolute, fixed, sticky).
* `z-index`: This property controls the stacking order of positioned elements, and its values are integers. Although you could technically interpolate integer values, animating z-index would usually create undesirable visual effects.
* `content`: This property is used in conjunction with pseudo-elements to insert generated content. As it accepts various data types like strings, images, and counters, it is not suitable for animation.
* `cursor`: This property specifies the mouse cursor displayed when hovering over an element. There are no intermediate values between different cursor types.
* `visibility`: The visibility property determines whether an element is visible or hidden, and there are no intermediate values between visible and hidden. 

**Note**: Some properties like `visibility` cannot be animated but they will still ovey `transition-delay` values."

Question,Answer
transforms,transforms
What is the `transform` CSS property used for?,"The transform CSS property is used to modify the position, scale, and rotation of an element, either in 2D or 3D space.

## Footnote

[""transform - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/transform) Retrieved May 4, 2023."
What is the syntax and possible values for the `transform` CSS property?,"The syntax for the `transform` CSS property is 

```
transform: function(value);
```

Possible values include functions such as `translate`, `scale`, `rotate`, `skew`, and `matrix`, each with their respective values.

## Footnote

[""transform - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/transform) Retrieved May 4, 2023."
How can you apply multiple transforms to an element?,"You can apply multiple `transform`s by chaining the functions together, separated by spaces, like this: 

```
transform: function1(value) function2(value);
```

## Footnote

[""transform - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/transform) Retrieved May 4, 2023."
What are the common 1-dimensional `transform`s in CSS?,"The common 1-dimensional transforms in CSS are `translateX()`, `translateY()`, `scaleX()`, `scaleY()`, and `skewX()`, `skewY()`.

## Footnote

[""transform - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/transform) Retrieved May 4, 2023."
What are the main 3-dimensional `transform`s in CSS?,"The main 3-dimensional transforms in CSS are `translate3d(x, y, z)`, `scale3d(x, y, z)`, `rotateX(angle)`, `rotateY(angle)`, `rotateZ(angle)`, and `matrix3d()`.

## Footnote

[""transform - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/transform) Retrieved May 4, 2023."
What are the main types of CSS transform functions?,"The main types of CSS transforms are `translation`, `scaling`, `rotation`, `skewing`, and `matrix transformations`.

## Footnote

[""transform - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/transform) Retrieved May 4, 2023."
What does the `translate()` CSS transform function do?,"The `translation` transform moves an element from its current position along the X, Y, or Z axis without affecting the layout of surrounding elements.

## Footnote

[""translate() - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/translate) Retrieved May 4, 2023."
What are the syntaxes for `translate()` CSS transform functions?,"The syntaxes for translation functions in CSS are: `translate(tx, ty)`, `translateX(tx)`, `translateY(ty)`, and `translate3d(tx, ty, z)`.

**Values**:

* **tx** - Is a `<length>` or `<percentage>` representing the abscissa of the translating vector.

* **ty** - Is a `<length>` or `<percentage>` representing the ordinate of the translating vector.

* **tz** - Is a `<length>` representing the z component of the translating vector. It can't be a `<percentage>` value; in that case the property containing the transform is considered invalid.

## Footnote

[""translate() - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/translate) Retrieved May 4, 2023."
What does the `scale()` CSS transform do?,"The scaling transform resizes an element's width and height by a specified factor without affecting the layout of surrounding elements.

## Footnote

[""scale() - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/scale) Retrieved May 5, 2023."
What are the syntaxes for `scale()` CSS transform functions?,"The syntaxes for scaling functions in CSS are: `scale(sx, sy)`, `scaleX(sx)`, `scaleY(sy)`, and `scale3d(sx, sy, sz)`.

**Argument values**

* **sx** - Is a `<number>` representing the abscissa of the scaling vector.

* **sy** - Is a `<number>` representing the ordinate of the scaling vector.  If not defined, its default value is **sx**, resulting in a uniform scaling that preserves the element's aspect ratio.

* **sz** - Is a `<number>` representing the z-component of the scaling vector.

**NOTE**: `scale`, `scaleX` and `scaleY` also accepts `<percentage>` as argument values.

## Footnote

[""scale() - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/scale) Retrieved May 5, 2023."
What does the `rotate()` CSS transform function do?,"The rotation transform rotates an element around a specified axis without affecting the layout of surrounding elements.

## Footnote

[""rotate() - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/rotate) Retrieved May 5, 2023."
List all `rotate` CSS transform functions,"`rotate(angle)`, `rotateX(angle)`, `rotateY(angle)`, `rotateZ(angle)`, and `rotate3d(x, y, z, angle)`."
What is the syntax of the `rotate()` CSS transform function?,"```
rotate(angle);
```

**Values**

* **angle** - Is an `<angle>` representing the angle of the rotation. The direction of rotation depends on the writing direction. In a left-to-right context, a positive angle denotes a clockwise rotation, a negative angle a counter-clockwise one. In a right-to-left context, a positive angle denotes a counter-clockwise rotation, a negative angle a clockwise one.

## Footnote

[""rotate() - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/rotate) Retrieved May 5, 2023."
What does the `skew()` CSS transform function do?,"The `skew()` CSS function defines a transformation that skews an element on the 2D plane. Its result is a `<transform-function>` data type.

## Footnote

[""skew() - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/skew) Retrieved May 22, 2023."
What is the syntax of the `skew()` CSS transform function?,"**Syntax**

```
skew(ax)
skew(ax, ay)
```

**Values**

* `ax` - Is an `<angle>` representing the angle to use to distort the element along the x-axis (or abscissa).
* `ay` -  Is an <angle> representing the angle to use to distort the element along the y-axis (or ordinate). If not defined, its default value is 0, resulting in a purely horizontal skewing.

## Footnote

[""skew() - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/skew) Retrieved May 22, 2023."
What does the `translate` CSS property do?,"The `translate` CSS property allows you to specify translation transforms individually and independently of the transform property. 

This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the transform value.

## Footnote

[""translate - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/translate) Retrieved May 22, 2023."
What is the syntax of the `translate` CSS property?,"**Syntax**

```
/* Keyword values */
translate: none;

/* Single values */
translate: 100px;
translate: 50%;

/* Two values */
translate: 100px 200px;
translate: 50% 105px;

/* Three values */
translate: 50% 105px 5rem;
```

**Values**

* *Single `<length-percentage>` value* - A `<length>` or `<percentage>` that specifies a translation along the X-axis. Equivalent to a translate() (2D translation) function with a single value specified.

* *Two `<length-percentage>` values* - Two `<length>` or `<percentage>` that specify the X and Y axis translation values (respectively) of a 2D translation. Equivalent to a translate() (2D translation) function with two values specified.

* *Three values* - Two `<length-percentage>` and single `<length>` values that specify the X, Y, and Z axis translation values (respectively) of a 3D translation. Equivalent to a translate3d() (3D translation) function.

* `none` - Specifies that no translation should be applied.

## Footnote

[""translate - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/translate) Retrieved May 22, 2023."
What does the `rotate` CSS property do?,"The `rotate` CSS property allows you to specify rotation transforms individually and independently of the transform property. 

This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the transform property.

## Footnote

[""rotate - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/rotate) Retrieved May 22, 2023."
What is the syntax of the `rotate` CSS property?,"**Syntax**

```
/* Keyword values */
rotate: none;

/* Angle value */
rotate: 90deg;
rotate: 0.25turn;
rotate: 1.57rad;

/* x, y, or z axis name plus angle */
rotate: x 90deg;
rotate: y 0.25turn;
rotate: z 1.57rad;

/* Vector plus angle value */
rotate: 1 1 1 90deg;
```

**Values**

* *angle value* - An `<angle>` specifying the angle to rotate the affected element through, around the Z axis. Equivalent to a `rotate()` (2D rotation) function.

* *x, y, or z axis name plus angle value* - The name of the axis you want to rotate the affected element around (""x"", ""y"", or ""z""), plus an `<angle>` specifying the angle to rotate the element through. Equivalent to a `rotateX()/rotateY()/rotateZ()` (3D rotation) function.

* *vector plus angle value* - Three `<number>`s representing an origin-centered vector that defines a line around which you want to rotate the element, plus an `<angle>` specifying the angle to rotate the element through. Equivalent to a `rotate3d()` (3D rotation) function.

* `none` - Specifies that no rotation should be applied.

## Footnote

[""rotate - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/rotate) Retrieved May 22, 2023."
What does the `scale` CSS property do?,"The `scale` CSS property allows you to specify scale transforms individually and independently of the transform property. 

This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the transform value.

## Footnote

[""scale - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/scale) Retrieved May 23, 2023."
What is the syntax of the `scale` CSS property?,"**Syntax**

```
/* Keyword values */
scale: none;

/* Single values */
/* values of more than 1 or 100% make the element grow */
scale: 2;
/* values of less than 1 or 100% make the element shrink */
scale: 50%;

/* Two values */
scale: 2 0.5;

/* Three values */
scale: 200% 50% 200%;
```

**Values**

* *Single value* - A `<number>` or `<percentage>` specifying a scale factor to make the affected element scale by the same factor along both the X and Y axes. Equivalent to a `scale()` (2D scaling) function with a single value specified.

* *Two values* - Two `<number>` or `<percentage>` values that specify the X and Y axis scaling values (respectively) of a 2D scale. Equivalent to a `scale()` (2D scaling) function with two values specified.

* *Three values* - Three `<number>` or `<percentage>` values that specify the X, Y, and Z axis scaling values (respectively) of a 3D scale. Equivalent to a `scale3d()` (3D scaling) function.

* `none` - Specifies that no scaling should be applied.

## Footnote

[""scale - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/scale) Retrieved May 23, 2023."
What does the `transform-origin` CSS property do?,"The `transform-origin` CSS property sets the origin for an element's transformations.

## Footnote

[""transform-origin - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin) Retrieved May 23, 2023."
What is the syntax of the `transform-origin` CSS property?,"**Syntax**

```
/* One-value syntax */
transform-origin: 2px;
transform-origin: bottom;

/* x-offset | y-offset */
transform-origin: 3cm 2px;

/* x-offset-keyword | y-offset */
transform-origin: left 2px;

/* x-offset-keyword | y-offset-keyword */
transform-origin: right top;

/* y-offset-keyword | x-offset-keyword */
transform-origin: top right;

/* x-offset | y-offset | z-offset */
transform-origin: 2px 30% 10px;

/* x-offset-keyword | y-offset | z-offset */
transform-origin: left 5px -3px;

/* x-offset-keyword | y-offset-keyword | z-offset */
transform-origin: right bottom 2cm;

/* y-offset-keyword | x-offset-keyword | z-offset */
transform-origin: bottom right 2cm;
```

The `transform-origin` property may be specified using one, two, or three values, where each value represents an offset. Offsets that are not explicitly defined are reset to their corresponding initial values.

If a single `<length>` or `<percentage>` value is defined, it represents the horizontal offset.

If two or more values are defined and either no value is a keyword, or the only used keyword is center, then the first value represents the horizontal offset and the second represents the vertical offset.

**Values**

* *x-offset* - Is a `<length>` or a `<percentage>` describing how far from the left edge of the box the origin of the transform is set.

* *offset-keyword* - Is one of the `left`, `right`, `top`, `bottom`, or `center` keyword describing the corresponding offset.

* *y-offset* - Is a `<length>` or a `<percentage>` describing how far from the top edge of the box the origin of the transform is set.

* *x-offset-keyword* - Is one of the `left`, `right`, or `center` keyword describing how far from the left edge of the box the origin of the transform is set.

* *y-offset-keyword* - Is one of the `top`, `bottom`, or `center` keyword describing how far from the top edge of the box the origin of the transform is set.

* *z-offset* - Is a `<length>` (and never a `<percentage>` which would make the statement invalid) describing how far from the user eye the `z=0` origin is set.

## Footnote

[""transform-origin - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin) Retrieved May 23, 2023."
What does the CSS `transform: rotate(45deg);` function do?,It rotates the element 45 degrees clockwise.
Apply a CSS transform function that scales an element to twice its original size.,"```
transform: scale(2);
```"
Which CSS transform function would you use to move an element 30 pixels to the right and 20 pixels down without disrupting the normal flow of the document?,"```
transform: translate(30px, 20px);
```"
What does the CSS function `transform: skewX(20deg);` do to an element?,It skews the element 20 degrees along the X-axis.
How would you combine multiple transform functions in a single declaration?,"You can chain multiple functions together, like this: `transform: rotate(45deg) scale(2);`"
How to use CSS transform to rotate an element 45 degrees counter-clockwise?,"```
transform: rotate(-45deg);
```"
Write a CSS rule that scales an element in the x-direction by 1.5 times and in the y-direction by 0.5 times.,"```
transform: scaleX(1.5) scaleY(0.5);
```"
How to rotate an element around a fixed point (say `100px 100px`)?,"Set the `transform-origin` property to `100px 100px` before applying the rotate function:

```
transform-origin: 100px 100px;
transform: rotate(45deg);
```"

Question,Answer
animations,animations
What are CSS animations?,"CSS animations are a way to animate HTML elements using CSS. This can include changes in size, position, color, opacity, and other properties over a certain duration, either once or in a loop.

CSS animations are created by specifying keyframes for the animation sequence and then binding the keyframes to a specified CSS element. The keyframes hold what styles the element will have at certain times, and the animation is smooth in between those keyframes.

Example: 

```
@keyframes example {
  0%   {background-color: red;}
  50%  {background-color: yellow;}
  100% {background-color: blue;}
}

div {
  width: 100px;
  height: 100px;
  animation: example 5s infinite; /* The animation will last for 5 seconds, and it will repeat forever */
}
```

In this example, the `@keyframes` rule defines an animation named `example`, that changes the `background-color` of an element from `red` to `yellow` at the `50%` point, then to `blue` at the end. The animation property in the `div` rule attaches the example animation to the div elements, sets the animation to last for 5 seconds and repeats it indefinitely."
What is the difference between CSS animations and CSS transitions?,"While both are used to animate CSS properties, transitions are generally simpler and useful when you want to smoothly animate a property from one value to another on events like hover, while animations are more powerful and flexible, providing control over the animation sequence and intermediate steps."
What does `animation-name` CSS property do?,"The `animation-name` CSS property specifies the names of one or more `@keyframes` at-rules that describe the animation to apply to an element. Multiple `@keyframe` at-rules are specified as a comma-separated list of names. If the specified name does not match any `@keyframe` at-rule, no properties are animated.

## Footnote

[""animation-name - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/animation-name) Retrieved May 25, 2023."
What is the syntax of the `animation-name` CSS property?,"**Syntax**

```
/* Single animation */
animation-name: none;
animation-name: test_05;
animation-name: -specific;
animation-name: sliding-vertically;

/* Multiple animations */
animation-name: test1, animation4;
animation-name: none, -moz-specific, sliding;
```

**Values**

* `none` - A special keyword denoting no keyframes. It can be used to deactivate an animation without changing the ordering of the other identifiers, or to deactivate animations coming from the cascade.

* `<custom-ident>` - A name identifying the animation. This identifier is composed of a combination of case-sensitive letters a to z, numbers 0 to 9, underscores ( _ ), and/or dashes (-). The first non-dash character must be a letter. Also, two dashes are forbidden at the beginning of the identifier. Furthermore, the identifier can't be none, unset, initial, or inherit.

## Footnote

[""animation-name - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/animation-name) Retrieved May 25, 2023."
What does `animation-duration` CSS property do?,"The `animation-duration` CSS property sets the length of time that an animation takes to complete one cycle.

## Footnote

[""animation-duration - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/animation-duration) Retrieved May 25, 2023."
What is the syntax of the `animation-duration` CSS property?,"**Syntax**

```
/* Single animation */
animation-duration: 6s;
animation-duration: 120ms;

/* Multiple animations */
animation-duration: 1.64s, 15.22s;
animation-duration: 10s, 35s, 230ms;
```

**Values**

* `<time>` - The time that an animation takes to complete one cycle. This may be specified in either seconds (`s`) or milliseconds (`ms`). The value must be positive or zero and the unit is required.

If no value is provided, the default value of `0s` is used

## Footnote

[""animation-duration - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/animation-duration) Retrieved May 25, 2023."
What does the `animation-timing-function` CSS property do?,"The `animation-timing-function` CSS property sets how an animation progresses through the duration of each cycle.

## Footnote

[""animation-timing-function - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function) Retrieved May 25, 2023."
What is the syntax of the `animation-timing-function` CSS property?,"**Syntax**

```
/* Keyword values */
animation-timing-function: ease;
animation-timing-function: ease-in;
animation-timing-function: ease-out;
animation-timing-function: ease-in-out;
animation-timing-function: linear;
animation-timing-function: step-start;
animation-timing-function: step-end;

/* Function values */
animation-timing-function: cubic-bezier(0.1, 0.7, 1, 0.1);
animation-timing-function: steps(4, end);

/* Steps Function keywords */
animation-timing-function: steps(4, jump-start);
animation-timing-function: steps(10, jump-end);
animation-timing-function: steps(20, jump-none);
animation-timing-function: steps(5, jump-both);
animation-timing-function: steps(6, start);
animation-timing-function: steps(8, end);
```

**Values**

The `animation-timing-function` property can take the following values: `linear`, `ease`, `ease-in`, `ease-out`, `ease-in-out`, `step-start`, `step-end`, `steps(int, start|end)`, `cubic-bezier(n,n,n,n)`, and specific steps using the `steps()` function.

* `ease` - Increases in velocity towards the middle of the animation, slowing back down at the end.

* `linear` - Animates at an even speed.

* `ease-in` - Starts off slowly, with the speed of the transition of the animating property increasing until complete.

* `ease-out` - Starts quickly, slowing down the animation continues.

* `ease-in-out` - Starts slowly, speeding up, and then slowing down again.

* `cubic-bezier(p1, p2, p3, p4)` - An author defined cubic-bezier curve, where the p1 and p3 values must be in the range of 0 to 1.

* `steps(n, <jumpterm>)` - Displays an animation iteration along n stops along the transition, displaying each stop for equal lengths of time.

## Footnote

[""animation-timing-function - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function) Retrieved May 25, 2023."
What is the `steps()` function in the `animation-timing-function` CSS property?,"`steps(n, <jump-term>)` - Displays an animation iteration along n stops along the transition, displaying each stop for equal lengths of time. For example, if `n` is `5`, there are 5 steps. Whether the animation holds temporarily at `0%`, `20%`, `40%`, `60%` and `80%`, on the `20%`, `40%`, `60%`, `80%` and `100%`, or makes 5 stops between the `0%` and `100%` along the animation, or makes 5 stops including the `0%` and `100%` marks (on the `0%`, `25%`, `50%`, `75%`, and `100%`) depends on which of the following jump terms is used:

* `jump-start` | `start` - Denotes a left-continuous function, so that the first jump happens when the animation begins;

* `jump-end` | `end` - Denotes a right-continuous function, so that the last jump happens when the animation ends;

* `jump-none` - There is no jump on either end. Instead, holding at both the `0%` mark and the `100%` mark, each for 1/n of the duration.

* `jump-both` - Includes pauses at both the `0%` and `100%` marks, effectively adding a step during the animation iteration.

* `step-start` - Equal to `steps(1, jump-start)`

* `step-end` - Equal to `steps(1, jump-end)`

## Footnote

[""animation-timing-function - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function) Retrieved May 26, 2023."
What does the `animation-delay` CSS property do?,"The `animation-delay` CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation.

## Footnote

[""animation-delay - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/animation-delay) Retrieved May 26, 2023."
What is the syntax of the `animation-delay` CSS property?,"**Syntax**

```
/* Single animation */
animation-delay: 3s;
animation-delay: 0s;
animation-delay: -1500ms;

/* Multiple animations */
animation-delay: 2.1s, 480ms;
```

**Values**

* `<time>` - The time offset, from the moment at which the animation is applied to the element, at which the animation should begin. This may be specified in either seconds (`s`) or milliseconds (`ms`). The unit is required.

A positive value indicates that the animation should begin after the specified amount of time has elapsed. 

A negative value causes the animation to begin immediately, but partway through its cycle. For example, if you specify `-1s` as the animation delay time, the animation will begin immediately but will start 1 second into the animation sequence.

## Footnote

[""animation-delay - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/animation-delay) Retrieved May 26, 2023."
What does the `animation-iteration-count` CSS property do?,"The `animation-iteration-count` CSS property sets the number of times an animation sequence should be played before stopping.

## Footnote

[""animation-iteration-count - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/animation-iteration-count) Retrieved May 26, 2023."
What is the syntax of the `animation-iteration-count` CSS property?,"**Syntax**

```
/* Keyword value */
animation-iteration-count: infinite;

/* <number> values */
animation-iteration-count: 3;
animation-iteration-count: 2.4;

/* Multiple values */
animation-iteration-count: 2, 0, infinite;
```

**Values**
The animation-iteration-count property is specified as one or more comma-separated values.

* `infinite` - The animation will repeat forever.

* `<number>` - The number of times the animation will repeat; this is `1` by default. You may specify non-integer values to play part of an animation cycle: for example, `0.5` will play half of the animation cycle. **Negative values are invalid**.

## Footnote

[""animation-iteration-count - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/animation-iteration-count) Retrieved May 26, 2023."
What does the `animation-direction` CSS property do?,"The `animation-direction` CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.

## Footnote

[""animation-direction - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/animation-direction) Retrieved May 26, 2023."
What is the syntax of the `animation-direction` CSS property?,"**Syntax**

```
/* Single animation */
animation-direction: normal;
animation-direction: reverse;
animation-direction: alternate;
animation-direction: alternate-reverse;

/* Multiple animations */
animation-direction: normal, reverse;
animation-direction: alternate, reverse, normal;
```

**Values**

* `normal` - Default value - The animation plays forwards each cycle. In other words, each time the animation cycles, the animation will reset to the beginning state and start over again. 

* `reverse` - The animation plays backwards each cycle. In other words, each time the animation cycles, the animation will reset to the end state and start over again. Animation steps are performed backwards, and timing functions are also reversed. For example, an `ease-in` timing function becomes `ease-out`.

* `alternate` - The animation reverses direction each cycle, with the first iteration being played forwards. The count to determine if a cycle is even or odd starts at one.

* `alternate-reverse` - The animation reverses direction each cycle, with the first iteration being played backwards. The count to determine if a cycle is even or odd starts at one.

## Footnote

[""animation-direction - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/animation-direction) Retrieved May 26, 2023."
What does `animation-fill-mode` CSS property do?,"The `animation-fill-mode` CSS property sets how a CSS animation applies styles to its target before and after its execution.

## Footnote

[""animation-fill-mode - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/animation-fill-mode) Retrieved May 26, 2023."
What is the syntax of the `animation-fill-mode` CSS property?,"**Syntax**

```
/* Single animation */
animation-fill-mode: none;
animation-fill-mode: forwards;
animation-fill-mode: backwards;
animation-fill-mode: both;

/* Multiple animations */
animation-fill-mode: none, backwards;
animation-fill-mode: both, forwards, none;
```

**Values**

* `none` - Default - The animation will not apply any styles to the target when it's not executing. The element will instead be displayed using any other CSS rules applied to it. 

* `forwards` - The target will retain the computed values set by the last keyframe encountered during execution.

* `backwards` - The animation will apply the values defined in the first relevant keyframe as soon as it is applied to the target, and retain this during the animation-delay period. 

* `both` - The animation will follow the rules for both forwards and backwards, thus extending the animation properties in both directions.

## Footnote

[""animation-fill-mode - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/animation-fill-mode) Retrieved May 26, 2023."
What does the `animation-play-state` CSS property do?,"The `animation-play-state` CSS property sets whether an animation is running or paused.

## Footnote

[""animation-play-state - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/animation-play-state) Retrieved May 29, 2023."
What is the syntax of the `animation-play-state` CSS property?,"**Syntax**

```
/* Single animation */
animation-play-state: running;
animation-play-state: paused;

/* Multiple animations */
animation-play-state: paused, running, running;
```

**Values**

* `running` - The animation is currently playing.
* `paused` - The animation is currently paused.

## Footnote

[""animation-play-state - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/animation-play-state) Retrieved May 29, 2023."
What does the `animation-composition` CSS property do?,"The animation-composition CSS property specifies the [composite operation](https://developer.mozilla.org/en-US/docs/Glossary/Composite_operation) to use when multiple animations affect the same property simultaneously.

## Footnote

[""animation-composition - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/animation-composition) Retrieved May 29, 2023."
What is the syntax of the `animation-composition` CSS property?,"**Syntax**

```
/* Single animation */
animation-composition: replace;
animation-composition: add;
animation-composition: accumulate;

/* Multiple animations */
animation-composition: replace, add;
animation-composition: add, accumulate;
animation-composition: replace, add, accumulate;
```

**Values**

* `replace` - defalut value - The effect value overrides the underlying value of the property.

* `add` - The effect value builds on the underlying value of the property. This operation produces an additive effect. For animation types where the addition operation is not commutative, the order of the operands is the underlying value followed by the effect value.

* `accumulate` - The effect and underlying values are combined. For animation types where the addition operation is not commutative, the order of the operands is the underlying value followed by the effect value.

Example:

```

.icon:hover {
  filter: blur(5px);
  animation: 3s infinite pulse;
  animation-composition: add;
}

@keyframes pulse {
  0% {
    filter: blur(10px);
  }
  100% {
    filter: blur(20px);
  }
}
```

Consider different values for the `animation-composition` property in the above example. The final effect value in each of those cases will be calculated as explained below:

* With `replace`, `blur(10px)` will replace `blur(5px)` in the `0%` keyframe. This is the default behavior of the property.
* With `add`, the composite effect value in the `0%` keyframe will be `blur(5px) blur(10px).`
* With `accumulate`, the composite effect value in `0%` keyframe will be `blur(15px)`.


## Footnote

[""animation-composition - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/animation-composition) Retrieved May 29, 2023."
What does the `@keyframes` CSS at-rule do?,"The `@keyframes` CSS at-rule controls the intermediate steps in a CSS animation sequence by defining styles for keyframes (or waypoints) along the animation sequence.

## Footnote

[""@keyframes - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes) Retrieved May 30, 2023."
What is the syntax of the `@keyframes` CSS at-rule?,"**Syntax**

```
@keyframes custom-ident {
  from {
    transform: translateX(0%);
  }

  to {
    transform: translateX(100%);
  }
}

@keyframes custom-ident-2 {
  0%   {background-color: red;}
  50%  {background-color: yellow;}
  100% {background-color: blue;}
}
```

**Values**

* `<custom-ident>` - A name identifying the keyframe list. This must match the identifier production in CSS syntax.
* `from` - A starting offset of 0%.
* `to` - An ending offset of 100%.
* `<percentage>` - A percentage of the time through the animation sequence at which the specified keyframe should occur.

## Footnote

[""@keyframes - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes) Retrieved May 30, 2023."
What happens to properties that can’t be animated in keyframe rules?,"Properties that can't be animated in keyframe rules are ignored, but supported properties will still be animated.

## Footnote

[""@keyframes - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes) Retrieved May 30, 2023."
How are `@keyframe` at-rule duplicates handled?,"If multiple keyframe sets exist for a given name, **the last one encountered by the parser is used**. `@keyframes` rules don't cascade, so animations never derive keyframes from more than one rule set.

If a given animation time offset is duplicated, all keyframes in the `@keyframes` rule for that percentage are used for that frame. **There is cascading within a `@keyframes` rule if multiple keyframes specify the same percentage values**.

## Footnote

[""@keyframes - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes) Retrieved May 30, 2023."
What happens when properties are left out of some keyframes?,"Properties that aren't specified in every keyframe are interpolated if possible — properties that can't be interpolated are dropped from the animation. For example:

```
@keyframes identifier {
  0% {
    top: 0;
    left: 0;
  }
  30% {
    top: 50px;
  }
  68%,
  72% {
    left: 50px;
  }
  100% {
    top: 100px;
    left: 100%;
  }
}
```

Here, the top property animates using the `0%`, `30%`, and `100%` keyframes, and left animates using the `0%`, `68%`, `72%` and `100%` keyframes.

## Footnote

[""@keyframes - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes) Retrieved May 30, 2023."
What happens to declarations with `!important` in a keyframe?,"Declarations in a keyframe qualified with `!important` are ignored.

```
@keyframes important1 {
  from {
    margin-top: 50px;
  }
  50% {
    margin-top: 150px !important;
  } /* ignored */
  to {
    margin-top: 100px;
  }
}

@keyframes important2 {
  from {
    margin-top: 50px;
    margin-bottom: 100px;
  }
  to {
    margin-top: 150px !important; /* ignored */
    margin-bottom: 50px;
  }
}
```

## Footnote

[""@keyframes - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes) Retrieved May 30, 2023."
What does the `animation` CSS shorthand property do?,"The `animation` shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.

## Footnote

[""animation - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/animation) Retrieved May 31, 2023."
List the properties the `animation` shorthand property encapsulates,"The `animation` shorthand property encapsulates the following properties:

* `animation-name`
* `animation-duration`
* `animation-timing-function`
* `animation-delay`
* `animation-iteration-count`
* `animation-direction`
* `animation-fill-mode`
* `animation-play-state`

## Footnote

[""animation - CSS: Cascading Style Sheets | MDN"" (developer.mozilla.org).](https://developer.mozilla.org/en-US/docs/Web/CSS/animation) Retrieved May 31, 2023."
What is the syntax of the `animation` CSS shorthand property?,"**Syntax**

```
/* @keyframes duration | easing-function | delay |
iteration-count | direction | fill-mode | play-state | name */
animation: 3s ease-in 1s 2 reverse both paused slidein;

/* @keyframes duration | easing-function | delay | name */
animation: 3s linear 1s slidein;

/* two animations */
animation: 3s linear slidein, 3s ease-out 5s slideout;
Copy to Clipboard
```

**Values**
The animation property is specified as one or more single animations, separated by commas.

Each individual animation is specified as:

zero, one, or two occurrences of the `<time>` value
zero or one occurrences of the following values:
`<single-easing-function>`
`<single-animation-iteration-count>`
`<single-animation-direction>`
`<single-animation-fill-mode>`
`<single-animation-play-state>`
an optional name for the animation, which may be none, a `<custom-ident>`, or a `<string>` Values"

Question,Answer
animation exercises,animation exercises
"Given the following CSS rule, identify the name, duration, and iteration count of the animation

```
div {
  animation: spin 3s infinite;
}
```","* `animation-name: spin`
* `animation-duration: 3s`
* `animation-iteration-count: infinite`"
"Write a CSS rule to apply an animation named spin, which lasts for 2s, runs infinite times, and has a linear timing function.","```
div { animation: spin 2s linear infinite; }
```"
"What will be the behavior of the following CSS animation?

```
div {
  animation: bounce 2s ease-in-out 1s infinite alternate both paused;
}
```","This animation:

* is named `bounce`
* lasts `2s`
* has an `ease-in-out` timing function, meaning it starts slowly, accelerates in the middle, and then slows down at the end
* waits `1s` before starting the animation
* runs an `infinite` number of times
* alternates directions between iterations (`alternate`)
* applies styles from the animation to the element `both` before (`backwards`) and after (`forwards`) the animation's execution
* is initially `paused`, meaning it will not run until its `play-state` is changed to running"
"Write a CSS rule for an animation named `slide`, which lasts for `5s`, has a delay of `2s`, runs 3 times, and is initially `paused`","```
div { animation: slide 5s 2s 3 paused; }
```"
"Given the following CSS rule, how many times will the animation run and in what direction?

```
div {
  animation: growShrink 4s infinite reverse;
}
```","* `animation-iteration-count: infinite`, so the animation will run indefinitely
* `animation-direction: reverse`, so the animation will play in reverse"
"What will be the `animation-fill-mode` and `animation-play-state` for the following CSS rule?

```
div {
  animation: popIn 3s both running;
}
```","* `animation-fill-mode: both`, meaning the styles are applied to the element for both the state before and after the animation's execution
* `animation-play-state: running`, meaning the animation will run as soon as it is applied"
"Given the following CSS rule, what will be the name and duration of the animation?

```
div {
  animation: popOut 5s;
}
```","* `animation-name`: popOut
* `animation-duration`: 5s"
"Write a CSS rule to apply an animation named `rotate`, which lasts for `1s`, runs `5` times, and has an `ease-out` timing function.","```
div { animation: rotate 1s ease-out 5; }
```"
"What is the behavior of the following CSS animation?

```
div {
  animation: bounce 2s ease-in 1s 3 alternate backwards;
}
```","* is named `bounce`
* lasts `2s`
* has an `ease-in` timing function, meaning it starts slowly and then accelerates
* waits `1s` before starting the animation
* runs `3` times
* alternates directions between iterations (`alternate`)
* applies styles from the animation to the element before the animation's execution (`backwards`)"
"Write a CSS rule for an animation named `fade`, which lasts for `3s`, has a delay of `1s`, runs `2` times, and uses a `ease-in-out` timing function.","```
div { animation: fade 3s ease-in-out 1s 2; }
```"
"What will be the `animation-timing-function` and `animation-delay` for the following CSS rule?

```
div {
  animation: grow 3s ease-in 1s;
}
```","* `animation-timing-function: ease-in`, meaning the animation starts slowly and then accelerates
* `animation-delay: 1s`, meaning the animation will start after a delay of 1 second"
"Given the following CSS rule, what is the direction of the animation and its play state?

```
div {
  animation: shrink 4s alternate paused;
}
```","* `animation-direction: alternate`, meaning the animation will alternate directions with each iteration
* `animation-play-state: paused`, meaning the animation will not start running until its play state is changed"
"Write a CSS rule to apply an animation named `jump`, which lasts for `1.5s`, has a delay of `0.5s`, runs `infinite` times, and is initially `running`.","```
div {  animation: jump 1.5s 0.5s infinite running; }
```"
"What will be the `animation-iteration-count` and `animation-fill-mode` for the following CSS rule?

```
div {
  animation: slideIn 3s 1 backwards;
}
```","* `animation-iteration-count: 1`, meaning the animation will play once
* `animation-fill-mode: backwards`, meaning the styles defined by the animation's first keyframe will be applied as soon as the animation is applied to the element"
"Given the following CSS rule, what will be the name, duration, and timing function of the animation?

```
div {
  animation: flip 2s cubic-bezier(0.1, 0.7, 1.0, 0.1) 1s;
}
```","* `animation-name: flip`
* `animation-duration: 2s`
* `animation-timing-function: cubic-bezier(0.1, 0.7, 1.0, 0.1)`, this represents a cubic bezier curve for customizing the timing function"

Question,Answer
misc,misc
`quotes` CSS property,"The CSS `quotes` property sets how the browser should render quotation marks that are automatically added to the HTML [`<q>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q) element or added using the `open-quotes` or `close-quotes` (or omitted using the `no-open-quote` and `no-close-quote`) values of the of the CSS [`content`](https://developer.mozilla.org/en-US/docs/Web/CSS/content) property.

Browsers insert quotation marks at the opening and closing of [`<q>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q) elements and for the `open-quote` and `close-quote` values of the content property. Each opening or closing quote is replaced by one of the strings from the value of `quotes`, based on the depth of nesting, or, if quotes is explicity set to or otherwise resolves to `auto`, the quotation marks used are language dependent.

Syntax

```
/* Keyword value */
quotes: none;
quotes: auto;

/* <string> values */
quotes: ""«"" ""»""; /* Set open-quote and close-quote to use French quotation marks */
quotes: ""«"" ""»"" ""‹"" ""›""; /* Set two levels of quotation marks */
```

**Values**

**`none`** - The `open-quote` and `close-quote` values of the [`content`](https://developer.mozilla.org/en-US/docs/Web/CSS/content) property produce no quotation marks, as if `no-open-quote` and `no-close-quote` were set, respectively.

**`auto`** - Quotation marks that are typographically appropriate for the inherited language (i.e. via the [`lang`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#lang) attribute set on the parent or other ancestor).

**`[<string> <string>]+`** - Defines one or more pairs of quotation mark values for opening and closing quotes. In each pair, the first of each pair of quotes are used as the values for the open-quote and the second of each pair is the close-quote.

The first pair represents the quotation's outer level. The second pair, if present, represents the first nested level. The next pair is used for doubly nested levels, and so on. If the depth of quote nesting is greater than the number of pairs, the last pair in the quotes value is repeated.

## Footnote

[""`quotes` - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/quotes) Retrieved May 14, 2024."
`content` CSS property,"The `content` CSS property replaces content with a generated value. It can be used to define what is rendered inside an element or pseudo-element. For elements, the `content` property specifies whether the element renders normally (`normal` or `none`) or is replaced with an image (and associated ""alt"" text). For pseudo-elements and margin boxes, `content` defines the content as images, text, both, or none, which determines whether the element renders at all.

Objects inserted using the `content` property are anonymous [replaced elements](https://developer.mozilla.org/en-US/docs/Web/CSS/Replaced_element).

**Syntax**

```
/* Keywords that cannot be combined with other values */
content: normal;
content: none;

/* <content-replacement>: <image> values */
content: url(""http://www.example.com/test.png"");
content: linear-gradient(#e66465, #9198e5);
content: image-set(""image1x.png"" 1x, ""image2x.png"" 2x);

/* speech output: alternative text after a ""/""  */
content: url(""../img/test.png"") / ""This is the alt text"";

/* <string> value */
content: ""unparsed text"";

/* <counter> values, optionally with <list-style-type> */
content: counter(chapter_counter);
content: counter(chapter_counter, upper-roman);
content: counters(section_counter, ""."");
content: counters(section_counter, ""."", decimal-leading-zero);

/* attr() value linked to the HTML attribute value */
content: attr(href);

/* <quote> values */
content: open-quote;
content: close-quote;
content: no-open-quote;
content: no-close-quote;

/* <content-list>: a list of content values. 
Several values can be used simultaneously */
content: ""prefix"" url(http://www.example.com/test.png);
content: ""prefix"" url(""/img/test.png"") ""suffix"" / ""Alt text"";
content: open-quote counter(chapter_counter);
```

**Values**

* One of two keywords — `none` or `normal`
`<content-replacement>` when replacing a DOM node. `<content-replacement>` is always an `<image>`.
* A `<content-list>` when replacing pseudo-elements and margin boxes. A *content-list* is a list of one or more anonymous inline boxes appearing in the order specified. Each `<content-list>` item is either contents or of type `<string>`, `<image>`, * `<counter>`, `<quote>`, `<target>`, or `<leader()>`.
An optional alternative text value of a `<string>` or `<counter>`, preceded by a slash (`/`).

## Footnote

[""`content` - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/content) Retrieved May 15, 2024."
`scroll-snap-type`,"The `scroll-snap-type` CSS property sets how strictly snap points are enforced on the scroll container in case there is one.

Specifying any precise animations or physics used to enforce those snap points is not covered by this property but instead left up to the user agent.

**Syntax**

```
/* No snapping */
scroll-snap-type: none;

/* Keyword values for snap axes */
scroll-snap-type: x;
scroll-snap-type: y;
scroll-snap-type: block;
scroll-snap-type: inline;
scroll-snap-type: both;

/* Optional keyword values for snap strictness */
/* mandatory | proximity */
scroll-snap-type: x mandatory;
scroll-snap-type: y proximity;
scroll-snap-type: both mandatory;

/* Global values */
scroll-snap-type: inherit;
scroll-snap-type: initial;
scroll-snap-type: revert;
scroll-snap-type: revert-layer;
scroll-snap-type: unset;
```

**Values**

`none` - When the visual [viewport](https://developer.mozilla.org/en-US/docs/Glossary/Viewport) of this scroll container is scrolled, it must ignore snap points.

`x` - The scroll container snaps to snap positions in its horizontal axis only.

`y` - The scroll container snaps to snap positions in its vertical axis only.

`block` - The scroll container snaps to snap positions in its block axis only.

`inline` - The scroll container snaps to snap positions in its inline axis only.

`both` - The scroll container snaps to snap positions in both of its axes independently (potentially snapping to different elements in each axis).

`mandatory` - The visual viewport of this scroll container must snap to a snap position if it isn't currently scrolled.

`proximity` - The visual viewport of this scroll container may snap to a snap position if it isn't currently scrolled. The user agent decides if it snaps or not based on scroll parameters. This is the default snap strictness if any snap axis is specified.

**Note**: If the content in the snap port is changed (e.g. added, moved, deleted, or resized) or the value of any scroll snap-related property (e.g. `scroll-snap-type` or `scroll-margin`) is changed, the scroll container will be [resnapped](https://drafts.csswg.org/css-scroll-snap/#re-snap) according to the latest value of scroll-snap-type.

## Footnote

[""`scroll-snap-type `- CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-snap-type) Retrieved July 5, 2024."
`clamp()` CSS function,"The `clamp()` CSS function clamps a middle value within a range of values between a defined minimum bound and a maximum bound. The function takes three parameters: a minimum value, a preferred value, and a maximum allowed value.

Note that using `clamp()` for font sizes,allows you to set a `font-size` that grows with the size of the viewport, but doesn't go below a minimum `font-size` or above a maximum `font-size`. It has the same effect as the code in [Fluid Typography](https://css-tricks.com/snippets/css/fluid-typography/) but in one line, and without the use of media queries.

**Syntax**

```
/* Static values */
width: clamp(200px, 40%, 400px);
width: clamp(20rem, 30vw, 70rem);
width: clamp(10vw, 20em, 100vw);

/* Calculated values */
width: clamp(min(10vw, 20rem), 300px, max(90vw, 55rem));
width: clamp(100px, calc(30% / 2rem + 10px), 900px);
```

**Parameters**

The `clamp(min, val, max)` function accepts three comma-separated expressions as its parameters.

* **`min`** - The minimum value is the smallest (most negative) value. This is the lower bound in the range of allowed values. If the preferred value is less than this value, the minimum value will be used.

* **`va`l** - The preferred value is the expression whose value will be used as long as the result is between the minimum and maximum values.

* **`max`** - The maximum value is the largest (most positive) expression value to which the value of the property will be assigned if the preferred value is greater than this upper bound.

The expressions can be math functions (see [`calc()`](https://developer.mozilla.org/en-US/docs/Web/CSS/calc) for more information), literal values, other expressions that evaluate to a valid argument type (like [`<length>`](https://developer.mozilla.org/en-US/docs/Web/CSS/length)), or nested [`min()`](https://developer.mozilla.org/en-US/docs/Web/CSS/min) and [`max()`](https://developer.mozilla.org/en-US/docs/Web/CSS/max) functions. For math expressions, you can use addition, subtraction, multiplication, and division without using the calc() function itself. You may also use parentheses to establish computation order when needed.

**Examples**

```
html {
  font-family: sans-serif;
}

body {
  margin: 0 auto;
  width: min(1000px, calc(70% + 100px));
}

h1 {
  letter-spacing: 2px;
  font-size: clamp(1.8rem, 2.5vw, 2.8rem);
}

p {
  line-height: 1.5;
  font-size: max(1.2rem, 1.2vw);
}
```

## Footnote

[""clamp() - CSS: Cascading Style Sheets | MDN"" (MDN Web Docs).](https://developer.mozilla.org/en-US/docs/Web/CSS/clamp) Retrieved November 27, 2024."
